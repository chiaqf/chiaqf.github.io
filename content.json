{"pages":[],"posts":[{"title":"Is stock picking based on PE useful?","text":"Whether it’s PE, ROE, DY there are tons of financial jargons and financial ratios out there. The value investors emphasize on buying cheap (low PE, PB), while growth investors focus on buying stocks with high growth (high ROE etc). How do we know which ratio is the most useful to find out potentially profitable stocks? Let’s find out. IntroductionFor today’s topic, I am going to introduce a backtesting tool that I have developed myself during free time. https://www.klsequant.com So what’s the main goal/function of this web app? Say that you have a stock picking strategy that you wanted to test out. For example, buy a stock when PE is below 10 while ROE is above 20. Then you can backtest your strategy, to see how well your stock picking strategy has performed over the last 10 years (The dataset is from 2010 to 2019). This is a web app based on Python Flask framework and this is a new challenge for me because I have only coded in Python but never in web environment. I coded the app and hosted in on pythonanywhere, definitely check them out if you are a Python guy. Brief explanation of the user interface Let me have a basic introduction to the user interface. There is 14 inputs for you, the maximum number of shares field however must be filled, the other fields are fill solely based on your stock pick criteria. Usage demonstrationFor demonstration purpose, the strategy I am using are buy when (Maximum number of stocks to buy is 10, PE is below 10, ROE is above 15 and DY above 3). If a stock fulfills the criteria it will get chosen to backtest the performance. I am using monthly frequency here (which mean the frequency you change your position to buy new stocks as the criteria might change over time for a stock) but there are plenty of choices for frequency for you to experiment as well. Let’s see how the performance goes. We gt a compounded annual growth rate (Cagr) of 36%. That is not bad at all! It is also shown that the strategy outperforms the KLSE index (the red line) as well. The program assumes that you start with capital of RM1,000. Here’s some explanation of the output. The green line is the capital growth of your stock picking strategy. The red line corresponds to performance of KLSE index. We take the performance of KLSE index as benchmark so we know have we got a better return than simply buying KLSE ETF and hold. The maximum return the strategy achieved is 48.3%, with worst return of -13.81%. On average, each trade generates 2.59% of return. The compounded annual growth rate of the strategy is 36%. The strategy also outperforms KLSE index greatly, with RM1,000 invested, you will get RM16,000 in return whereas KLSE only provide RM1,131 in return. This table is the stocks that fulfilled the stock picking criteria you defined. It gives you a rough idea what stocks will be picked based on your strategy. Why is there only 3 stocks bought in some months? It is because during the month no other stocks fulfill the stock picking criteria so only a little stocks are bought. (**Can you notice that this strategy captures super long bullish stock like Vitrox?) AfterthoughtsLet’s have a little experiment before we call it a day. How about high PE stocks vs low PE stocks? The criteria is as follow: Number of Stocks to buy : 10 Minimum ROE: 10Let’s see with the same ROE, how will PE change the profitability of a stock picking strategy?Here’s the result High PE strategy Low PE strategy The results are pretty clear that low PE DO outperform high PE stocks over time. But this is a very generalized idea, as we can see that overpriced stocks CAN get more expensive also (Like how glove counters’ PE went from 60 to 100). Howard Marks has a saying “An overpriced stock doesn’t mean that it will drop tomorrow”. But generally speaking, low PE stock does offer a better return. LimitationsThere are limitations to this web app as well. I’ll list several of them. First, there is no technical analysis picking criteria (maybe in future? If you guys loved it I will develop this feature) Second, there is no transaction fees calculated (which might eat away a huge chunk of your profit if your capital is small) Well this marks the end of this post. Do let me know if you have any feedback whether it’s good or bad. Comment below so I know what you think (I do read the comments).","link":"/Introduction-to-klsequant/"},{"title":"Magic formula of rule of 72. Why is it 72?","text":"How did mathematicians come up with the Rule of 72?? Why not 71 or 73? Rule of 72The rule of 72 is a simple formula to estimate the time that you need to double your investment based on your return. For example, how long you need to double your investment given 20% return? time = 72/x time = 72/20 time = 3.6 yearsHow to proof? 1 x 1.2 x 1.2 x 1.2 x 1.2 = 2.07Close enough right? Ever wondered where did the 72 come from? Here’s the proof.Given the formula for future value is FV = PV x (1+x)^t FV = Future Value PV = Present Value r = return t = timeIf we want to double our investment, our PV must be multiplied by 2, we end up with 2PV = PV (1+r)^t 2 = (1+r)^tLet’s add natural logarithm to both sides ln(2) = t ln(1+r) t = ln(2) / ln(1+r)According to taylor series expansion, $ln(1+r) = x - \\frac{x^2}{2} + \\frac{x^3}{3} - \\frac{x^4}{4} …..$ However, if r is very small, we can safely assume that $\\ ln(1+r) \\approx r$Thus making t = ln(2)/r t = 0.693/rMake it easier, we make it $\\times100$ t = 69.3/rBut hey! It is not 72 right?! Yeah, yeah, let me explain. 69 is only easily divisible by 1,3,23,69.To make this formula more convenient people decide to use 72 instead. Note that 72 is divisible by 1,2,3,4,6,8,12,18,24,36,72. To conclude, the rule of 72 is very good to estimate how long your investment can double. You might wonder, how far off is the value of using this formula? Well, I have made a graph below, the higher the return is, the bigger the error But this just serves as an estimation so it is good enough for most scenario. Good enough right? You tell me","link":"/Rule-of-72/"},{"title":"RM300 a month for 10 years?","text":"What the heck is dollar cost averaging strategy and does it work? IntroductionDollar cost averaging is a systematic strategy that allows you to buy more when price is cheap, buy less when price is high. This is a popular strategy among stock investors as well as mutual fund investors. In the long run your average buying price will be very favourable because you bought more when price is cheap. MethodologyI have gathered 10 years worth of stock market data, SP500, SGX, Shanghai Index and KLSE. I simulated dollar cost averaging by buying into the stock index every month with RM300. People always said dollar cost averaging is a good strategy, is it so? Let’s look at the results. ResultsThe results… are mixed. If you bought SP500 10 years ago, you would have gained 70% on your investment. However, if you bought KLSE or SGX, you end up losing money, 20% of it. Is all this effort worth it? Key Takeaways the risk/reward ratio is still great. You get 70% upside and -20% downside, when risking the 20% you can potentially get 70%. Diversification is great for layman. I mean, if you don’t have the skills and knowledge needed to put your bets, diversification is a way to go. Stocks are still great for long term investment, this doesn’t count in where you buy more during dips, the results will certainly be better. How can I buy the index? Through ETFs and mutual funds. ETFs are great, they have low costs, tracks the index well, however, ETFs in Malaysia are still premature, volumes are low, spreads are high (inefficient market makers). The other option is mutual fund. Most of them costs some charges, but their nature of open-ended funds, you can buy them using their NAV price, don’t have to worry about spreads and volume. They still serve as a good option for diversification. If you want to learn more please PM on Facebook Messenger or Email to klsequant@gmail.com for more info","link":"/RM300-a-year-for-10-years/"},{"title":"How I found the most profitable month in Bursa using Python.","text":"Let’s talk about the mysterious “Window Dressing” The mysterious “Window Dressing”I know This is a crazy idea, why would there be difference in returns among months?But stay with me, after around 5 years in the market, I have heard a lot of news and rumours,about which season/month is more bullish. One of the example is the infamous phenomena we called “Window dressing”,where fund managers would buy in to inflate the price of the assets,so that the funds under their management look good at the start of the year. Is this true?Well, as an engineer, I will not settle at news and rumours,Let’s find out Reading dataFirst we are going to need monthly historical data of KLSE index. I already have one, I got it from Yahoo Finance for free 12345import pandas as pdKLSE_data = pd.read_csv(&apos;MKLSE.csv&apos;,parse_dates=[&apos;Datetime&apos;])KLSE_data.head(5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Datetime Open High Low Close Adj Close Volume 0 2010-10-31 1468.45 1505.66 1462.27 1505.66 1,505.66 123,952,000,118,754,000,000,000,000,000,000,00... 1 2010-11-30 1510.69 1531.99 1474.02 1485.23 1,485.23 89,809,800,125,250,500,000,000,000,000,000,000... 2 2010-12-31 1482.69 1529.95 1477.57 1518.91 1,518.91 153,042,000,150,431,000,000,000,000,000,000,00... 3 2011-01-31 1524.53 1576.95 1505.36 1519.94 1,519.94 142,815,000,204,667,000,000,000,000,000,000,00... 4 2011-02-28 1524.74 1544.35 1474.38 1491.25 1,491.25 122,139,600,155,642,000,000,000,000,000,000,00... The data is just simple dataset with open, low, high, close and volume. Monthly FluctuationsLet’s look at the fluctuations first, first we have to calculate the fluctuations or change every month 12KLSE_data[&apos;Change&apos;] = (KLSE_data[&apos;Close&apos;] - KLSE_data[&apos;Open&apos;])/KLSE_data[&apos;Open&apos;]KLSE_data.plot.line(x = &apos;Datetime&apos;, y = &apos;Change&apos;) &lt;AxesSubplot:xlabel=&apos;Datetime&apos;&gt; The fluctuations are just around 0,that doesn’t look very interesting, let’s try analyzing this dataset another way Monthly Average ReturnsLet’s get the average change of every month and have a look 12345678910111213141516# We need calendar module to parse into months in wordsimport calendarKLSE_data[&apos;month&apos;] = KLSE_data[&apos;Datetime&apos;].dt.monthtemp_data = KLSE_data.groupby([&apos;month&apos;])month = pd.DataFrame(columns = [&apos;Month&apos;,&apos;Change&apos;])for index,m in temp_data: temp_month = m[&apos;month&apos;].iloc[0] mm = calendar.month_abbr[temp_month] temp_change = m[&apos;Change&apos;].mean() month = month.append({&apos;Month&apos;: temp_month, &apos;Change&apos;: temp_change}, ignore_index=True)month.plot(x = &apos;Month&apos;, y = &apos;Change&apos;, kind = &apos;bar&apos;) &lt;AxesSubplot:xlabel=&apos;Month&apos;&gt; If we look at the average returns for every month,December look significantly higher than the rest A More Careful Look at Monthly ReturnsJust to be careful, bar chart doesn’t tell you the whole story,the data might be skewed, a boxplot will be a better way to interpret this data(What is a Boxplot?)? 12345import matplotlib.pyplot as pltKLSE_data.boxplot(column = [&apos;Change&apos;], by = &apos;month&apos;, showfliers = True, grid = False)plt.axhline(y = 0, color = &apos;green&apos;, linestyle = &apos;dotted&apos;) &lt;matplotlib.lines.Line2D at 0x282ddbccdc0&gt; Now we can look at this dataset at a bigger picture,December is indeed a profitable month, with a few outliers.. Other than December, there are other promising months too..March, June, October, December Can We Trade on This?This got me thinking, what if I long KLSE every historically profitable months?Let’s set up a trading strategy, long KLSE every july, october and december (top 3 most profitable months according to our analysis) 1234567891011121314KLSE_data[&apos;signal&apos;] = KLSE_data[&apos;month&apos;].apply(lambda x: 1 if (x==7 or x == 10 or x == 12) else 0)KLSE_data[&apos;return&apos;] = KLSE_data[&apos;Change&apos;]*KLSE_data[&apos;signal&apos;]KLSE_data[&apos;Capital&apos;] = 0InitialCapital = KLSE_data[&apos;Close&apos;].loc[0]for i in range(0,len(KLSE_data)): if i == 0: KLSE_data.loc[i, &apos;Capital&apos;] = InitialCapital else: KLSE_data.loc[i, &apos;Capital&apos;] = ((KLSE_data[&apos;return&apos;].loc[i] + 1.0) * KLSE_data[&apos;Capital&apos;].loc[i - 1])KLSE_data.plot.line(x=&apos;Datetime&apos;,y=[&apos;Capital&apos;,&apos;Close&apos;]) &lt;AxesSubplot:xlabel=&apos;Datetime&apos;&gt; The performance looks great, or is it?? First, what happens in the past don’t guarantee future performance, Second, in statistics terms, this dataset is too small and this is likely the result of overfitting. and this feels like giving teaching people how to get rich by telling them your lottery number TakeawaysFrom past 10 years worth of data,December is indeed a profitable, bullish monthDoes that mean we should buy in every December? I will to leave the answering and decision to you. ‘History doesn’t repeat itself, but it does rhyme’ -Mark Twain This isn’t any trading advice and the studies and analysis done were for educational and sharing purposes only","link":"/Window-Dressing/"},{"title":"Is candlestick pattern effective in Bursa Malaysia?","text":"If you have been investing or trading stocks you must have come across about Japanese Candlestick Pattern.How effective are them? Can we use them reliably in investing or trading? Let’s find out. IntroI assume that you already knew the anatomy of a candlestick so I will skip the explanation part. There are dozens of candlestick pattern out there, be it bullish or bearish ones, what we wanted to know is that can we used them reliably in our investing and trading activities. Methodology - Skip this part if you’re not into techIt is possible to handcode a program to identify every pattern but that will be a lot of workload. Fortunately, there is a python library called TA-Lib, which included the identification of candlestick pattern given price data. In this study, 10 years worth of daily price data (Open, Low, High, Close) was scraped online and saved into a .csv file. I have written a piece of code that will iterate over the price data to find candlestick pattern. Comment below if you wanted a copy of the code and data. Loading the patternsWe need pandas module for data processing, and talib for it’s fast and ready-made candle recognition capability.After that, we need to make a list of every pattern that we wanted to backtest. pandas as pd123456789101112131415161718import talibimport ospd.set_option(&apos;expand_frame_repr&apos;, False)pattern_name = [&apos;CDL2CROWS&apos;,&apos;CDL3BLACKCROWS&apos;,&apos;CDL3INSIDE&apos;,&apos;CDL3LINESTRIKE&apos;,&apos;CDL3OUTSIDE&apos;, &apos;CDL3STARSINSOUTH&apos;,&apos;CDL3WHITESOLDIERS&apos;,&apos;CDLABANDONEDBABY&apos;,&apos;CDLADVANCEBLOCK&apos;, &apos;CDLBELTHOLD&apos;,&apos;CDLBREAKAWAY&apos;,&apos;CDLCLOSINGMARUBOZU&apos;,&apos;CDLCONCEALBABYSWALL&apos;, &apos;CDLCOUNTERATTACK&apos;,&apos;CDLDARKCLOUDCOVER&apos;,&apos;CDLDOJI&apos;,&apos;CDLDOJISTAR&apos;, &apos;CDLDRAGONFLYDOJI&apos;,&apos;CDLENGULFING&apos;,&apos;CDLEVENINGDOJISTAR&apos;,&apos;CDLEVENINGSTAR&apos;, &apos;CDLGAPSIDESIDEWHITE&apos;,&apos;CDLGRAVESTONEDOJI&apos;,&apos;CDLHAMMER&apos;,&apos;CDLHANGINGMAN&apos;, &apos;CDLHARAMI&apos;,&apos;CDLHARAMICROSS&apos;,&apos;CDLHIGHWAVE&apos;,&apos;CDLHIKKAKE&apos;,&apos;CDLHIKKAKEMOD&apos;, &apos;CDLHOMINGPIGEON&apos;,&apos;CDLIDENTICAL3CROWS&apos;,&apos;CDLINNECK&apos;,&apos;CDLINVERTEDHAMMER&apos;,&apos;CDLKICKING&apos;, &apos;CDLKICKING&apos;,&apos;CDLKICKINGBYLENGTH&apos;,&apos;CDLLADDERBOTTOM&apos;,&apos;CDLLONGLEGGEDDOJI&apos;, &apos;CDLLONGLINE&apos;,&apos;CDLMARUBOZU&apos;,&apos;CDLMATCHINGLOW&apos;,&apos;CDLMATHOLD&apos;,&apos;CDLMORNINGDOJISTAR&apos;, &apos;CDLMORNINGSTAR&apos;,&apos;CDLONNECK&apos;,&apos;CDLPIERCING&apos;,&apos;CDLRICKSHAWMAN&apos;,&apos;CDLRISEFALL3METHODS&apos; &apos;CDLSEPARATINGLINES&apos;,&apos;CDLSHOOTINGSTAR&apos;,&apos;CDLSHORTLINE&apos;,&apos;CDLSPINNINGTOP&apos;, &apos;CDLSTALLEDPATTERN&apos;,&apos;CDLSTICKSANDWICH&apos;,&apos;CDLTAKURI&apos;,&apos;CDLTASUKIGAP&apos;,&apos;CDLTHRUSTING&apos;, &apos;CDLTRISTAR&apos;,&apos;CDLUNIQUE3RIVER&apos;,&apos;CDLUPSIDEGAP2CROWS&apos;,&apos;CDLXSIDEGAP3METHODS&apos;] Reading stock market dataCandlestick analysis are mostly used by short term traders, so the days I wanted to backtest are in short term as well.12345678910days = [1,5,10,30]path = os.getcwd()print(&apos;current working directory:&apos;,path)stock_code_list = []for root, dirs, files in os.walk(path): if files: for f in files: if &apos;.csv&apos; in f: stock_code_list.append(f.split(&apos;.csv&apos;)[0]) Let’s analyse!Let the code does its job… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657output = pd.DataFrame()final_output = pd.DataFrame(columns=[&apos;Pattern&apos;, &apos;Win Rate (1 Day)&apos;, &apos;Win Rate (5 Days)&apos;,&apos;Win Rate (10 Days)&apos;, &apos;Win Rate (30 Days)&apos;])for pattern in pattern_name: for code in stock_code_list: df = pd.read_csv(code + &apos;.csv&apos;, parse_dates=[1]) for i in days: df[&apos;Gains after &apos; + str(i) + &apos; days&apos;] = df[&apos;Close&apos;].shift(-i)/df[&apos;Close&apos;] - 1 df[pattern] = getattr(talib, pattern)(df[&apos;Open&apos;].astype(float).values, df[&apos;High&apos;].astype(float).values, df[&apos;Low&apos;].astype(float).values,df[&apos;Close&apos;].astype(float).values) pattern_df = df[df[pattern] != 0] output = output.append(pattern_df) try: bullish_output = output[output[pattern]&gt;0] OneDayWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 1 days&apos;] &gt; 0]) /\\ len(bullish_output[&apos;Gains after 1 days&apos;]) FiveDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 5 days&apos;] &gt; 0]) /\\ len(bullish_output[&apos;Gains after 5 days&apos;]) TenDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 10 days&apos;] &gt; 0]) /\\ len(bullish_output[&apos;Gains after 10 days&apos;]) ThirtyDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 30 days&apos;] &gt; 0]) /\\ len(bullish_output[&apos;Gains after 30 days&apos;]) final_output = final_output.append({&apos;Pattern&apos;: &apos;Bullish &apos; + pattern, &apos;Win Rate (1 Day)&apos;: OneDayWinRate, &apos;Win Rate (5 Days)&apos;: FiveDaysWinRate, &apos;Win Rate (10 Days)&apos;: TenDaysWinRate, &apos;Win Rate (30 Days)&apos;: ThirtyDaysWinRate}, ignore_index=True) except Exception as e: print(&quot;No bullish pattern&quot;) try: bearish_output = output[output[pattern] &lt; 0] OneDayWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 1 days&apos;] &gt; 0]) / \\ len(bearish_output[&apos;Gains after 1 days&apos;]) FiveDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 5 days&apos;] &gt; 0]) / \\ len(bearish_output[&apos;Gains after 5 days&apos;]) TenDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 10 days&apos;] &gt; 0]) / \\ len(bearish_output[&apos;Gains after 10 days&apos;]) ThirtyDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 30 days&apos;] &gt; 0]) / \\ len(bearish_output[&apos;Gains after 30 days&apos;]) final_output = final_output.append({&apos;Pattern&apos;: &apos;Bearish &apos; + pattern, &apos;Win Rate (1 Day)&apos;: OneDayWinRate, &apos;Win Rate (5 Days)&apos;: FiveDaysWinRate, &apos;Win Rate (10 Days)&apos;: TenDaysWinRate, &apos;Win Rate (30 Days)&apos;: ThirtyDaysWinRate}, ignore_index=True) except Exception as e: print(&quot;No bearish pattern&quot;) print(&apos;Done analysis on &apos; + pattern)print(final_output)final_output.to_csv(&apos;candlestick_analysis.csv&apos;,index=False) ResultsThe performance of each candlestick is measured by how likely it will go up in (1,5,10,30) days. A win rate of 0.7 means that in 7 out of 10 times the price will go up after the pattern appeared. Here’s the entire backtesting results! Very surprisingly some bullish pattern has very low win rate, my thinking is that when a pattern is too widely known and used, the edge of the pattern diminishes as everyone knows the information making it useless. Besides, the findings also showed very little pattern with winrate more than 50% (I thought I will found my golden formula here :disappointed: ). However there is some relatively high winrate patterns with winrate over 0.45. Perhaps with enough risk management techniques you might be able to construct a consistently profitable strategy. Some AfterthoughtsOf course there are something this study misses, for example, some candlestick pattern are only effective while they are on top of the trend etc. Nevertheless this brings me a general view of the effectiveness of candlestick pattern. I am wondering combined with other technical indicators will the winrate be higher? Also, the low winrate doesn’t mean that it is worthless. A 20% winrate indicats there it is 80% likely that the price will drop tomorrow. How about using this as a indicator for shorting of stocks? Well, I leave this to you guys to figure out. Let me know what you think in the comments. This study is purely for discovery and fun. Please be responsible of your own money and trade at your own risk.","link":"/first-md/"},{"title":"A Monte Carlo Simulation of your Retirement Planning 💵💵","text":"Monte Carlo Simulation of your Retirement Planning IntuitionThere are countless people who planned their retirement by saving a monthly sum and investing it into the stock market . There are also plenty of investment gurus advocating this investment strategy that is known as “Passive Investment”, which means you do not try to time the market, but rather you invest periodically no matter the current level of market. I prepare my future nest egg 讀讀 this way too, as an engineer who won’t be convinced without seeing the data, I am going to do some research on the practicality of this approach by using Monte Carlo Simulation. Historical Returns of Dow Jones IndexI chose Dow Jones Index as many people (including me), invests in the  US market, where Dow Jones Index is the primary index of the US Market. Here is some analysis on the historical returns on Dow Jones Index. Reading Data using Pandas module I am using data from 2021 to 1915. 12345678import pandas as pdimport numpy as npfrom scipy.stats import normimport matplotlib.pyplot as pltplt.style.use(&apos;seaborn&apos;)DJI = pd.read_csv(&apos;DJI.csv&apos;)DJI.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Open High Low Close Adj. Close Return 0 2021 30,909.43 30,223.89 31,188.38 30,223.89 31,176.01 0.02 1 2020 26,890.67 28,868.80 30,606.48 18,591.93 30,606.48 0.07 2 2019 26,379.55 23,346.24 28,645.26 22,686.22 28,538.44 0.22 3 2018 25,046.86 24,824.01 26,828.39 21,792.20 23,327.46 -0.06 4 2017 21,750.20 19,881.76 24,837.51 19,732.40 24,719.22 0.25 Some Intuition into the Stats 燐For a normal distribution, 95% of all occurence happens within 2 standard deviations away from the mean. Although we are not dealing with perfect normal distribution, but the distribution gives roughly the same pattern. Note that this does not include the possibility of a Black Swan (super rare, unexpected, high consequence events). 1234567mean = DJI[&apos;Return&apos;].mean()std = DJI[&apos;Return&apos;].std()lowerbound = mean - 2*stdupperbound = mean + 2*stdprint(&quot;Mean return : {:.2f}&quot;.format(mean))print(&quot;Standard Deviation : {:.2f}&quot;.format(std)) Mean return : 0.08 Standard Deviation : 0.21Distribution of Dow Jones Index Yearly ReturnsWe get the mean and standard deviation on the returns. But we can visualize it better on a histogram. The distribution of yearly historical returns of Dow Jones Index are similar to a normal distribution, with peak at middle and tails at both side. The mean return and standard deviation are calculated.Note how I plotted 2 straight lines of 2 standard deviations away from mean. Using the below plot we can say that 95% of all returns of Dow Jones are between -33% and +49%. 1234567891011121314151617181920212223fig, ax1 = plt.subplots()ax2 = ax1.twinx()plt.axvline(x = upperbound, color=&apos;g&apos;, linestyle=&apos;-&apos;, alpha=0.5, label = &apos;mean&apos;)plt.axvline(x = lowerbound, color=&apos;g&apos;, linestyle=&apos;-&apos;, alpha=0.5, label = &apos;mean&apos;)#---------Histogram------------------------------------------------------------------------------------title = str(&apos;95% of Returns are in {:.2f}&apos;.format(1 + lowerbound) + &apos; and {:.2f}&apos;.format(1 + upperbound))DJI[&apos;Return&apos;].hist(bins=15, ax = ax1)ax1.set_ylabel(&apos;Probability&apos;)#---------Fitting the histogram with curve-------------------------------------------------------------mu, std = norm.fit(DJI[&apos;Return&apos;])xmin, xmax = plt.xlim()x = np.linspace(xmin, xmax, 100)p = norm.pdf(x, mu, std)ax2.plot(x, p, &apos;b&apos;, linewidth=2, alpha = 0.5)ax2.grid(False)ax2.set_ylabel(&apos;Distribution&apos;, color=&apos;b&apos;)#--------Show the plotplt.title(title)plt.show() Can YOU invest your way to a Millionaire? Let’s assume an individual who invests RM5000 as initial investment and for every month he invests RM400 more into his portfolio. Using this plan he will end up with RM168,200 12345678910111213141516#-----Constants-----------------------INITIAL_INVESTMENT = 5000MONTHLY_TOPUP = 400YEARLY = MONTHLY_TOPUP * 12# ------------------------------------saving = [INITIAL_INVESTMENT]for i in range(1, 35): saving.append((saving[i - 1]) + YEARLY)capital = pd.DataFrame(saving, columns=[&apos;Saving&apos;])#------Plotting the savings growth------capital.plot(y=&apos;Saving&apos;, color=&apos;limegreen&apos;, alpha = 1)print(&apos;Final value : {:.2f}&apos;.format(capital[&apos;Saving&apos;].iloc[ -1])) Final value : 168200.00 Monte Carlo SimulationRM168,200 might be little after 30 plus years, how about investing along the way? Stock market returns are uncertain, but prior analysis shown that we can expect 95% of the return to be between -33% and +49%. I am going to use Monte Carlo simulation to simulate 50 different scenarios,where the returns are generated randomly within -33% and +49%. It’s like Dr. Strange seeing 50 possibilites of the saving journey. At the end, I will get the median of all the scenarios and use it as reference. Why median? You might ask. Mean is too sensitive to overly big values, so I used median to get a realistic view. 12345678910111213141516171819202122232425262728from random import randrange#-----Using upperbound and lowerbound of historical returns-------RAND_TOP = 149RAND_BOT = 68YEAR = 34#------Generate 50 simulations------------------------------------for k in range(1, 50): capital[str(&apos;Capital&apos; + str(k))] = capital[&apos;Saving&apos;] for i in range(1, len(capital)): capital.loc[i, str(&apos;Capital&apos; + str(k))] = (capital.loc[i - 1, str(&apos;Capital&apos; + str(k))] + YEARLY) * float( randrange(RAND_BOT, RAND_TOP) / 100)capital[&apos;Mean&apos;] = capital.median(axis=1)fig = plt.figure(figsize=(12, 6))fig.suptitle((&apos;Average Return after &apos; + str(YEAR) + &apos; Years is %.2f&apos; % capital[&apos;Mean&apos;][capital.index[YEAR]]))ax = fig.add_subplot(121)ax2 = fig.add_subplot(122)capital.plot(legend=None,alpha=0.3, title = &apos;Monte Carlo Simulations&apos;, xlabel = &apos;Years&apos;, ylabel = &apos;RM&apos;, ax = ax)capital.iloc[-1].hist(bins=20, orientation=&quot;horizontal&quot;, color=&quot;pink&quot;, alpha=0.5,ax = ax)capital.plot(y=&apos;Saving&apos;, color = &apos;tomato&apos;, alpha = 1, label=&quot;Savings&quot;, xlabel = &apos;Years&apos;, ylabel = &apos;RM&apos;, title = &apos;Median of simulations&apos;, ax = ax2)capital.plot(y=&apos;Mean&apos;, color=&apos;limegreen&apos;, alpha = 1, ax = ax2)plt.show() Key Takeaways ⚡⚡Every time you run this notebook the outcome will be different (It’s a simulation!) Maybe 2 in 50 lifetimes you will be fortunate enough to have a superbull market that can make you a millionaire using this plan. But I observed that the final value converges toward RM500,000. If you wanted to be a millionaire by the time you retire, you might need to save more. (Or get more luck)","link":"/montecarlosimulation/"},{"title":"We are now on Android","text":"We are now on Google Play! What is this?For almost a year, klsequant stock backtester only remained as a web application. Running analysis on HUGE financial data is so much easier on python, and we do not want to burden users by making a HUGE app (Storing all those data). klsequant.com is my personal hobby project, intended to help people to make informed decision when trying to invest in stocks. We all heard low PE, high ROE stocks are good, but how do we verify it? klsequant was made to do this for you! Technical detailsThis app is made using Android Studio, and an API using flask so all the calculations are done on the cloud, hosted on www.pythonanywhere.com (highly recommend them!) How do I use this?If you are new here, don’t worry, we have a blog post on how to use this app. The Android version and web app version are the same. Just hosted on different platform. Where can you download You can get it on Google Play","link":"/we-are-now-on-android/"},{"title":"Portfolio Construction. Full Equity, Full Bond or 50/50?","text":"How do you achieve capital growth while controlling your risk? IntroductionPeople often equates return and risk, giving statements like “high risk high return”. If high risk does secure you high return, is the investment considered high risk anymore? I find Howard Marks return vs risk graph a nice way to visualize risk. According to him, the higher the risk, the more variability your return becomes. Different asset classes have their inherent risk. Equity asset often relates to people as higher risk, because sometimes it delivers higher return and sometimes lower return compared to other asset classes, with ranges in (-20 to 50% We are talking about overall equity market here).A lot of factors can play with an equity’s risk, market condition, company earnings, new competitor and etc. Bond asset is often considered as low risk asset, because of the return of the asset is fixed (sometimes also called fixed income asset), it has lesser variability in their returns (3 to 8%).Bond on the other hand, the main risk is the company going bankrupt, defaulting on the bond you are holding. John Bogle’s strategyJohn Bogle the founder of The Vanguard Group, an american fund management giant. His investment strategy is to allocate equity/bond with ratio of 50/50. Every year, you will need to rebalance your portfolio. For example Stock Bond 5500 5100 you will need to take 400 from equity asset to bond asset, make the ratio 50/50 again. The rationale behind this is to “balance” the portfolio, a higher equity price might mean overvalued equity, hence reducing your position on overvalued asset.Vice versa, when the equity price is low, you shift money from bond to equity, to buy more of the undervalued asset. How about Modern Portfolio Theory?The Nobel prize winner Markowitz doesn’t even use the strategy himself, “I visualized my grief if the stock market went way up and I wasn’t in it — or if it went way down and I was completely in it. So I split my contributions 50/50 between stocks and bonds.” So it seems like Markowitz himself is using a 50/50 portfolio instead of the Modern Portfolio Theory that won him a Nobel Prize. https://www.mymoneyblog.com/harry-markowitz-personal-investment-portfolio.html MethodologyThe data I am using are funds from a local unit trust giant company P. The equity funds I used are Global Equity Fund, East-Asia Equity Fund, Malaysia Index Fund. They well represent the whole equity market as a whole.The bond fund I used are Enhanced Bond Fund. The data used are from 2006 to 2020, to visualize the long term returns. I am using Python for the calculation (because it is vastly easier than MS Excel), if you are interested please drop me an email. Loading the datasetWe need pandas for data processing, seaborn and matplotlib are for data visualization purpose. —title: Portfolio Construction. Full Equity, Full Bond or 50/50?date: 2020-11-16 17:42:23tags: [Python,Strategy] How do you achieve capital growth while controlling your risk? IntroductionPeople often equates return and risk, giving statements like “high risk high return”. If high risk does secure you high return, is the investment considered high risk anymore? I find Howard Marks return vs risk graph a nice way to visualize risk. According to him, the higher the risk, the more variability your return becomes. Different asset classes have their inherent risk. Equity asset often relates to people as higher risk, because sometimes it delivers higher return and sometimes lower return compared to other asset classes, with ranges in (-20 to 50% We are talking about overall equity market here).A lot of factors can play with an equity’s risk, market condition, company earnings, new competitor and etc. Bond asset is often considered as low risk asset, because of the return of the asset is fixed (sometimes also called fixed income asset), it has lesser variability in their returns (3 to 8%).Bond on the other hand, the main risk is the company going bankrupt, defaulting on the bond you are holding. John Bogle’s strategyJohn Bogle the founder of The Vanguard Group, an american fund management giant. His investment strategy is to allocate equity/bond with ratio of 50/50. Every year, you will need to rebalance your portfolio. For example Stock Bond 5500 5100 you will need to take 400 from equity asset to bond asset, make the ratio 50/50 again. The rationale behind this is to “balance” the portfolio, a higher equity price might mean overvalued equity, hence reducing your position on overvalued asset.Vice versa, when the equity price is low, you shift money from bond to equity, to buy more of the undervalued asset. How about Modern Portfolio Theory?The Nobel prize winner Markowitz doesn’t even use the strategy himself, “I visualized my grief if the stock market went way up and I wasn’t in it — or if it went way down and I was completely in it. So I split my contributions 50/50 between stocks and bonds.” So it seems like Markowitz himself is using a 50/50 portfolio instead of the Modern Portfolio Theory that won him a Nobel Prize. https://www.mymoneyblog.com/harry-markowitz-personal-investment-portfolio.html MethodologyThe data I am using are funds from a local unit trust giant company P. The equity funds I used are Global Equity Fund, East-Asia Equity Fund, Malaysia Index Fund. They well represent the whole equity market as a whole.The bond fund I used are Enhanced Bond Fund. The data used are from 2006 to 2020, to visualize the long term returns. I am using Python for the calculation (because it is vastly easier than MS Excel), if you are interested please drop me an email. Loading the datasetWe need pandas for data processing, seaborn and matplotlib are for data visualization purpose.12345678910import pandas as pdimport seaborn as snsimport matplotlib.pyplot as plt#read portfolio dataReturn = pd.DataFrame()p = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])Return[&apos;Date&apos;] = p[&apos;Date&apos;]Return[&apos;Date&apos;] = pd.DatetimeIndex(Return[&apos;Date&apos;]).year.astype(float)print(p.head) AnalysisSome calculation logic12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849def CalculateReturn(Equity,Bond,Investment): # Equity PGSF = 0.15 PIX = 0.15 PFES = 0.7 # Bond PBOND = 1.0 portfolio = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;]) EquityInvestment = Equity*Investment BondInvestment = Bond*Investment portfolio[&apos;PGSF Value&apos;] = &quot;&quot; portfolio[&apos;PIX Value&apos;] = &quot;&quot; portfolio[&apos;PFES Value&apos;] = &quot;&quot; portfolio[&apos;PBOND Value&apos;] = &quot;&quot; portfolio[&apos;Rebalanced E&apos;] = &quot;&quot; portfolio[&apos;Rebalanced B&apos;] = &quot;&quot; #first year value portfolio[&apos;PGSF Value&apos;][0] = EquityInvestment * PGSF * portfolio[&apos;PGSF&apos;][0] portfolio[&apos;PIX Value&apos;][0] = EquityInvestment * PIX * portfolio[&apos;PIX&apos;][0] portfolio[&apos;PFES Value&apos;][0] = EquityInvestment * PFES * portfolio[&apos;PFES&apos;][0] portfolio[&apos;PBOND Value&apos;][0] = BondInvestment * PBOND * portfolio[&apos;PBOND&apos;][0] portfolio[&apos;Rebalanced E&apos;][0] = portfolio[&apos;PGSF Value&apos;][0] + portfolio[&apos;PIX Value&apos;][0] + portfolio[&apos;PFES Value&apos;][0] portfolio[&apos;Rebalanced B&apos;][0] = portfolio[&apos;PBOND Value&apos;][0] for i in range(1,15): portfolio[&apos;PGSF Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PGSF * portfolio[&apos;PGSF&apos;][i] portfolio[&apos;PIX Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PIX * portfolio[&apos;PIX&apos;][i] portfolio[&apos;PFES Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PFES * portfolio[&apos;PFES&apos;][i] portfolio[&apos;PBOND Value&apos;][i] = portfolio[&apos;Rebalanced B&apos;][i-1] * PBOND * portfolio[&apos;PBOND&apos;][i] totalVal = portfolio[&apos;PGSF Value&apos;][i] + portfolio[&apos;PIX Value&apos;][i] + portfolio[&apos;PFES Value&apos;][i] + portfolio[&apos;PBOND Value&apos;][i] portfolio[&apos;Rebalanced E&apos;][i] = totalVal * Equity portfolio[&apos;Rebalanced B&apos;][i] = totalVal * Bond portfolio[&apos;Total&apos;] = portfolio[&apos;Rebalanced B&apos;] + portfolio[&apos;Rebalanced E&apos;] return portfolio[&apos;Total&apos;]Return[&apos;Equity&apos;] = CalculateReturn(1,0,20000).astype(float)Return[&apos;Bond&apos;] = CalculateReturn(0,1,20000).astype(float)Return[&apos;50/50 Equity/Bond&apos;] = CalculateReturn(0.5,0.5,20000).astype(float)print(Return) OutputVisualize the output12345678910sns.set_style(&quot;darkgrid&quot;)p = sns.color_palette(&quot;hls&quot;, 8)ax = sns.lineplot(data=Return,y=&apos;Equity&apos;,x=&apos;Date&apos;,label=&quot;Full Equity&quot;, color=&apos;skyblue&apos;, marker=&apos;^&apos;,markeredgecolor=&quot;black&quot;,linewidth=5)ax = sns.lineplot(data=Return,y=&apos;Bond&apos;,x=&apos;Date&apos;,label=&quot;Full Bond&quot;,color=&apos;lightcoral&apos;,marker=&quot;x&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)ax = sns.lineplot(data=Return,y=&apos;50/50 Equity/Bond&apos;,x=&apos;Date&apos;,color=&apos;palegreen&apos;,label=&quot;50/50 Equity/Bond&quot;,marker=&quot;o&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)ax.set(xlabel=&quot;Date&quot;,ylabel=&quot;RM10k Invested&quot;)plt.legend()plt.show() Results Full Equity Full Bond 50/50 Equity Return 270% 105% 244% Asset Value in 2020 27142 18664 24482 Lowest point 9971 10532 11191 Some might point out that volatility isn’t a bad thing, but I think we can agree that volatility is not for the fainted heart. No all of us can sleep well when our portfolio is down 20%, with a nice spiced combo, we can sleep well while not sacrificing a big chunk of your return. What if you added more every year?What if we added RM1000 every year (A rather small amount)?As expected, the portfolio will grow a lot faster. Key Takeaways Nice risk/reward ratio. Reduced volatility while preserving returns. Diversification don’t necessary take away a lot of your return. The 50/50 combo is only a 10% (RM2600 difference) worse than full equity combo, with lesser volatility. We cannot rebalance our portfolio too often because it might incur charges. The data I used above is from a local unit trust giant company P. If you want to learn more please PM on Facebook Messenger or Email to klsequant@gmail.com for more info 12345678910import pandas as pdimport seaborn as snsimport matplotlib.pyplot as plt#read portfolio dataReturn = pd.DataFrame()p = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])Return[&apos;Date&apos;] = p[&apos;Date&apos;]Return[&apos;Date&apos;] = pd.DatetimeIndex(Return[&apos;Date&apos;]).year.astype(float)print(p.head) AnalysisSome calculation logic12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849def CalculateReturn(Equity,Bond,Investment): # Equity PGSF = 0.15 PIX = 0.15 PFES = 0.7 # Bond PBOND = 1.0 portfolio = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;]) EquityInvestment = Equity*Investment BondInvestment = Bond*Investment portfolio[&apos;PGSF Value&apos;] = &quot;&quot; portfolio[&apos;PIX Value&apos;] = &quot;&quot; portfolio[&apos;PFES Value&apos;] = &quot;&quot; portfolio[&apos;PBOND Value&apos;] = &quot;&quot; portfolio[&apos;Rebalanced E&apos;] = &quot;&quot; portfolio[&apos;Rebalanced B&apos;] = &quot;&quot; #first year value portfolio[&apos;PGSF Value&apos;][0] = EquityInvestment * PGSF * portfolio[&apos;PGSF&apos;][0] portfolio[&apos;PIX Value&apos;][0] = EquityInvestment * PIX * portfolio[&apos;PIX&apos;][0] portfolio[&apos;PFES Value&apos;][0] = EquityInvestment * PFES * portfolio[&apos;PFES&apos;][0] portfolio[&apos;PBOND Value&apos;][0] = BondInvestment * PBOND * portfolio[&apos;PBOND&apos;][0] portfolio[&apos;Rebalanced E&apos;][0] = portfolio[&apos;PGSF Value&apos;][0] + portfolio[&apos;PIX Value&apos;][0] + portfolio[&apos;PFES Value&apos;][0] portfolio[&apos;Rebalanced B&apos;][0] = portfolio[&apos;PBOND Value&apos;][0] for i in range(1,15): portfolio[&apos;PGSF Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PGSF * portfolio[&apos;PGSF&apos;][i] portfolio[&apos;PIX Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PIX * portfolio[&apos;PIX&apos;][i] portfolio[&apos;PFES Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PFES * portfolio[&apos;PFES&apos;][i] portfolio[&apos;PBOND Value&apos;][i] = portfolio[&apos;Rebalanced B&apos;][i-1] * PBOND * portfolio[&apos;PBOND&apos;][i] totalVal = portfolio[&apos;PGSF Value&apos;][i] + portfolio[&apos;PIX Value&apos;][i] + portfolio[&apos;PFES Value&apos;][i] + portfolio[&apos;PBOND Value&apos;][i] portfolio[&apos;Rebalanced E&apos;][i] = totalVal * Equity portfolio[&apos;Rebalanced B&apos;][i] = totalVal * Bond portfolio[&apos;Total&apos;] = portfolio[&apos;Rebalanced B&apos;] + portfolio[&apos;Rebalanced E&apos;] return portfolio[&apos;Total&apos;]Return[&apos;Equity&apos;] = CalculateReturn(1,0,20000).astype(float)Return[&apos;Bond&apos;] = CalculateReturn(0,1,20000).astype(float)Return[&apos;50/50 Equity/Bond&apos;] = CalculateReturn(0.5,0.5,20000).astype(float)print(Return) OutputVisualize the output12345678910sns.set_style(&quot;darkgrid&quot;)p = sns.color_palette(&quot;hls&quot;, 8)ax = sns.lineplot(data=Return,y=&apos;Equity&apos;,x=&apos;Date&apos;,label=&quot;Full Equity&quot;, color=&apos;skyblue&apos;, marker=&apos;^&apos;,markeredgecolor=&quot;black&quot;,linewidth=5)ax = sns.lineplot(data=Return,y=&apos;Bond&apos;,x=&apos;Date&apos;,label=&quot;Full Bond&quot;,color=&apos;lightcoral&apos;,marker=&quot;x&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)ax = sns.lineplot(data=Return,y=&apos;50/50 Equity/Bond&apos;,x=&apos;Date&apos;,color=&apos;palegreen&apos;,label=&quot;50/50 Equity/Bond&quot;,marker=&quot;o&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)ax.set(xlabel=&quot;Date&quot;,ylabel=&quot;RM10k Invested&quot;)plt.legend()plt.show() Results Full Equity Full Bond 50/50 Equity Return 270% 105% 244% Asset Value in 2020 27142 18664 24482 Lowest point 9971 10532 11191 Some might point out that volatility isn’t a bad thing, but I think we can agree that volatility is not for the fainted heart. No all of us can sleep well when our portfolio is down 20%, with a nice spiced combo, we can sleep well while not sacrificing a big chunk of your return. What if you added more every year?What if we added RM1000 every year (A rather small amount)?As expected, the portfolio will grow a lot faster. Key Takeaways Nice risk/reward ratio. Reduced volatility while preserving returns. Diversification don’t necessary take away a lot of your return. The 50/50 combo is only a 10% (RM2600 difference) worse than full equity combo, with lesser volatility. We cannot rebalance our portfolio too often because it might incur charges. The data I used above is from a local unit trust giant company P. If you want to learn more please PM on Facebook Messenger or Email to klsequant@gmail.com for more info","link":"/portfolio-construction-using-rebalancing/"}],"tags":[{"name":"Backtesting","slug":"Backtesting","link":"/tags/Backtesting/"},{"name":"Stock Picking","slug":"Stock-Picking","link":"/tags/Stock-Picking/"},{"name":"Maths","slug":"Maths","link":"/tags/Maths/"},{"name":"Strategy","slug":"Strategy","link":"/tags/Strategy/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"Candlestick","slug":"Candlestick","link":"/tags/Candlestick/"},{"name":"Monte Carlo","slug":"Monte-Carlo","link":"/tags/Monte-Carlo/"},{"name":"Investment","slug":"Investment","link":"/tags/Investment/"}],"categories":[]}