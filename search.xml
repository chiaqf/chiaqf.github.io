<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>How Effective is Moving Average Strategy in KLSE?</title>
      <link href="/movingaverage/"/>
      <url>/movingaverage/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>How Effective is Moving Average Strategy in KLSE?</p><a id="more"></a><h3 id="Moving-Average-Strategy"><a href="#Moving-Average-Strategy" class="headerlink" title="Moving Average Strategy"></a>Moving Average Strategy</h3><p>Moving average strategy is a common strategy used by traders</p><p>Unlike some of the more exotic indicators,<br><br>moving average readily available in many charting software or website such as klsescreener or tradingview</p><p>One common usage of moving average is that,<br></p><p>when the &#x201C;fast&#x201D; moving average goes above the &#x201C;slow&#x201D; moving average,<br><br>we buy in,<br><br>when the &#x201C;fast&#x201D; moving average goes below the &#x201C;fast&#x201D; moving average,<br><br>we sell.</p><p>So in this article I will test the performance of this strategy on KLSE index.<br><br>Though we can&#x2019;t directly buy the KLSE index,<br><br>we can achieve similar by buying futures or warrants that tracks the KLSE index.</p><h3 id="Reading-data"><a href="#Reading-data" class="headerlink" title="Reading data"></a>Reading data</h3><p>I downloaded historical data of KLSE from Yahoo Finance in csv form.<br></p><p>We need to read it into memory to perform backtesting.</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">KLSE = pd.read_csv(<span class="hljs-string">&apos;KLSE.csv&apos;</span>)</span><br><span class="line">KLSE = KLSE.replace(<span class="hljs-string">&apos;,&apos;</span>,<span class="hljs-string">&apos;&apos;</span>, regex=<span class="hljs-literal">True</span>)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;Open&apos;</span>] = KLSE[<span class="hljs-string">&apos;Open&apos;</span>].astype(float)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;Close&apos;</span>] = KLSE[<span class="hljs-string">&apos;Close&apos;</span>].astype(float)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;Change&apos;</span>] = (KLSE[<span class="hljs-string">&apos;Close&apos;</span>] - KLSE[<span class="hljs-string">&apos;Close&apos;</span>].shift(<span class="hljs-number">1</span>))/KLSE[<span class="hljs-string">&apos;Open&apos;</span>] + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">KLSE.head()</span><br></pre></td></tr></tbody></table></figure><p></p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Adj Close</th>      <th>Volume</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4-Jan-10</td>      <td>1272.31</td>      <td>1275.75</td>      <td>1272.25</td>      <td>1275.75</td>      <td>1275.75</td>      <td>56508200</td>    </tr>    <tr>      <th>1</th>      <td>5-Jan-10</td>      <td>1278.26</td>      <td>1290.55</td>      <td>1278.26</td>      <td>1288.24</td>      <td>1288.24</td>      <td>136646600</td>    </tr>    <tr>      <th>2</th>      <td>6-Jan-10</td>      <td>1288.86</td>      <td>1296.44</td>      <td>1288.02</td>      <td>1293.17</td>      <td>1293.17</td>      <td>117740300</td>    </tr>    <tr>      <th>3</th>      <td>7-Jan-10</td>      <td>1293.69</td>      <td>1299.70</td>      <td>1290.36</td>      <td>1291.42</td>      <td>1291.42</td>      <td>115024400</td>    </tr>    <tr>      <th>4</th>      <td>8-Jan-10</td>      <td>1294.93</td>      <td>1295.51</td>      <td>1290.86</td>      <td>1292.98</td>      <td>1292.98</td>      <td>74587200</td>    </tr>  </tbody></table></div><h3 id="Rules"><a href="#Rules" class="headerlink" title="Rules"></a>Rules</h3><p>We are using very simple moving average strategy,</p><p>the rules are:</p><ol><li>when the &#x201C;fast&#x201D; moving average goes above the &#x201C;slow&#x201D; moving average, we buy in.</li><li>when the &#x201C;fast&#x201D; moving average goes below the &#x201C;fast&#x201D; moving average, we sell.</li><li>No trading cost.</li></ol><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simulate</span><span class="hljs-params">(df,fast,slow)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">import</span> talib</span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;fast&apos;</span>] = talib.SMA(df[<span class="hljs-string">&apos;Close&apos;</span>],fast)</span><br><span class="line">    df[<span class="hljs-string">&apos;slow&apos;</span>] = talib.SMA(df[<span class="hljs-string">&apos;Close&apos;</span>],slow)</span><br><span class="line">    </span><br><span class="line">    df.dropna(inplace = <span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line">    gold_cross = df[df[<span class="hljs-string">&apos;fast&apos;</span>] &gt; df[<span class="hljs-string">&apos;slow&apos;</span>]].index</span><br><span class="line">    df.loc[gold_cross,<span class="hljs-string">&apos;Cross&apos;</span>] = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    gold_cross = df[df[<span class="hljs-string">&apos;fast&apos;</span>] &lt; df[<span class="hljs-string">&apos;slow&apos;</span>]].index</span><br><span class="line">    df.loc[gold_cross,<span class="hljs-string">&apos;Cross&apos;</span>] = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;Buy&apos;</span>] = df[<span class="hljs-string">&apos;Cross&apos;</span>].diff()</span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;Return&apos;</span>] = df[<span class="hljs-string">&apos;Cross&apos;</span>]*df[<span class="hljs-string">&apos;Change&apos;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">norm</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;Return&apos;</span>] = df[<span class="hljs-string">&apos;Return&apos;</span>].apply(<span class="hljs-keyword">lambda</span> x: norm(x))</span><br><span class="line">    df[<span class="hljs-string">&apos;Nav&apos;</span>] = (df[<span class="hljs-string">&apos;Return&apos;</span>]).cumprod()</span><br><span class="line"></span><br><span class="line">    price_in = df.loc[df[<span class="hljs-string">&apos;Buy&apos;</span>] == <span class="hljs-number">1</span>,<span class="hljs-string">&apos;Close&apos;</span>].values</span><br><span class="line">    price_out = df.loc[df[<span class="hljs-string">&apos;Buy&apos;</span>] == <span class="hljs-number">-1</span>,<span class="hljs-string">&apos;Close&apos;</span>].values</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># divide by 252 because generally a year has 252 trading days</span></span><br><span class="line">    num_periods = df.shape[<span class="hljs-number">0</span>]/<span class="hljs-number">252</span></span><br><span class="line">    rety = ((df[<span class="hljs-string">&apos;Nav&apos;</span>].iloc[<span class="hljs-number">-1</span>] / df[<span class="hljs-string">&apos;Nav&apos;</span>].iloc[<span class="hljs-number">0</span>]) ** (<span class="hljs-number">1</span> / (num_periods - <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span>)*<span class="hljs-number">100.0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> len(price_out) &gt; len(price_in):</span><br><span class="line">        price_out = price_out[:len(price_in)]</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> len(price_in) &gt; len(price_out):</span><br><span class="line">        price_in = price_in[:len(price_out)]</span><br><span class="line">        </span><br><span class="line">    VictoryRatio = ((price_out - price_in)&gt;<span class="hljs-number">0</span>).mean()*<span class="hljs-number">100.0</span></span><br><span class="line">    DD = <span class="hljs-number">1</span> - df[<span class="hljs-string">&apos;Nav&apos;</span>]/df[<span class="hljs-string">&apos;Nav&apos;</span>].cummax()</span><br><span class="line">    MDD = max(DD)*<span class="hljs-number">100.0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> df, round(rety, <span class="hljs-number">2</span>), round(VictoryRatio, <span class="hljs-number">2</span>), round(MDD,<span class="hljs-number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Strategy-Performance"><a href="#Strategy-Performance" class="headerlink" title="Strategy Performance"></a>Strategy Performance</h3><p>We are backtesting 3 pairs of moving average</p><ol><li>10 and 20 (Short term trade)</li><li>20 and 50 (Medium term trade)</li><li>50 and 200 (Long term trade)</li></ol><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">MA1020,cagr1020,vr1020,mdd1020 = simulate(KLSE.copy(),<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)</span><br><span class="line">MA2050,cagr2050,vr2050,mdd2050 = simulate(KLSE.copy(),<span class="hljs-number">20</span>,<span class="hljs-number">50</span>)</span><br><span class="line">MA50200,cagr50200,vr50200,mdd50200 = simulate(KLSE.copy(),<span class="hljs-number">50</span>,<span class="hljs-number">200</span>)</span><br><span class="line"></span><br><span class="line">KLSE[<span class="hljs-string">&apos;KLSE&apos;</span>] = (KLSE[<span class="hljs-string">&apos;Change&apos;</span>]).cumprod()</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="hljs-string">&apos;seaborn&apos;</span>)</span><br><span class="line"></span><br><span class="line">ax = MA1020[<span class="hljs-string">&apos;Nav&apos;</span>].plot(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>))</span><br><span class="line">MA2050[<span class="hljs-string">&apos;Nav&apos;</span>].plot(ax=ax)</span><br><span class="line">MA50200[<span class="hljs-string">&apos;Nav&apos;</span>].plot(ax=ax)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;KLSE&apos;</span>].plot(ax=ax)</span><br><span class="line"><span class="hljs-comment"># plt.plot( &apos;Date&apos;,&apos;Nav&apos;, data = MA2050, marker=&apos;&apos;, color=&apos;olive&apos;, linewidth=2)</span></span><br><span class="line">ax.legend([<span class="hljs-string">&apos;MA1020&apos;</span>,<span class="hljs-string">&apos;MA2050&apos;</span>,<span class="hljs-string">&apos;MA50200&apos;</span>,<span class="hljs-string">&apos;KLSE&apos;</span>]);</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> prettytable <span class="hljs-keyword">import</span> PrettyTable</span><br><span class="line"></span><br><span class="line">t = PrettyTable([<span class="hljs-string">&apos;Strategy&apos;</span>, <span class="hljs-string">&apos;CAGR&apos;</span>, <span class="hljs-string">&apos;Win Rate&apos;</span>, <span class="hljs-string">&apos;Max Drawdown&apos;</span>])</span><br><span class="line">t.add_row([<span class="hljs-string">&apos;MA1020&apos;</span>, cagr1020,vr1020,mdd1020])</span><br><span class="line">t.add_row([<span class="hljs-string">&apos;MA2050&apos;</span>, cagr2050,vr2050,mdd2050])</span><br><span class="line">t.add_row([<span class="hljs-string">&apos;MA50200&apos;</span>, cagr50200,vr50200,mdd50200])</span><br><span class="line"></span><br><span class="line">print(t)</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/img/movingaverage.png" alt="png"></p><pre><code>+----------+-------+----------+--------------+| Strategy |  CAGR | Win Rate | Max Drawdown |+----------+-------+----------+--------------+|  MA1020  |  6.44 |  50.77   |     8.52     ||  MA2050  |  3.14 |  30.77   |    12.15     || MA50200  | -0.89 |  28.57   |    30.08     |+----------+-------+----------+--------------+</code></pre><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>From the results, it seems like 10 and 20 moving average pair is the best<br><br>it consistently outperforms the benchmark.</p><p>the rest are disappointing, <br><br>longer term pairs are more likely to perform better in long bull runs index like SP500.</p><p>If you know coding, <br><br>you can try this out on other stocks that you like by getting csv data from Yahoo Finance.</p><p><strong>This isn&#x2019;t any trading advice and the studies and analysis done were for educational and sharing purposes only</strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用数据告诉你均线策略在马股的有效性</title>
      <link href="/zh-cn/movingaverage/"/>
      <url>/zh-cn/movingaverage/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x7528;&#x6570;&#x636E;&#x544A;&#x8BC9;&#x4F60;&#x5747;&#x7EBF;&#x7B56;&#x7565;&#x5728;&#x9A6C;&#x80A1;&#x7684;&#x6709;&#x6548;&#x6027;</p><a id="more"></a><h3 id="&#x5747;&#x7EBF;&#x7B56;&#x7565;"><a href="#&#x5747;&#x7EBF;&#x7B56;&#x7565;" class="headerlink" title="&#x5747;&#x7EBF;&#x7B56;&#x7565;"></a>&#x5747;&#x7EBF;&#x7B56;&#x7565;</h3><p>&#x79FB;&#x52A8;&#x5747;&#x7EBF;&#x7B97;&#x662F;&#x4EA4;&#x6613;&#x8005;&#x4EEC;&#x6700;&#x5E38;&#x7528;&#x7684;&#x6307;&#x6807;&#x4E4B;&#x4E00;&#x3002;</p><p>&#x56E0;&#x4E3A;&#x5B83;&#x5728;&#x5404;&#x5927;&#x7F51;&#x7AD9;&#x6216;&#x56FE;&#x6807;&#x8F6F;&#x4EF6;&#x90FD;&#x80FD;&#x89C1;&#x5230;&#x5B83;&#x7684;&#x8E2A;&#x5F71;&#x3002;</p><p>&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x5E38;&#x7528;&#x7684;&#x7B56;&#x7565;&#x5C31;&#x662F;&#x91D1;&#x53C9;/&#x6B7B;&#x53C9;&#x7B56;&#x7565;&#xFF0C;<br><br>&#x5FEB;&#x7EBF;&#x7A7F;&#x8FC7;&#x6162;&#x7EBF;&#x65F6;&#x4E70;&#x5165;&#xFF0C;<br><br>&#x5FEB;&#x7EBF;&#x8DCC;&#x7834;&#x6162;&#x7EBF;&#x65F6;&#x5356;&#x51FA;&#x3002;<br></p><p>&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x6211;&#x4EEC;&#x6765;&#x63A2;&#x8BA8;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x5728;&#x9A6C;&#x80A1;KLSE&#x6307;&#x6570;&#x7684;&#x8868;&#x73B0;&#x5982;&#x4F55;&#x3002;</p><h3 id="&#x6570;&#x636E;&#x8BFB;&#x53D6;"><a href="#&#x6570;&#x636E;&#x8BFB;&#x53D6;" class="headerlink" title="&#x6570;&#x636E;&#x8BFB;&#x53D6;"></a>&#x6570;&#x636E;&#x8BFB;&#x53D6;</h3><p>&#x6211;&#x4ECE;Yahoo Finance&#x4E0A;&#x4E0B;&#x8F7D;&#x4E86;KLSE&#x6307;&#x6570;&#x7684;&#x5386;&#x53F2;&#x6570;&#x636E;&#xFF0C;<br><br>&#x8981;&#x5206;&#x6790;&#x6570;&#x636E;&#x5F97;&#x5148;&#x8BFB;&#x53D6;&#x8FD9;&#x4E2A;csv&#x6587;&#x4EF6;&#x3002;</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">KLSE = pd.read_csv(<span class="hljs-string">&apos;KLSE.csv&apos;</span>)</span><br><span class="line">KLSE = KLSE.replace(<span class="hljs-string">&apos;,&apos;</span>,<span class="hljs-string">&apos;&apos;</span>, regex=<span class="hljs-literal">True</span>)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;Open&apos;</span>] = KLSE[<span class="hljs-string">&apos;Open&apos;</span>].astype(float)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;Close&apos;</span>] = KLSE[<span class="hljs-string">&apos;Close&apos;</span>].astype(float)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;Change&apos;</span>] = (KLSE[<span class="hljs-string">&apos;Close&apos;</span>] - KLSE[<span class="hljs-string">&apos;Close&apos;</span>].shift(<span class="hljs-number">1</span>))/KLSE[<span class="hljs-string">&apos;Open&apos;</span>] + <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">KLSE.head()</span><br></pre></td></tr></tbody></table></figure><p></p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Date</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Adj Close</th>      <th>Volume</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>4-Jan-10</td>      <td>1272.31</td>      <td>1275.75</td>      <td>1272.25</td>      <td>1275.75</td>      <td>1275.75</td>      <td>56508200</td>    </tr>    <tr>      <th>1</th>      <td>5-Jan-10</td>      <td>1278.26</td>      <td>1290.55</td>      <td>1278.26</td>      <td>1288.24</td>      <td>1288.24</td>      <td>136646600</td>    </tr>    <tr>      <th>2</th>      <td>6-Jan-10</td>      <td>1288.86</td>      <td>1296.44</td>      <td>1288.02</td>      <td>1293.17</td>      <td>1293.17</td>      <td>117740300</td>    </tr>    <tr>      <th>3</th>      <td>7-Jan-10</td>      <td>1293.69</td>      <td>1299.70</td>      <td>1290.36</td>      <td>1291.42</td>      <td>1291.42</td>      <td>115024400</td>    </tr>    <tr>      <th>4</th>      <td>8-Jan-10</td>      <td>1294.93</td>      <td>1295.51</td>      <td>1290.86</td>      <td>1292.98</td>      <td>1292.98</td>      <td>74587200</td>    </tr>  </tbody></table></div><h3 id="&#x7B56;&#x7565;&#x89C4;&#x5219;"><a href="#&#x7B56;&#x7565;&#x89C4;&#x5219;" class="headerlink" title="&#x7B56;&#x7565;&#x89C4;&#x5219;"></a>&#x7B56;&#x7565;&#x89C4;&#x5219;</h3><p>&#x6211;&#x4EEC;&#x4EE5;&#x6700;&#x7B80;&#x5355;&#x7684;&#x53CC;&#x5747;&#x7EBF;&#x7B56;&#x7565;&#x8FDB;&#x884C;&#x56DE;&#x6D4B;&#xFF0C;<br><br>&#x5177;&#x4F53;&#x89C4;&#x5219;&#xFF1A;</p><ol><li>&#x5FEB;&#x7EBF;&#x7A7F;&#x8FC7;&#x6162;&#x7EBF;&#x65F6;&#x4E70;&#x5165;</li><li>&#x5FEB;&#x7EBF;&#x8DCC;&#x7834;&#x6162;&#x7EBF;&#x65F6;&#x5356;&#x51FA;</li><li>&#x4E0D;&#x8003;&#x8651;&#x4EA4;&#x6613;&#x6210;&#x672C;</li></ol><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">simulate</span><span class="hljs-params">(df,fast,slow)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">import</span> talib</span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;fast&apos;</span>] = talib.SMA(df[<span class="hljs-string">&apos;Close&apos;</span>],fast)</span><br><span class="line">    df[<span class="hljs-string">&apos;slow&apos;</span>] = talib.SMA(df[<span class="hljs-string">&apos;Close&apos;</span>],slow)</span><br><span class="line">    </span><br><span class="line">    df.dropna(inplace = <span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line">    gold_cross = df[df[<span class="hljs-string">&apos;fast&apos;</span>] &gt; df[<span class="hljs-string">&apos;slow&apos;</span>]].index</span><br><span class="line">    df.loc[gold_cross,<span class="hljs-string">&apos;Cross&apos;</span>] = <span class="hljs-number">1</span></span><br><span class="line"></span><br><span class="line">    gold_cross = df[df[<span class="hljs-string">&apos;fast&apos;</span>] &lt; df[<span class="hljs-string">&apos;slow&apos;</span>]].index</span><br><span class="line">    df.loc[gold_cross,<span class="hljs-string">&apos;Cross&apos;</span>] = <span class="hljs-number">0</span></span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;Buy&apos;</span>] = df[<span class="hljs-string">&apos;Cross&apos;</span>].diff()</span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;Return&apos;</span>] = df[<span class="hljs-string">&apos;Cross&apos;</span>]*df[<span class="hljs-string">&apos;Change&apos;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">norm</span><span class="hljs-params">(x)</span>:</span></span><br><span class="line">        <span class="hljs-keyword">if</span> x == <span class="hljs-number">0</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span></span><br><span class="line">        <span class="hljs-keyword">else</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    df[<span class="hljs-string">&apos;Return&apos;</span>] = df[<span class="hljs-string">&apos;Return&apos;</span>].apply(<span class="hljs-keyword">lambda</span> x: norm(x))</span><br><span class="line">    df[<span class="hljs-string">&apos;Nav&apos;</span>] = (df[<span class="hljs-string">&apos;Return&apos;</span>]).cumprod()</span><br><span class="line"></span><br><span class="line">    price_in = df.loc[df[<span class="hljs-string">&apos;Buy&apos;</span>] == <span class="hljs-number">1</span>,<span class="hljs-string">&apos;Close&apos;</span>].values</span><br><span class="line">    price_out = df.loc[df[<span class="hljs-string">&apos;Buy&apos;</span>] == <span class="hljs-number">-1</span>,<span class="hljs-string">&apos;Close&apos;</span>].values</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment"># divide by 252 because generally a year has 252 trading days</span></span><br><span class="line">    num_periods = df.shape[<span class="hljs-number">0</span>]/<span class="hljs-number">252</span></span><br><span class="line">    rety = ((df[<span class="hljs-string">&apos;Nav&apos;</span>].iloc[<span class="hljs-number">-1</span>] / df[<span class="hljs-string">&apos;Nav&apos;</span>].iloc[<span class="hljs-number">0</span>]) ** (<span class="hljs-number">1</span> / (num_periods - <span class="hljs-number">1</span>)) - <span class="hljs-number">1</span>)*<span class="hljs-number">100.0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> len(price_out) &gt; len(price_in):</span><br><span class="line">        price_out = price_out[:len(price_in)]</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> len(price_in) &gt; len(price_out):</span><br><span class="line">        price_in = price_in[:len(price_out)]</span><br><span class="line">        </span><br><span class="line">    VictoryRatio = ((price_out - price_in)&gt;<span class="hljs-number">0</span>).mean()*<span class="hljs-number">100.0</span></span><br><span class="line">    DD = <span class="hljs-number">1</span> - df[<span class="hljs-string">&apos;Nav&apos;</span>]/df[<span class="hljs-string">&apos;Nav&apos;</span>].cummax()</span><br><span class="line">    MDD = max(DD)*<span class="hljs-number">100.0</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> df, round(rety, <span class="hljs-number">2</span>), round(VictoryRatio, <span class="hljs-number">2</span>), round(MDD,<span class="hljs-number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="&#x7B56;&#x7565;&#x8868;&#x73B0;"><a href="#&#x7B56;&#x7565;&#x8868;&#x73B0;" class="headerlink" title="&#x7B56;&#x7565;&#x8868;&#x73B0;"></a>&#x7B56;&#x7565;&#x8868;&#x73B0;</h3><p>&#x6211;&#x4EEC;&#x6D4B;&#x8BD5;3&#x5BF9;&#x7684;&#x5747;&#x7EBF;&#xFF0C;<br><br>&#x6BD5;&#x7ADF;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x4F1A;&#x6709;&#x81EA;&#x5DF1;&#x559C;&#x6B22;&#x7684;&#x5747;&#x7EBF;&#x7EC4;&#x5408;</p><ol><li>10&#x5929;&#x7EBF; &#x548C; 20&#x5929;&#x7EBF; (&#x77ED;&#x671F;&#x4EA4;&#x6613;)</li><li>20&#x5929;&#x7EBF; &#x548C; 50&#x5929;&#x7EBF; (&#x4E2D;&#x671F;&#x4EA4;&#x6613;)</li><li>50&#x5929;&#x7EBF; &#x548C; 200&#x5929;&#x7EBF; (&#x957F;&#x671F;&#x4EA4;&#x6613;)</li></ol><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">MA1020,cagr1020,vr1020,mdd1020 = simulate(KLSE.copy(),<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)</span><br><span class="line">MA2050,cagr2050,vr2050,mdd2050 = simulate(KLSE.copy(),<span class="hljs-number">20</span>,<span class="hljs-number">50</span>)</span><br><span class="line">MA50200,cagr50200,vr50200,mdd50200 = simulate(KLSE.copy(),<span class="hljs-number">50</span>,<span class="hljs-number">200</span>)</span><br><span class="line"></span><br><span class="line">KLSE[<span class="hljs-string">&apos;KLSE&apos;</span>] = (KLSE[<span class="hljs-string">&apos;Change&apos;</span>]).cumprod()</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="hljs-string">&apos;seaborn&apos;</span>)</span><br><span class="line"></span><br><span class="line">ax = MA1020[<span class="hljs-string">&apos;Nav&apos;</span>].plot(figsize=(<span class="hljs-number">10</span>, <span class="hljs-number">6</span>))</span><br><span class="line">MA2050[<span class="hljs-string">&apos;Nav&apos;</span>].plot(ax=ax)</span><br><span class="line">MA50200[<span class="hljs-string">&apos;Nav&apos;</span>].plot(ax=ax)</span><br><span class="line">KLSE[<span class="hljs-string">&apos;KLSE&apos;</span>].plot(ax=ax)</span><br><span class="line"><span class="hljs-comment"># plt.plot( &apos;Date&apos;,&apos;Nav&apos;, data = MA2050, marker=&apos;&apos;, color=&apos;olive&apos;, linewidth=2)</span></span><br><span class="line">ax.legend([<span class="hljs-string">&apos;MA1020&apos;</span>,<span class="hljs-string">&apos;MA2050&apos;</span>,<span class="hljs-string">&apos;MA50200&apos;</span>,<span class="hljs-string">&apos;KLSE&apos;</span>]);</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">from</span> prettytable <span class="hljs-keyword">import</span> PrettyTable</span><br><span class="line"></span><br><span class="line">t = PrettyTable([<span class="hljs-string">&apos;Strategy&apos;</span>, <span class="hljs-string">&apos;CAGR&apos;</span>, <span class="hljs-string">&apos;Win Rate&apos;</span>, <span class="hljs-string">&apos;Max Drawdown&apos;</span>])</span><br><span class="line">t.add_row([<span class="hljs-string">&apos;MA1020&apos;</span>, cagr1020,vr1020,mdd1020])</span><br><span class="line">t.add_row([<span class="hljs-string">&apos;MA2050&apos;</span>, cagr2050,vr2050,mdd2050])</span><br><span class="line">t.add_row([<span class="hljs-string">&apos;MA50200&apos;</span>, cagr50200,vr50200,mdd50200])</span><br><span class="line"></span><br><span class="line">print(t)</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/img/movingaverage.png" alt="png"></p><pre><code>+----------+-------+----------+--------------+| Strategy |  CAGR | Win Rate | Max Drawdown |+----------+-------+----------+--------------+|  MA1020  |  6.44 |  50.77   |     8.52     ||  MA2050  |  3.14 |  30.77   |    12.15     || MA50200  | -0.89 |  28.57   |    30.08     |+----------+-------+----------+--------------+</code></pre><h3 id="&#x60F3;&#x6CD5;"><a href="#&#x60F3;&#x6CD5;" class="headerlink" title="&#x60F3;&#x6CD5;"></a>&#x60F3;&#x6CD5;</h3><p>&#x4ECE;&#x6570;&#x636E;&#x6765;&#x770B;&#xFF0C;&#x770B;&#x6765;&#x77ED;&#x671F;&#x7684;&#x7B56;&#x7565;&#x6700;&#x9002;&#x5408;KLSE&#x6307;&#x6570; <br><br>&#x5B83;&#x7684;&#x8D62;&#x7387;&#x4E5F;&#x662F;&#x6700;&#x9AD8;&#x7684;&#x3002;<br><br>&#x800C;&#x4E14;&#x4E5F;&#x5927;&#x5E45;&#x8DD1;&#x8D62;KLSE&#x6307;&#x6570;&#x3002;</p><p>&#x8F83;&#x957F;&#x671F;&#x7684;&#x5747;&#x7EBF;&#x7EC4;&#x5408;&#x7684;&#x8868;&#x73B0;&#x8F83;&#x5DEE;&#x5F3A;&#x4EBA;&#x610F;&#xFF0C;<br><br>&#x6709;&#x4E9B;&#x8868;&#x73B0;&#x8FD8;&#x4E0D;&#x5982;&#x76F4;&#x63A5;&#x4E70;&#x5165;&#x6301;&#x6709;&#x3002;</p><p>&#x8FD9;&#x53EF;&#x80FD;&#x662F;&#x56E0;&#x4E3A;KLSE&#x6307;&#x6570;&#x7684;&#x957F;&#x671F;&#x8D70;&#x52BF;&#x4E0D;&#x5F3A;&#xFF0C;<br><br>&#x5982;&#x679C;&#x628A;&#x8FD9;&#x7B56;&#x7565;&#x5957;&#x7528;&#x5728;&#x957F;&#x671F;&#x8D70;&#x52BF;&#x5F3A;&#x52B2;&#x7684;&#x6307;&#x6570;&#xFF08;&#x6BD4;&#x5982;SP500&#xFF09;&#xFF0C;<br><br>&#x76F8;&#x4FE1;&#x6210;&#x7EE9;&#x4F1A;&#x597D;&#x770B;&#x5F97;&#x591A;&#x3002;</p><p>&#x60F3;&#x8981;&#x81EA;&#x5DF1;&#x6D4B;&#x8BD5;&#x7684;&#x8BFB;&#x8005;&#x53EF;&#x4EE5;&#x4ECE;Yahoo Finance&#x4E0B;&#x8F7D;&#x60F3;&#x8981;&#x7684;&#x4E2A;&#x80A1;&#x6570;&#x636E;&#x6765;&#x5206;&#x6790;&#x770B;&#x770B;&#x3002;</p><p><strong>&#x7EAF;&#x5C5E;&#x5206;&#x4EAB;&#xFF0C;&#x65E0;&#x4E70;&#x5356;&#x5EFA;&#x8BAE;</strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How I found the most profitable month in Bursa using Python.</title>
      <link href="/Window-Dressing/"/>
      <url>/Window-Dressing/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Let&#x2019;s talk about the mysterious &#x201C;Window Dressing&#x201D;</p><a id="more"></a><h3 id="The-mysterious-&#x201C;Window-Dressing&#x201D;"><a href="#The-mysterious-&#x201C;Window-Dressing&#x201D;" class="headerlink" title="The mysterious &#x201C;Window Dressing&#x201D;"></a>The mysterious &#x201C;Window Dressing&#x201D;</h3><p>I know</p><p>This is a crazy idea, why would there be difference in returns among months?<br><br>But stay with me,</p><p>after around 5 years in the market, I have heard a lot of news and rumours,<br><br>about which season/month is more bullish.</p><p>One of the example is the infamous phenomena we called &#x201C;Window dressing&#x201D;,<br><br>where fund managers would buy in to inflate the price of the assets,<br><br>so that the funds under their management look good at the start of the year.</p><p>Is this true?<br><br>Well, as an engineer, I will not settle at news and rumours,<br><br>Let&#x2019;s find out</p><h3 id="Reading-data"><a href="#Reading-data" class="headerlink" title="Reading data"></a>Reading data</h3><p>First we are going to need monthly historical data of KLSE index.<br></p><p>I already have one, I got it from Yahoo Finance for free</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">KLSE_data = pd.read_csv(<span class="hljs-string">&apos;MKLSE.csv&apos;</span>,parse_dates=[<span class="hljs-string">&apos;Datetime&apos;</span>])</span><br><span class="line"></span><br><span class="line">KLSE_data.head(<span class="hljs-number">5</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Datetime</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Adj Close</th>      <th>Volume</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2010-10-31</td>      <td>1468.45</td>      <td>1505.66</td>      <td>1462.27</td>      <td>1505.66</td>      <td>1,505.66</td>      <td>123,952,000,118,754,000,000,000,000,000,000,00...</td>    </tr>    <tr>      <th>1</th>      <td>2010-11-30</td>      <td>1510.69</td>      <td>1531.99</td>      <td>1474.02</td>      <td>1485.23</td>      <td>1,485.23</td>      <td>89,809,800,125,250,500,000,000,000,000,000,000...</td>    </tr>    <tr>      <th>2</th>      <td>2010-12-31</td>      <td>1482.69</td>      <td>1529.95</td>      <td>1477.57</td>      <td>1518.91</td>      <td>1,518.91</td>      <td>153,042,000,150,431,000,000,000,000,000,000,00...</td>    </tr>    <tr>      <th>3</th>      <td>2011-01-31</td>      <td>1524.53</td>      <td>1576.95</td>      <td>1505.36</td>      <td>1519.94</td>      <td>1,519.94</td>      <td>142,815,000,204,667,000,000,000,000,000,000,00...</td>    </tr>    <tr>      <th>4</th>      <td>2011-02-28</td>      <td>1524.74</td>      <td>1544.35</td>      <td>1474.38</td>      <td>1491.25</td>      <td>1,491.25</td>      <td>122,139,600,155,642,000,000,000,000,000,000,00...</td>    </tr>  </tbody></table></div><p>The data is just simple dataset with open, low, high, close and volume.</p><h3 id="Monthly-Fluctuations"><a href="#Monthly-Fluctuations" class="headerlink" title="Monthly Fluctuations"></a>Monthly Fluctuations</h3><p>Let&#x2019;s look at the fluctuations first, first we have to calculate the fluctuations or change every month</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KLSE_data[<span class="hljs-string">&apos;Change&apos;</span>] = (KLSE_data[<span class="hljs-string">&apos;Close&apos;</span>] - KLSE_data[<span class="hljs-string">&apos;Open&apos;</span>])/KLSE_data[<span class="hljs-string">&apos;Open&apos;</span>]</span><br><span class="line">KLSE_data.plot.line(x = <span class="hljs-string">&apos;Datetime&apos;</span>, y = <span class="hljs-string">&apos;Change&apos;</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;AxesSubplot:xlabel=&apos;Datetime&apos;&gt;</code></pre><p><img src="/img/klsemonthlyfluctuation.png" alt="png"></p><p>The fluctuations are just around 0,<br>that doesn&#x2019;t look very interesting, let&#x2019;s try analyzing this dataset another way</p><h3 id="Monthly-Average-Returns"><a href="#Monthly-Average-Returns" class="headerlink" title="Monthly Average Returns"></a>Monthly Average Returns</h3><p>Let&#x2019;s get the average change of every month and have a look</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># We need calendar module to parse into months in words</span></span><br><span class="line"><span class="hljs-keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">KLSE_data[<span class="hljs-string">&apos;month&apos;</span>] = KLSE_data[<span class="hljs-string">&apos;Datetime&apos;</span>].dt.month</span><br><span class="line">temp_data = KLSE_data.groupby([<span class="hljs-string">&apos;month&apos;</span>])</span><br><span class="line"></span><br><span class="line">month = pd.DataFrame(columns = [<span class="hljs-string">&apos;Month&apos;</span>,<span class="hljs-string">&apos;Change&apos;</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> index,m <span class="hljs-keyword">in</span> temp_data:</span><br><span class="line">    temp_month = m[<span class="hljs-string">&apos;month&apos;</span>].iloc[<span class="hljs-number">0</span>]</span><br><span class="line">    mm = calendar.month_abbr[temp_month]</span><br><span class="line">    temp_change = m[<span class="hljs-string">&apos;Change&apos;</span>].mean()</span><br><span class="line">    month = month.append({<span class="hljs-string">&apos;Month&apos;</span>: temp_month, </span><br><span class="line">                          <span class="hljs-string">&apos;Change&apos;</span>: temp_change}, ignore_index=<span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line">month.plot(x = <span class="hljs-string">&apos;Month&apos;</span>, y = <span class="hljs-string">&apos;Change&apos;</span>, kind = <span class="hljs-string">&apos;bar&apos;</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;AxesSubplot:xlabel=&apos;Month&apos;&gt;</code></pre><p><img src="/img/klsemonthlyavgreturn.png" alt="png"></p><p>If we look at the average returns for every month,<br>December look significantly higher than the rest</p><h3 id="A-More-Careful-Look-at-Monthly-Returns"><a href="#A-More-Careful-Look-at-Monthly-Returns" class="headerlink" title="A More Careful Look at Monthly Returns"></a>A More Careful Look at Monthly Returns</h3><p>Just to be careful, bar chart doesn&#x2019;t tell you the whole story,<br><br>the data might be skewed, a boxplot will be a better way to interpret this data<br><br>(What is a <a href="https://www.wellbeingatschool.org.nz/information-sheet/understanding-and-interpreting-box-plots" target="_blank" rel="noopener">Boxplot?</a>)?</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">KLSE_data.boxplot(column = [<span class="hljs-string">&apos;Change&apos;</span>], by = <span class="hljs-string">&apos;month&apos;</span>,</span><br><span class="line">                 showfliers = <span class="hljs-literal">True</span>, grid = <span class="hljs-literal">False</span>)</span><br><span class="line">plt.axhline(y = <span class="hljs-number">0</span>, color = <span class="hljs-string">&apos;green&apos;</span>, linestyle = <span class="hljs-string">&apos;dotted&apos;</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;matplotlib.lines.Line2D at 0x282ddbccdc0&gt;</code></pre><p><img src="/img/klsemonthlyboxplot.png" alt="png"></p><p>Now we can look at this dataset at a bigger picture,<br><br>December is indeed a profitable month, with a few outliers..</p><p>Other than December, there are other promising months too..<br><br>March, June, October, December</p><h3 id="Can-We-Trade-on-This"><a href="#Can-We-Trade-on-This" class="headerlink" title="Can We Trade on This?"></a>Can We Trade on This?</h3><p>This got me thinking,</p><p>what if I long KLSE every historically profitable months?<br><br>Let&#x2019;s set up a trading strategy, long KLSE every july, october and december <br><br>(top 3 most profitable months according to our analysis)</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">KLSE_data[<span class="hljs-string">&apos;signal&apos;</span>] = KLSE_data[<span class="hljs-string">&apos;month&apos;</span>].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> (x==<span class="hljs-number">7</span> <span class="hljs-keyword">or</span> x == <span class="hljs-number">10</span> <span class="hljs-keyword">or</span> x == <span class="hljs-number">12</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)</span><br><span class="line">KLSE_data[<span class="hljs-string">&apos;return&apos;</span>] = KLSE_data[<span class="hljs-string">&apos;Change&apos;</span>]*KLSE_data[<span class="hljs-string">&apos;signal&apos;</span>]</span><br><span class="line"></span><br><span class="line">KLSE_data[<span class="hljs-string">&apos;Capital&apos;</span>] = <span class="hljs-number">0</span></span><br><span class="line">InitialCapital = KLSE_data[<span class="hljs-string">&apos;Close&apos;</span>].loc[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(KLSE_data)):</span><br><span class="line">    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:</span><br><span class="line">        KLSE_data.loc[i, <span class="hljs-string">&apos;Capital&apos;</span>] = InitialCapital</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        KLSE_data.loc[i, <span class="hljs-string">&apos;Capital&apos;</span>] = ((KLSE_data[<span class="hljs-string">&apos;return&apos;</span>].loc[i] + <span class="hljs-number">1.0</span>) </span><br><span class="line">                                   * KLSE_data[<span class="hljs-string">&apos;Capital&apos;</span>].loc[i - <span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">KLSE_data.plot.line(x=<span class="hljs-string">&apos;Datetime&apos;</span>,y=[<span class="hljs-string">&apos;Capital&apos;</span>,<span class="hljs-string">&apos;Close&apos;</span>])</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;AxesSubplot:xlabel=&apos;Datetime&apos;&gt;</code></pre><p><img src="/img/klsemonthlystrategy.png" alt="png"></p><p>The performance looks great, or is it??<br></p><ul><li>First, what happens in the past don&#x2019;t guarantee future performance,</li><li>Second, in statistics terms, this dataset is too small and this is likely the result of overfitting.</li></ul><p>and this feels like giving teaching people how to get rich by telling them your lottery number</p><h3 id="Takeaways"><a href="#Takeaways" class="headerlink" title="Takeaways"></a>Takeaways</h3><p>From past 10 years worth of data,<br>December is indeed a profitable, bullish month<br><br>Does that mean we should buy in every December?</p><p>I will to leave the answering and decision to you.</p><blockquote><p>&#x2018;History doesn&#x2019;t repeat itself, but it does rhyme&#x2019;</p></blockquote><p><strong>-Mark Twain</strong></p><p><strong>This isn&#x2019;t any trading advice and the studies and analysis done were for educational and sharing purposes only</strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Python告诉你马股哪个月最容易赚钱!</title>
      <link href="/zh-cn/Window-Dressing/"/>
      <url>/zh-cn/Window-Dressing/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x201C;&#x6A71;&#x7A97;&#x7C89;&#x9970;&#x201D;&#x6548;&#x5E94;&#x662F;&#x771F;&#x5B9E;&#x5B58;&#x5728;&#x7684;&#x5417;? &#x7528;10&#x5E74;&#x6570;&#x636E;&#x544A;&#x8BC9;&#x4F60;!</p><a id="more"></a><h3 id="&#x795E;&#x5947;&#x7684;&#x6708;&#x4EFD;&#x6548;&#x5E94;"><a href="#&#x795E;&#x5947;&#x7684;&#x6708;&#x4EFD;&#x6548;&#x5E94;" class="headerlink" title="&#x795E;&#x5947;&#x7684;&#x6708;&#x4EFD;&#x6548;&#x5E94;"></a>&#x795E;&#x5947;&#x7684;&#x6708;&#x4EFD;&#x6548;&#x5E94;</h3><p>&#x6211;&#x77E5;&#x9053;&#x4F60;&#x5728;&#x60F3;&#x4EC0;&#x4E48;</p><p>&#x8FD9;&#x662F;&#x4E2A;&#x5F88;&#x75AF;&#x72C2;&#x7684;&#x6CE8;&#x610F;&#xFF0C;&#x80A1;&#x7968;&#x5E02;&#x573A;&#x53C8;&#x4E0D;&#x662F;&#x7ED3;&#x5A5A;&#x65B0;&#x4EBA;&#xFF0C;&#x600E;&#x4E48;&#x4F1A;&#x9009;&#x65E5;&#x5B50;&#x6765;&#x8D77;&#x843D;&#x5462;&#xFF1F;<br><br>&#x8BF7;&#x7EE7;&#x7EED;&#x8BFB;&#x4E0B;&#x53BB;&#xFF0C;&#x6211;&#x4E3A;&#x4F60;&#x89E3;&#x7B54;</p><p>&#x5728;&#x9A6C;&#x80A1;&#x6D78;&#x6DEB;&#x4E86;5&#x5E74;&#xFF0C;&#x65F6;&#x5E38;&#x90FD;&#x4F1A;&#x542C;&#x5230;&#x7F51;&#x53CB;&#x7684;&#x6D41;&#x8A00;&#xFF0C;</p><p>&#x5173;&#x4E8E;&#x54EA;&#x4E00;&#x4E2A;&#x6708;&#x4EFD;&#x8D5A;&#x94B1;&#x662F;&#x6700;&#x5BB9;&#x6613;&#x7684;&#xFF0C;<br><br>&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x5C31;&#x662F;12&#x6708;&#x4EFD;&#x7684;&#x201D;&#x6A71;&#x7A97;&#x7C89;&#x9970;&#x201D;&#xFF0C;<br><br>&#x8FD9;&#x4E2A;&#x73B0;&#x8C61;&#x80CC;&#x540E;&#x7684;&#x539F;&#x7406;&#x5927;&#x6982;&#x5C31;&#x662F;&#x57FA;&#x91D1;&#x7ECF;&#x7406;&#x4EEC;&#x4F1A;&#x5F00;&#x59CB;&#x4E70;&#x8FDB;&#x6240;&#x62E5;&#x6709;&#x7684;&#x80A1;&#x7968;&#xFF0C;<br><br>&#x628A;&#x57FA;&#x91D1;&#x8868;&#x73B0;&#x201D;&#x63A8;&#x201D;&#x4E0A;&#x53BB;&#xFF0C;&#x6240;&#x4EE5;&#x5E74;&#x5C3E;&#x6295;&#x8D44;&#x8005;&#x4EEC;&#x624D;&#x4F1A;&#x6EE1;&#x610F;&#x81EA;&#x5DF1;&#x6240;&#x6295;&#x8D44;&#x7684;&#x57FA;&#x91D1;</p><p>&#x6211;&#x5F88;&#x597D;&#x5947;&#xFF0C;&#x8FD9;&#x5230;&#x5E95;&#x662F;&#x771F;&#x7684;&#x5417;&#xFF1F;</p><p>&#x8EAB;&#x4E3A;&#x7801;&#x519C;&#x7684;&#x5C0F;&#x7F16;&#xFF0C;&#x505A;&#x4EC0;&#x4E48;&#x4E8B;&#x60C5;&#x51B3;&#x5B9A;&#x90FD;&#x4F1A;&#x4EE5;&#x6570;&#x636E;&#x4E3A;&#x57FA;&#x7840;</p><p>&#x6240;&#x4EE5;&#x90A3;&#x4E48;&#x6709;&#x8DA3;&#x7684;&#x73B0;&#x8C61;&#x5F53;&#x7136;&#x8981;&#x7528;&#x6570;&#x636E;&#x627E;&#x51FA;&#x6765;&#xFF01;</p><h3 id="&#x8BFB;&#x53D6;&#x6570;&#x636E;"><a href="#&#x8BFB;&#x53D6;&#x6570;&#x636E;" class="headerlink" title="&#x8BFB;&#x53D6;&#x6570;&#x636E;"></a>&#x8BFB;&#x53D6;&#x6570;&#x636E;</h3><p>&#x9996;&#x5148;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x83B7;&#x5F97;&#x9A6C;&#x6765;&#x897F;&#x4E9A;&#x7EFC;&#x5408;&#x6307;&#x6570;KLSE&#x7684;&#x6708;&#x6570;&#x636E;</p><p>&#x6211;&#x624B;&#x4E0A;&#x5DF2;&#x7ECF;&#x6709;&#x4E00;&#x4EFD;&#x4E86;&#xFF0C;&#x662F;&#x4ECE;Yahoo Finance&#x4E0B;&#x8F7D;&#x7684;&#xFF0C;</p><p>&#x5148;&#x770B;&#x770B;&#x6570;&#x636E;&#x957F;&#x5F97;&#x5982;&#x4F55;&#x3002;&#x3002;</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">KLSE_data = pd.read_csv(<span class="hljs-string">&apos;MKLSE.csv&apos;</span>,parse_dates=[<span class="hljs-string">&apos;Datetime&apos;</span>])</span><br><span class="line"></span><br><span class="line">KLSE_data.head(<span class="hljs-number">5</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Datetime</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Adj Close</th>      <th>Volume</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2010-10-31</td>      <td>1468.45</td>      <td>1505.66</td>      <td>1462.27</td>      <td>1505.66</td>      <td>1,505.66</td>      <td>123,952,000,118,754,000,000,000,000,000,000,00...</td>    </tr>    <tr>      <th>1</th>      <td>2010-11-30</td>      <td>1510.69</td>      <td>1531.99</td>      <td>1474.02</td>      <td>1485.23</td>      <td>1,485.23</td>      <td>89,809,800,125,250,500,000,000,000,000,000,000...</td>    </tr>    <tr>      <th>2</th>      <td>2010-12-31</td>      <td>1482.69</td>      <td>1529.95</td>      <td>1477.57</td>      <td>1518.91</td>      <td>1,518.91</td>      <td>153,042,000,150,431,000,000,000,000,000,000,00...</td>    </tr>    <tr>      <th>3</th>      <td>2011-01-31</td>      <td>1524.53</td>      <td>1576.95</td>      <td>1505.36</td>      <td>1519.94</td>      <td>1,519.94</td>      <td>142,815,000,204,667,000,000,000,000,000,000,00...</td>    </tr>    <tr>      <th>4</th>      <td>2011-02-28</td>      <td>1524.74</td>      <td>1544.35</td>      <td>1474.38</td>      <td>1491.25</td>      <td>1,491.25</td>      <td>122,139,600,155,642,000,000,000,000,000,000,00...</td>    </tr>  </tbody></table></div><p>&#x8FD9;&#x662F;&#x5F88;&#x5178;&#x578B;&#x7684;&#x80A1;&#x7968;&#x6570;&#x636E;&#xFF0C;&#x6709;&#x5F00;&#x5E02;&#xFF0C;&#x9AD8;&#x70B9;&#xFF0C;&#x4F4E;&#x70B9;&#xFF0C;&#x6536;&#x5E02;&#x4EF7;&#xFF0C;&#x4EA4;&#x6613;&#x91CF;&#x7684;&#x6708;&#x6570;&#x636E;</p><p>&#x770B;&#x7740;&#x4E5F;&#x6CA1;&#x4EC0;&#x4E48;&#x610F;&#x601D;&#xFF0C;&#x4E0D;&#x5982;&#x770B;&#x770B;&#x6CE2;&#x52A8;&#x7387;&#x3002;&#x3002;</p><h3 id="&#x9A6C;&#x80A1;&#x6708;&#x6CE2;&#x52A8;&#x7387;"><a href="#&#x9A6C;&#x80A1;&#x6708;&#x6CE2;&#x52A8;&#x7387;" class="headerlink" title="&#x9A6C;&#x80A1;&#x6708;&#x6CE2;&#x52A8;&#x7387;"></a>&#x9A6C;&#x80A1;&#x6708;&#x6CE2;&#x52A8;&#x7387;</h3><p>&#x5148;&#x6765;&#x770B;&#x770B;&#x9A6C;&#x80A1;&#x7684;&#x6708;&#x6CE2;&#x52A8;&#x7387;&#xFF0C;&#x9996;&#x5148;&#x6211;&#x4EEC;&#x5F97;&#x8BA1;&#x7B97;&#x51FA;&#x6BCF;&#x6708;&#x7684;&#x6CE2;&#x52A8;&#x7387;</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KLSE_data[<span class="hljs-string">&apos;Change&apos;</span>] = (KLSE_data[<span class="hljs-string">&apos;Close&apos;</span>] - KLSE_data[<span class="hljs-string">&apos;Open&apos;</span>])/KLSE_data[<span class="hljs-string">&apos;Open&apos;</span>]</span><br><span class="line">KLSE_data.plot.line(x = <span class="hljs-string">&apos;Datetime&apos;</span>, y = <span class="hljs-string">&apos;Change&apos;</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;AxesSubplot:xlabel=&apos;Datetime&apos;&gt;</code></pre><p><img src="/img/klsemonthlyfluctuation.png" alt="png"></p><p>&#x53EF;&#x4EE5;&#x89C2;&#x5BDF;&#x51FA;&#x9A6C;&#x80A1;&#x7684;&#x6708;&#x6CE2;&#x52A8;&#x7387;&#x90FD;&#x662F;&#x56F4;&#x7ED5;&#x5728;0&#x5DE6;&#x53F3;&#xFF0C;&#x4E5F;&#x7B26;&#x5408;&#x5E38;&#x7406;</p><p>&#x4EE5;&#x6CE2;&#x52A8;&#x7387;&#x6765;&#x770B;&#x5176;&#x5B9E;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x6709;&#x7528;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x8BD5;&#x8BD5;&#x770B;&#x5176;&#x4ED6;&#x5206;&#x6790;&#x6CD5;</p><h3 id="&#x6708;&#x5E73;&#x5747;&#x56DE;&#x916C;"><a href="#&#x6708;&#x5E73;&#x5747;&#x56DE;&#x916C;" class="headerlink" title="&#x6708;&#x5E73;&#x5747;&#x56DE;&#x916C;"></a>&#x6708;&#x5E73;&#x5747;&#x56DE;&#x916C;</h3><p>&#x8BD5;&#x8BD5;&#x770B;&#x53EF;&#x89C6;&#x5316;&#x6BCF;&#x4E2A;&#x6708;&#x7684;&#x5E73;&#x5747;&#x56DE;&#x916C;</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment"># We need calendar module to parse into months in words</span></span><br><span class="line"><span class="hljs-keyword">import</span> calendar</span><br><span class="line"></span><br><span class="line">KLSE_data[<span class="hljs-string">&apos;month&apos;</span>] = KLSE_data[<span class="hljs-string">&apos;Datetime&apos;</span>].dt.month</span><br><span class="line">temp_data = KLSE_data.groupby([<span class="hljs-string">&apos;month&apos;</span>])</span><br><span class="line"></span><br><span class="line">month = pd.DataFrame(columns = [<span class="hljs-string">&apos;Month&apos;</span>,<span class="hljs-string">&apos;Change&apos;</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> index,m <span class="hljs-keyword">in</span> temp_data:</span><br><span class="line">    temp_month = m[<span class="hljs-string">&apos;month&apos;</span>].iloc[<span class="hljs-number">0</span>]</span><br><span class="line">    mm = calendar.month_abbr[temp_month]</span><br><span class="line">    temp_change = m[<span class="hljs-string">&apos;Change&apos;</span>].mean()</span><br><span class="line">    month = month.append({<span class="hljs-string">&apos;Month&apos;</span>: temp_month, </span><br><span class="line">                          <span class="hljs-string">&apos;Change&apos;</span>: temp_change}, ignore_index=<span class="hljs-literal">True</span>)</span><br><span class="line"></span><br><span class="line">month.plot(x = <span class="hljs-string">&apos;Month&apos;</span>, y = <span class="hljs-string">&apos;Change&apos;</span>, kind = <span class="hljs-string">&apos;bar&apos;</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;AxesSubplot:xlabel=&apos;Month&apos;&gt;</code></pre><p><img src="/img/klsemonthlyavgreturn.png" alt="png"></p><p>&#x6211;&#x628A;&#x6BCF;&#x4E2A;&#x6708;&#x7684;&#x56DE;&#x916C;&#x7387;&#x53D6;&#x5F97;&#x5E73;&#x5747;&#xFF0C;<br><br>&#x518D;&#x7528;bar chart&#x6765;&#x53EF;&#x89C6;&#x5316;&#xFF0C;<br><br>&#x770B;&#x8D77;&#x6765;12&#x6708;&#x7684;&#x56DE;&#x916C;&#x7387;&#x771F;&#x7684;&#x6BD4;&#x8F83;&#x9AD8;</p><h3 id="&#x66F4;&#x4ED4;&#x7EC6;&#x7684;&#x6708;&#x5747;&#x56DE;&#x916C;"><a href="#&#x66F4;&#x4ED4;&#x7EC6;&#x7684;&#x6708;&#x5747;&#x56DE;&#x916C;" class="headerlink" title="&#x66F4;&#x4ED4;&#x7EC6;&#x7684;&#x6708;&#x5747;&#x56DE;&#x916C;"></a>&#x66F4;&#x4ED4;&#x7EC6;&#x7684;&#x6708;&#x5747;&#x56DE;&#x916C;</h3><p>&#x5176;&#x5B9E;Bar chart&#x5E76;&#x4E0D;&#x4F1A;&#x544A;&#x8BC9;&#x4F60;&#x6574;&#x4E2A;&#x6545;&#x4E8B;&#xFF0C;<br><br>&#x5982;&#x679C;&#x6709;&#x8FC7;&#x9AD8;&#x7684;&#x6570;&#x503C;&#x4F1A;&#x628A;&#x5E73;&#x5747;&#x503C;&#x62C9;&#x8FDC;&#xFF0C;&#x5C31;&#x4F1A;&#x6709;&#x8FC7;&#x9AD8;&#x6216;&#x8FC7;&#x4F4E;&#x7684;&#x5047;&#x8C61;<br><br>&#x63A5;&#x4E0B;&#x6765;&#x7528;boxplot&#x6765;&#x66F4;&#x4ED4;&#x7EC6;&#x7684;&#x53EF;&#x89C6;&#x5316;&#x8FD9;&#x4E2A;&#x6570;&#x636E;&#x96C6;<br><br>(&#x4EC0;&#x4E48;&#x662F; <a href="http://google.com" target="_blank" rel="noopener">Boxplot?</a>&#xFF09;?</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">KLSE_data.boxplot(column = [<span class="hljs-string">&apos;Change&apos;</span>], by = <span class="hljs-string">&apos;month&apos;</span>,</span><br><span class="line">                 showfliers = <span class="hljs-literal">True</span>, grid = <span class="hljs-literal">False</span>)</span><br><span class="line">plt.axhline(y = <span class="hljs-number">0</span>, color = <span class="hljs-string">&apos;green&apos;</span>, linestyle = <span class="hljs-string">&apos;dotted&apos;</span>)</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;matplotlib.lines.Line2D at 0x25932e0b1f0&gt;</code></pre><p><img src="/img/klsemonthlyboxplot.png" alt="png"></p><p>&#x8FD9;&#x65F6;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x66F4;&#x5B8C;&#x6574;&#x7684;&#x7EC6;&#x8282;<br><br>12&#x6708;&#x7684;&#x786E;&#x6BD4;&#x5176;&#x4ED6;&#x6708;&#x4EFD;&#x6765;&#x5F97;&#x597D;&#xFF08;&#x81F3;&#x5C11;10&#x5E74;&#x7684;&#x6570;&#x636E;&#x662F;&#x8FD9;&#x6837;&#x663E;&#x793A;&#xFF09;</p><p>&#x60CA;&#x559C;&#x7684;&#x662F;&#xFF0C;&#x9664;&#x4E86;12&#x6708;&#xFF0C;&#x6709;&#x4E9B;&#x6708;&#x4EFD;&#x4E5F;&#x770B;&#x8D77;&#x6765;&#x4E0D;&#x9519;&#xFF0C;<br><br>&#x5176;&#x4E2D;3&#xFF0C;7&#xFF0C;10&#xFF0C;12&#x6708;&#x7684;&#x56DE;&#x916C;&#x7387;&#x90FD;&#x770B;&#x8D77;&#x6765;&#x4E0D;&#x9519;</p><h3 id="&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x62FF;&#x6765;&#x4EA4;&#x6613;&#x5417;&#xFF1F;"><a href="#&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x62FF;&#x6765;&#x4EA4;&#x6613;&#x5417;&#xFF1F;" class="headerlink" title="&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x62FF;&#x6765;&#x4EA4;&#x6613;&#x5417;&#xFF1F;"></a>&#x8FD9;&#x4E9B;&#x4FE1;&#x606F;&#x53EF;&#x4EE5;&#x62FF;&#x6765;&#x4EA4;&#x6613;&#x5417;&#xFF1F;</h3><p>&#x4ECE;&#x4EE5;&#x4E0A;&#x5206;&#x6790;&#x770B;&#x6765;&#xFF0C;&#x5C0F;&#x7F16;&#x95FB;&#x5230;&#x4E00;&#x4E2A;&#x53EF;&#x80FD;&#x83B7;&#x5229;&#x7684;&#x4EA4;&#x6613;&#x673A;&#x4F1A;</p><p>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6BCF;7&#xFF0C;10&#xFF0C;12&#x6708;&#xFF08;&#x524D;3&#x540D;&#xFF09;&#x4E70;&#x5165;KLSE&#xFF0C;&#x4E0D;&#x77E5;&#x7ED3;&#x679C;&#x4F1A;&#x5982;&#x4F55;&#xFF1F;</p><p>&#x6765;&#x56DE;&#x6D4B;&#x770B;&#x770B;&#xFF01;</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">KLSE_data[<span class="hljs-string">&apos;signal&apos;</span>] = KLSE_data[<span class="hljs-string">&apos;month&apos;</span>].apply(<span class="hljs-keyword">lambda</span> x: <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> (x==<span class="hljs-number">7</span> <span class="hljs-keyword">or</span> x == <span class="hljs-number">10</span> <span class="hljs-keyword">or</span> x == <span class="hljs-number">12</span>) <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>)</span><br><span class="line">KLSE_data[<span class="hljs-string">&apos;return&apos;</span>] = KLSE_data[<span class="hljs-string">&apos;Change&apos;</span>]*KLSE_data[<span class="hljs-string">&apos;signal&apos;</span>]</span><br><span class="line"></span><br><span class="line">KLSE_data[<span class="hljs-string">&apos;Capital&apos;</span>] = <span class="hljs-number">0</span></span><br><span class="line">InitialCapital = KLSE_data[<span class="hljs-string">&apos;Close&apos;</span>].loc[<span class="hljs-number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,len(KLSE_data)):</span><br><span class="line">    <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span>:</span><br><span class="line">        KLSE_data.loc[i, <span class="hljs-string">&apos;Capital&apos;</span>] = InitialCapital</span><br><span class="line">    <span class="hljs-keyword">else</span>:</span><br><span class="line">        KLSE_data.loc[i, <span class="hljs-string">&apos;Capital&apos;</span>] = ((KLSE_data[<span class="hljs-string">&apos;return&apos;</span>].loc[i] + <span class="hljs-number">1.0</span>) </span><br><span class="line">                                   * KLSE_data[<span class="hljs-string">&apos;Capital&apos;</span>].loc[i - <span class="hljs-number">1</span>])</span><br><span class="line"></span><br><span class="line">KLSE_data.plot.line(x=<span class="hljs-string">&apos;Datetime&apos;</span>,y=[<span class="hljs-string">&apos;Capital&apos;</span>,<span class="hljs-string">&apos;Close&apos;</span>])</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>&lt;AxesSubplot:xlabel=&apos;Datetime&apos;&gt;</code></pre><p><img src="/img/klsemonthlystrategy.png" alt="png"></p><p>&#x770B;&#x8D77;&#x6765;&#x771F;&#x7684;&#x4E0D;&#x9519;&#x54DF;&#xFF0C;&#x6211;&#x4EEC;&#x201D;&#x6210;&#x529F;&#x201D;&#x7684;&#x6293;&#x4F4F;&#x4E86;&#x4E0A;&#x6DA8;&#x7684;&#x6708;&#x4EFD;&#xFF0C;&#x9003;&#x8FC7;&#x4E86;&#x4E0B;&#x8DCC;&#x7684;&#x6708;&#x4EFD;<br><br>&#x5C0F;&#x7F16;&#x7EC8;&#x4E8E;&#x4E0D;&#x7528;&#x5F53;&#x7801;&#x519C;&#x4E86;&#xFF0C;&#x8981;&#x53D1;&#x8D22;&#x4E86;&#x5417;&#xFF1F;&#xFF1F;</p><p>&#x5176;&#x5B9E;&#x4E0D;&#x662F;&#x7684;</p><ul><li>&#x7B2C;&#x4E00;&#xFF0C;&#x8FC7;&#x53BB;&#x7684;&#x56DE;&#x916C;&#x4E0D;&#x4EE3;&#x8868;&#x672A;&#x6765;&#x7684;&#x56DE;&#x916C;</li><li>&#x7B2C;&#x4E8C;&#xFF0C;&#x4EE5;&#x7EDF;&#x8BA1;&#x5B66;&#x7684;&#x89D2;&#x5EA6;&#x6765;&#x770B;&#xFF0C;&#x8FD9;&#x6570;&#x636E;&#x96C6;&#x592A;&#x5C0F;&#xFF0C;&#x800C;&#x4E14;&#x5F88;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x4E86;&#x8FC7;&#x5EA6;&#x62DF;&#x5408;(overfitting)</li></ul><p>&#x6700;&#x540E;&#xFF0C;&#x8FD9;&#x597D;&#x50CF;&#x662F;&#x7ED9;&#x51FA;&#x81EA;&#x5DF1;&#x8FC7;&#x53BB;&#x4E2D;TOTO&#x7684;&#x53F7;&#x7801;&#xFF0C;<br><br>&#x7136;&#x540E;&#x5F00;&#x8BFE;&#x7A0B;&#x6559;&#x4EBA;&#x5982;&#x4F55;&#x53D1;&#x8D22;&#xFF0C;&#x54C8;&#x54C8;&#x54C8;</p><p>&#x4ECE;&#x672A;&#x6765;&#x770B;&#x8FC7;&#x53BB;&#xFF0C;&#x4E00;&#x5207;&#x90FD;&#x770B;&#x8D77;&#x6765;&#x7406;&#x6240;&#x5F53;&#x7136;</p><p>&#x53EF;&#x662F;&#x51C6;&#x786E;&#x5730;&#x9884;&#x6D4B;&#x672A;&#x6765;&#x5374;&#x6CA1;&#x90A3;&#x4E48;&#x7B80;&#x5355;</p><h3 id="&#x7ED3;&#x8BED;"><a href="#&#x7ED3;&#x8BED;" class="headerlink" title="&#x7ED3;&#x8BED;"></a>&#x7ED3;&#x8BED;</h3><p>&#x4ECE;&#x8FC7;&#x53BB;10&#x5E74;&#x7684;&#x6570;&#x636E;&#x6765;&#x770B;&#xFF0C;12&#x6708;&#x7684;&#x786E;&#x662F;&#x6BD4;&#x8F83;&#x5BB9;&#x6613;&#x8D5A;&#x94B1;&#x7684;&#xFF0C;<br><br>&#x8FD9;&#x4E5F;&#x65E0;&#x5F62;&#x4E2D;&#x9A8C;&#x8BC1;&#x4E86;12&#x6708;&#x7684;&#x201D;&#x6A71;&#x7A97;&#x7C89;&#x9970;&#x201D;&#x6548;&#x5E94;&#xFF1F;<br><br>&#x4E5F;&#x4E0D;&#x597D;&#x8BF4;&#xFF0C;&#x5C31;&#x7B97;&#x8BE5;&#x6548;&#x5E94;&#x771F;&#x7684;&#x5B58;&#x5728;&#xFF0C;<br><br>&#x8C01;&#x4E5F;&#x4E0D;&#x6562;&#x6253;&#x5305;&#x5355;&#x8BF4;&#x672A;&#x6765;&#x6BCF;&#x4E2A;12&#x6708;&#x90FD;&#x4F1A;&#x6709;&#x201D;&#x6A71;&#x7A97;&#x7C89;&#x9970;&#x201D;&#x6548;&#x5E94;</p><p>&#x5F53;&#x4F5C;&#x662F;&#x4E2A;&#x90FD;&#x5E02;&#x4F20;&#x8BF4;&#x5427;</p><p>&#x6700;&#x540E;&#x7559;&#x4E2A;&#x6211;&#x5F88;&#x559C;&#x6B22;&#x7684;&#x4E00;&#x53E5;&#x8BDD;</p><blockquote><p>&#x201C; History doesn&#x2019;t repeat itself, but it does rhyme. &#x201C;  <br><br>&#x201C; &#x6B77;&#x53F2;&#x4E0D;&#x6703;&#x91CD;&#x6F14;&#xFF0C;&#x4F46;&#x662F;&#x5C31;&#x50CF;&#x6587;&#x7AE0;&#x7684;&#x62BC;&#x97FB;&#x4E00;&#x6A23;&#xFF0C;&#x985E;&#x4F3C;&#x7684;&#x4E8B;&#x4EF6;&#x9084;&#x662F;&#x6703;&#x518D;&#x5EA6;&#x767C;&#x751F;&#x3002;&#x201D;</p></blockquote><p><strong>-Mark Twain</strong><br><br><br><br></p><p><strong>&#x7EAF;&#x5C5E;&#x5206;&#x4EAB;&#xFF0C;&#x65E0;&#x4E70;&#x5356;&#x5EFA;&#x8BAE;</strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>We are now on Android</title>
      <link href="/we-are-now-on-android/"/>
      <url>/we-are-now-on-android/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>We are now on Google Play!</p><a id="more"></a><h2 id="What-is-this"><a href="#What-is-this" class="headerlink" title="What is this?"></a>What is this?</h2><p>For almost a year, klsequant stock backtester only remained as a web application.</p><p>Running analysis on HUGE financial data is so much easier on python, and we do not want to burden users by making a HUGE app (Storing all those data).</p><p>klsequant.com is my personal hobby project, intended to help people to make informed decision when trying to invest in stocks.</p><p>We all heard low PE, high ROE stocks are good, but how do we verify it? klsequant was made to do this for you!</p><h2 id="Technical-details"><a href="#Technical-details" class="headerlink" title="Technical details"></a>Technical details</h2><p>This app is made using Android Studio, and an API using flask so all the calculations are done on the cloud, hosted on <a href="http://www.pythonanywhere.com" target="_blank" rel="noopener">www.pythonanywhere.com</a> (highly recommend them!)</p><h2 id="How-do-I-use-this"><a href="#How-do-I-use-this" class="headerlink" title="How do I use this?"></a>How do I use this?</h2><p>If you are new here, don&#x2019;t worry, we have a blog post on <a href="https://blog.klsequant.com/Introduction-to-klsequant/" target="_blank" rel="noopener">how to use this app</a>. The Android version and web app version are the same. Just hosted on different platform.</p><h2 id="Where-can-you-download"><a href="#Where-can-you-download" class="headerlink" title="Where can you download"></a>Where can you download</h2><p><img src="/img/AppOnGooglePlay.png" alt="Google Play"></p><p>You can get it on <a href="https://play.google.com/store/apps/details?id=com.enchanteddurian.klsequant" target="_blank" rel="noopener">Google Play</a></p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我们正式登陆Android啦！</title>
      <link href="/zh-cn/we-are-now-on-android/"/>
      <url>/zh-cn/we-are-now-on-android/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x6211;&#x4EEC;&#x6B63;&#x5F0F;&#x767B;&#x9646;Android&#x5566;&#xFF01;</p><a id="more"></a><h2 id="&#x8FD9;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;"><a href="#&#x8FD9;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;" class="headerlink" title="&#x8FD9;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;"></a>&#x8FD9;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;</h2><p>klsequant &#x4ECE;&#x9762;&#x4E16;&#x81F3;&#x4ECA;&#x90FD;&#x662F;&#x4EE5;web app&#x5F62;&#x5F0F;&#x6765;&#x62DB;&#x547C;&#x5927;&#x5BB6;&#x7684;&#x3002;</p><p>&#x8981;&#x5206;&#x6790;&#x5927;&#x91CF;&#x8D22;&#x52A1;&#x6570;&#x636E;&#x7684;&#x8BDD;&#xFF0C;&#x4F7F;&#x7528;Python&#x662F;&#x8FDC;&#x8FDC;&#x6BD4;&#x5728;&#x624B;&#x673A;&#x4E0A;&#x7684;Java&#x5BB9;&#x6613;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x5728;&#x624B;&#x673A;&#x4E0A;&#x5206;&#x6790;&#x4E5F;&#x9700;&#x8981;&#x5927;&#x91CF;&#x5185;&#x5B58;&#x548C;&#x7A7A;&#x95F4;&#x6765;&#x5B58;&#x50A8;&#x6570;&#x636E;&#xFF0C;&#x6240;&#x4EE5;&#x4E00;&#x5F00;&#x59CB;&#x5E76;&#x6CA1;&#x6709;&#x63A8;&#x51FA;Android&#x7248;&#x672C;&#x7684;&#x3002;</p><p>klsequant &#x662F;&#x6211;&#x7684; hobby project&#x4E4B;&#x4E00;&#xFF0C;&#x76EE;&#x7684;&#x5728;&#x4E8E;&#x5E2E;&#x52A9;&#x5927;&#x5BB6;&#x6D4B;&#x8BD5;&#x9009;&#x80A1;&#x7B56;&#x7565;&#xFF0C;&#x5927;&#x5E08;&#x4EEC;&#x90FD;&#x8BF4;&#x597D;&#x7684;&#x4F4E;PE&#x9AD8;ROE&#xFF0C;&#x7528;klsequant&#x5C31;&#x80FD;&#x5E2E;&#x4F60;&#x627E;&#x51FA;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x7684;&#x6709;&#x6548;&#x6027;&#x3002;</p><h2 id="&#x4E00;&#x4E9B;&#x6280;&#x672F;&#x7EC6;&#x8282;"><a href="#&#x4E00;&#x4E9B;&#x6280;&#x672F;&#x7EC6;&#x8282;" class="headerlink" title="&#x4E00;&#x4E9B;&#x6280;&#x672F;&#x7EC6;&#x8282;"></a>&#x4E00;&#x4E9B;&#x6280;&#x672F;&#x7EC6;&#x8282;</h2><p>&#x8FD9;&#x7A0B;&#x5E8F;&#x662F;&#x7528;Android Studio&#x6765;&#x5199;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x4E5F;&#x7528;&#x4E86;flask API&#x6765;&#x7528;&#x6211;&#x4EEC;&#x5728;pythonanywhere&#x4E0A;&#x7684;&#x7A0B;&#x5E8F;&#x6765;&#x505A;&#x8FD0;&#x7B97;&#xFF0C;&#x6240;&#x4EE5;&#x6240;&#x6709;&#x7684;&#x8FD0;&#x7B97;&#x90FD;&#x662F;&#x5728;&#x4E91;&#x7AEF;&#x4E0A;&#x8FDB;&#x884C;&#x7684;&#x3002;</p><h2 id="&#x8FD9;&#x8981;&#x600E;&#x4E48;&#x7528;&#xFF1F;"><a href="#&#x8FD9;&#x8981;&#x600E;&#x4E48;&#x7528;&#xFF1F;" class="headerlink" title="&#x8FD9;&#x8981;&#x600E;&#x4E48;&#x7528;&#xFF1F;"></a>&#x8FD9;&#x8981;&#x600E;&#x4E48;&#x7528;&#xFF1F;</h2><p>&#x5982;&#x679C;&#x4F60;&#x521A;&#x63A5;&#x89E6;&#x8FD9;&#x4E2A;&#x7F51;&#x7AD9;&#xFF0C;&#x522B;&#x62C5;&#x5FC3;&#xFF0C;&#x6211;&#x4EEC;&#x6709;&#x4E00;&#x7BC7;<a href="https://blog.klsequant.com/zh-cn/Introduction-to-klsequant/" target="_blank" rel="noopener">&#x535A;&#x6587;</a>&#x662F;&#x6559;&#x4F60;&#x600E;&#x4E48;&#x4F7F;&#x7528;&#x7684;&#x3002;Android&#x7248;&#x548C;web&#x7248;&#x662F;&#x4E00;&#x6837;&#x4F7F;&#x7528;&#x903B;&#x8F91;&#x3002;</p><h2 id="Where-can-you-download"><a href="#Where-can-you-download" class="headerlink" title="Where can you download"></a>Where can you download</h2><p><img src="/img/AppOnGooglePlay.png" alt="Google Play"></p><p>&#x60F3;&#x8981;&#x6D4B;&#x8BD5;&#x9009;&#x80A1;&#x7B56;&#x7565;&#x7684;&#x670B;&#x53CB;&#x53EF;&#x4EE5;&#x5230; <a href="https://play.google.com/store/apps/details?id=com.enchanteddurian.klsequant" target="_blank" rel="noopener">Google Play</a> &#x53BB;&#x4E0B;&#x8F7D;&#x3002;</p></body></html>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>A Monte Carlo Simulation of your Retirement Planning 💵💵</title>
      <link href="/montecarlosimulation/"/>
      <url>/montecarlosimulation/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Monte Carlo Simulation of your Retirement Planning</p><a id="more"></a><h2 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h2><p>There are countless people who planned their retirement by saving a monthly sum and investing it into the stock market &#x1F4C8;&#x1F4C8;&#x1F4C8;.</p><p>There are also plenty of investment gurus advocating this investment strategy that is known as &#x201C;Passive Investment&#x201D;, which means you do not try to time the market, but rather you invest periodically no matter the current level of market.</p><p>I prepare my future nest egg &#x1F95A;&#x1F95A; this way too, as an engineer who won&#x2019;t be convinced without seeing the data, I am going to do some research on the practicality of this approach by using Monte Carlo Simulation.</p><h2 id="Historical-Returns-of-Dow-Jones-Index"><a href="#Historical-Returns-of-Dow-Jones-Index" class="headerlink" title="Historical Returns of Dow Jones Index"></a>Historical Returns of Dow Jones Index</h2><p>I chose Dow Jones Index as many people (including me), invests in the &#x1F1FA;&#x1F1F8; US market, where Dow Jones Index is the primary index of the US Market.</p><p>Here is some analysis on the historical returns on Dow Jones Index.</p><hr><h3 id="Reading-Data-using-Pandas-module-&#x1F43C;&#x1F43C;"><a href="#Reading-Data-using-Pandas-module-&#x1F43C;&#x1F43C;" class="headerlink" title="Reading Data using Pandas module &#x1F43C;&#x1F43C;"></a>Reading Data using Pandas module &#x1F43C;&#x1F43C;</h3><p>I am using data from 2021 to 1915.</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> norm</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="hljs-string">&apos;seaborn&apos;</span>)</span><br><span class="line"></span><br><span class="line">DJI = pd.read_csv(<span class="hljs-string">&apos;DJI.csv&apos;</span>)</span><br><span class="line">DJI.head()</span><br></pre></td></tr></tbody></table></figure><p></p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Adj. Close</th>      <th>Return</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2021</td>      <td>30,909.43</td>      <td>30,223.89</td>      <td>31,188.38</td>      <td>30,223.89</td>      <td>31,176.01</td>      <td>0.02</td>    </tr>    <tr>      <th>1</th>      <td>2020</td>      <td>26,890.67</td>      <td>28,868.80</td>      <td>30,606.48</td>      <td>18,591.93</td>      <td>30,606.48</td>      <td>0.07</td>    </tr>    <tr>      <th>2</th>      <td>2019</td>      <td>26,379.55</td>      <td>23,346.24</td>      <td>28,645.26</td>      <td>22,686.22</td>      <td>28,538.44</td>      <td>0.22</td>    </tr>    <tr>      <th>3</th>      <td>2018</td>      <td>25,046.86</td>      <td>24,824.01</td>      <td>26,828.39</td>      <td>21,792.20</td>      <td>23,327.46</td>      <td>-0.06</td>    </tr>    <tr>      <th>4</th>      <td>2017</td>      <td>21,750.20</td>      <td>19,881.76</td>      <td>24,837.51</td>      <td>19,732.40</td>      <td>24,719.22</td>      <td>0.25</td>    </tr>  </tbody></table></div><h3 id="Some-Intuition-into-the-Stats-&#x1F9EE;"><a href="#Some-Intuition-into-the-Stats-&#x1F9EE;" class="headerlink" title="Some Intuition into the Stats &#x1F9EE;"></a>Some Intuition into the Stats &#x1F9EE;</h3><p>For a normal distribution, 95% of all occurence happens within 2 standard deviations away from the mean.</p><p>Although we are not dealing with perfect normal distribution, but the distribution gives roughly the same pattern. Note that this does not include the possibility of a <strong>Black Swan</strong> (super rare, unexpected, high consequence events).</p><p><img src="/img/stdev.png" alt></p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mean = DJI[<span class="hljs-string">&apos;Return&apos;</span>].mean()</span><br><span class="line">std = DJI[<span class="hljs-string">&apos;Return&apos;</span>].std()</span><br><span class="line">lowerbound = mean - <span class="hljs-number">2</span>*std</span><br><span class="line">upperbound = mean + <span class="hljs-number">2</span>*std</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">&quot;Mean return        : {:.2f}&quot;</span>.format(mean))</span><br><span class="line">print(<span class="hljs-string">&quot;Standard Deviation : {:.2f}&quot;</span>.format(std))</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>Mean return        : 0.08Standard Deviation : 0.21</code></pre><h3 id="Distribution-of-Dow-Jones-Index-Yearly-Returns"><a href="#Distribution-of-Dow-Jones-Index-Yearly-Returns" class="headerlink" title="Distribution of Dow Jones Index Yearly Returns"></a>Distribution of Dow Jones Index Yearly Returns</h3><p>We get the mean and standard deviation on the returns. But we can visualize it better on a histogram.</p><p>The distribution of yearly historical returns of Dow Jones Index are similar to a normal distribution, with peak at middle and tails at both side.</p><p>The mean return and standard deviation are calculated.<br>Note how I plotted 2 straight lines of 2 standard deviations away from mean.</p><p>Using the below plot we can say that <strong>95% of all returns of Dow Jones are between -33% and +49%.</strong></p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line"></span><br><span class="line">plt.axvline(x = upperbound, color=<span class="hljs-string">&apos;g&apos;</span>, linestyle=<span class="hljs-string">&apos;-&apos;</span>, alpha=<span class="hljs-number">0.5</span>, label = <span class="hljs-string">&apos;mean&apos;</span>)</span><br><span class="line">plt.axvline(x = lowerbound, color=<span class="hljs-string">&apos;g&apos;</span>, linestyle=<span class="hljs-string">&apos;-&apos;</span>, alpha=<span class="hljs-number">0.5</span>, label = <span class="hljs-string">&apos;mean&apos;</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#---------Histogram------------------------------------------------------------------------------------</span></span><br><span class="line">title = str(<span class="hljs-string">&apos;95% of Returns are in {:.2f}&apos;</span>.format(<span class="hljs-number">1</span> + lowerbound) + <span class="hljs-string">&apos; and {:.2f}&apos;</span>.format(<span class="hljs-number">1</span> + upperbound))</span><br><span class="line">DJI[<span class="hljs-string">&apos;Return&apos;</span>].hist(bins=<span class="hljs-number">15</span>, ax = ax1)</span><br><span class="line">ax1.set_ylabel(<span class="hljs-string">&apos;Probability&apos;</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#---------Fitting the histogram with curve-------------------------------------------------------------</span></span><br><span class="line">mu, std = norm.fit(DJI[<span class="hljs-string">&apos;Return&apos;</span>])</span><br><span class="line">xmin, xmax = plt.xlim()</span><br><span class="line">x = np.linspace(xmin, xmax, <span class="hljs-number">100</span>)</span><br><span class="line">p = norm.pdf(x, mu, std)</span><br><span class="line">ax2.plot(x, p, <span class="hljs-string">&apos;b&apos;</span>, linewidth=<span class="hljs-number">2</span>, alpha = <span class="hljs-number">0.5</span>)</span><br><span class="line">ax2.grid(<span class="hljs-literal">False</span>)</span><br><span class="line">ax2.set_ylabel(<span class="hljs-string">&apos;Distribution&apos;</span>, color=<span class="hljs-string">&apos;b&apos;</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#--------Show the plot</span></span><br><span class="line">plt.title(title)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/img/montecarlo_distribution1.png" alt></p><h3 id="Can-YOU-invest-your-way-to-a-Millionaire-&#x1F4B0;&#x1F4B0;&#x1F4B0;"><a href="#Can-YOU-invest-your-way-to-a-Millionaire-&#x1F4B0;&#x1F4B0;&#x1F4B0;" class="headerlink" title="Can YOU invest your way to a Millionaire? &#x1F4B0;&#x1F4B0;&#x1F4B0;"></a>Can <em>YOU</em> invest your way to a Millionaire? &#x1F4B0;&#x1F4B0;&#x1F4B0;</h3><p>Let&#x2019;s assume an individual who invests RM5000 as initial investment and for every month he invests RM400 more into his portfolio.</p><p>Using this plan he will end up with <strong>RM168,200</strong></p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#-----Constants-----------------------</span></span><br><span class="line">INITIAL_INVESTMENT = <span class="hljs-number">5000</span></span><br><span class="line">MONTHLY_TOPUP = <span class="hljs-number">400</span></span><br><span class="line">YEARLY = MONTHLY_TOPUP * <span class="hljs-number">12</span></span><br><span class="line"><span class="hljs-comment"># ------------------------------------</span></span><br><span class="line"></span><br><span class="line">saving = [INITIAL_INVESTMENT]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">35</span>):</span><br><span class="line">    saving.append((saving[i - <span class="hljs-number">1</span>]) + YEARLY)</span><br><span class="line"></span><br><span class="line">capital = pd.DataFrame(saving, columns=[<span class="hljs-string">&apos;Saving&apos;</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#------Plotting the savings growth------</span></span><br><span class="line">capital.plot(y=<span class="hljs-string">&apos;Saving&apos;</span>, color=<span class="hljs-string">&apos;limegreen&apos;</span>, alpha = <span class="hljs-number">1</span>)</span><br><span class="line">print(<span class="hljs-string">&apos;Final value : {:.2f}&apos;</span>.format(capital[<span class="hljs-string">&apos;Saving&apos;</span>].iloc[ <span class="hljs-number">-1</span>]))</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>Final value : 168200.00</code></pre><p><img src="/img/montecarlo_distribution2.png" alt></p><h3 id="Monte-Carlo-Simulation"><a href="#Monte-Carlo-Simulation" class="headerlink" title="Monte Carlo Simulation"></a>Monte Carlo Simulation</h3><p><strong>RM168,200</strong> might be little after 30 plus years, how about investing along the way?</p><p>Stock market returns are uncertain, but prior analysis shown that we can expect 95% of the return to be between -33% and +49%.</p><p>I am going to use Monte Carlo simulation to simulate 50 different scenarios,<br>where the returns are generated randomly within -33% and +49%.</p><p>It&#x2019;s like Dr. Strange seeing 50 possibilites of the saving journey.</p><p><img src="/img/meme.jpg" alt></p><p>At the end, I will get the median of all the scenarios and use it as reference.</p><p>Why median? You might ask.</p><p>Mean is too sensitive to overly big values, so I used median to get a realistic view.</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#-----Using upperbound and lowerbound of historical returns-------</span></span><br><span class="line">RAND_TOP = <span class="hljs-number">149</span></span><br><span class="line">RAND_BOT = <span class="hljs-number">68</span></span><br><span class="line">YEAR = <span class="hljs-number">34</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#------Generate 50 simulations------------------------------------</span></span><br><span class="line"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>):</span><br><span class="line">    capital[str(<span class="hljs-string">&apos;Capital&apos;</span> + str(k))] = capital[<span class="hljs-string">&apos;Saving&apos;</span>]</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(capital)):</span><br><span class="line">        capital.loc[i, str(<span class="hljs-string">&apos;Capital&apos;</span> + str(k))] = (capital.loc[i - <span class="hljs-number">1</span>, str(<span class="hljs-string">&apos;Capital&apos;</span> + str(k))] + YEARLY) * float(</span><br><span class="line">            randrange(RAND_BOT, RAND_TOP) / <span class="hljs-number">100</span>)</span><br><span class="line"></span><br><span class="line">capital[<span class="hljs-string">&apos;Mean&apos;</span>] = capital.median(axis=<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))</span><br><span class="line">fig.suptitle((<span class="hljs-string">&apos;Average Return after &apos;</span> + str(YEAR) + <span class="hljs-string">&apos; Years is %.2f&apos;</span> % capital[<span class="hljs-string">&apos;Mean&apos;</span>][capital.index[YEAR]]))</span><br><span class="line">ax = fig.add_subplot(<span class="hljs-number">121</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="hljs-number">122</span>)</span><br><span class="line"></span><br><span class="line">capital.plot(legend=<span class="hljs-literal">None</span>,alpha=<span class="hljs-number">0.3</span>, title = <span class="hljs-string">&apos;Monte Carlo Simulations&apos;</span>, xlabel = <span class="hljs-string">&apos;Years&apos;</span>, ylabel = <span class="hljs-string">&apos;RM&apos;</span>, ax = ax)</span><br><span class="line">capital.iloc[<span class="hljs-number">-1</span>].hist(bins=<span class="hljs-number">20</span>, orientation=<span class="hljs-string">&quot;horizontal&quot;</span>, color=<span class="hljs-string">&quot;pink&quot;</span>, alpha=<span class="hljs-number">0.5</span>,ax = ax)</span><br><span class="line"></span><br><span class="line">capital.plot(y=<span class="hljs-string">&apos;Saving&apos;</span>, color = <span class="hljs-string">&apos;tomato&apos;</span>, alpha = <span class="hljs-number">1</span>, label=<span class="hljs-string">&quot;Savings&quot;</span>, xlabel = <span class="hljs-string">&apos;Years&apos;</span>, ylabel = <span class="hljs-string">&apos;RM&apos;</span>, title = <span class="hljs-string">&apos;Median of simulations&apos;</span>, ax = ax2)</span><br><span class="line">capital.plot(y=<span class="hljs-string">&apos;Mean&apos;</span>, color=<span class="hljs-string">&apos;limegreen&apos;</span>, alpha = <span class="hljs-number">1</span>, ax = ax2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/img/montecarlo_distribution3.png" alt></p><h3 id="Key-Takeaways-&#x26A1;&#x26A1;"><a href="#Key-Takeaways-&#x26A1;&#x26A1;" class="headerlink" title="Key Takeaways &#x26A1;&#x26A1;"></a>Key Takeaways &#x26A1;&#x26A1;</h3><p>Every time you run this notebook the outcome will be different (It&#x2019;s a simulation!)</p><p>Maybe 2 in 50 lifetimes you will be fortunate enough to have a superbull market that can make you a millionaire using this plan.</p><p>But I observed that the final value converges toward <strong>RM500,000.</strong></p><p>If you wanted to be a millionaire by the time you retire, you might need to save more. (Or get more luck)</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Monte Carlo </tag>
            
            <tag> Investment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用蒙特卡罗模拟法来看你的退休计划 💵💵</title>
      <link href="/zh-cn/montecarlosimulation/"/>
      <url>/zh-cn/montecarlosimulation/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x7528;&#x8499;&#x7279;&#x5361;&#x7F57;&#x6A21;&#x62DF;&#x6CD5;&#x6765;&#x770B;&#x4F60;&#x7684;&#x9000;&#x4F11;&#x8BA1;&#x5212;</p><a id="more"></a><h2 id="&#x80CC;&#x666F;"><a href="#&#x80CC;&#x666F;" class="headerlink" title="&#x80CC;&#x666F;"></a>&#x80CC;&#x666F;</h2><p>&#x6709;&#x975E;&#x5E38;&#x591A;&#x7684;&#x4EBA;&#x5BF9;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x7B56;&#x5212;&#x4ED6;&#x4EEC;&#x7684;&#x9000;&#x4F11;&#x8BA1;&#x5212;&#xFF0C;&#x5148;&#x6295;&#x8D44;&#x4E00;&#x7B14;&#x94B1;&#xFF0C;&#x518D;&#x6BCF;&#x6708;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#xFF0C;&#x4E3B;&#x8981;&#x6295;&#x8D44;&#x4E8E;&#x80A1;&#x7968;&#x5E02;&#x573A; &#x1F4C8;&#x1F4C8;&#x1F4C8;.</p><p>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4E5F;&#x88AB;&#x8BB8;&#x591A;&#x6295;&#x8D44;&#x5927;&#x4F6C;&#x6240;&#x63A8;&#x5D07;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x6240;&#x8C13;&#x7684;&#x201C;&#x88AB;&#x52A8;&#x6295;&#x8D44;&#x201D;&#x3002;&#x987E;&#x540D;&#x601D;&#x4E49;&#x5C31;&#x662F;&#x4E0D;&#x8981;&#x53BB;&#x731C;&#x6D4B;&#x5E02;&#x573A;&#x9AD8;&#x4F4E;&#x4F4D;&#xFF0C;&#x6709;&#x51E0;&#x7387;&#x5730;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x7684;&#x6295;&#x8D44;&#x4E8E;&#x80A1;&#x7968;&#x5E02;&#x573A;&#x3002;</p><p>&#x6211;&#x4E2A;&#x4EBA;&#x4E5F;&#x662F;&#x5B9E;&#x884C;&#x8FD9;&#x4E2A;&#x505A;&#x6CD5; &#x1F95A;&#x1F95A;&#x3002;&#x8EAB;&#x4E3A;&#x4E00;&#x540D;&#x5DE5;&#x7A0B;&#x5E08;&#xFF0C;&#x505A;&#x4EFB;&#x4F55;&#x51B3;&#x5B9A;&#x524D;&#x6211;&#x90FD;&#x559C;&#x6B22;&#x53C2;&#x8003;&#x771F;&#x5B9E;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6240;&#x4EE5;&#x51B3;&#x5B9A;&#x7528;&#x8499;&#x7279;&#x5361;&#x6D1B;&#x6A21;&#x62DF;&#x6CD5;&#x7684;&#x89D2;&#x5EA6;&#x6765;&#x5206;&#x6790;&#x8FD9;&#x4E2A;&#x505A;&#x6CD5;&#x3002;</p><h2 id="Dow-Jones-&#x6307;&#x6570;&#x7684;&#x5386;&#x53F2;&#x56DE;&#x916C;"><a href="#Dow-Jones-&#x6307;&#x6570;&#x7684;&#x5386;&#x53F2;&#x56DE;&#x916C;" class="headerlink" title="Dow Jones &#x6307;&#x6570;&#x7684;&#x5386;&#x53F2;&#x56DE;&#x916C;"></a>Dow Jones &#x6307;&#x6570;&#x7684;&#x5386;&#x53F2;&#x56DE;&#x916C;</h2><p>&#x6211;&#x9009;&#x4E86;Dow Jones&#x6307;&#x6570;&#x6765;&#x505A;&#x5206;&#x6790;&#xFF0C;&#x56E0;&#x4E3A;&#x672C;&#x4EBA;&#x4E3B;&#x8981;&#x6295;&#x8D44;&#x1F1FA;&#x1F1F8; &#x1F1FA;&#x1F1F8;&#x7F8E;&#x56FD;&#x5E02;&#x573A;&#xFF0C;Dow Jones&#x662F;&#x7F8E;&#x56FD;&#x80A1;&#x7968;&#x5E02;&#x573A;&#x7684;&#x4E3B;&#x8981;&#x6307;&#x6570;&#x3002;</p><p>&#x8BDD;&#x4E0D;&#x591A;&#x8BF4;&#xFF0C;&#x5148;&#x6765;&#x70B9;&#x5206;&#x6790;&#x3002;</p><hr><h3 id="&#x7528;-Pandas-&#x6A21;&#x5757;&#x6765;&#x8BFB;&#x53D6;&#x6570;&#x636E;-&#x1F43C;&#x1F43C;"><a href="#&#x7528;-Pandas-&#x6A21;&#x5757;&#x6765;&#x8BFB;&#x53D6;&#x6570;&#x636E;-&#x1F43C;&#x1F43C;" class="headerlink" title="&#x7528; Pandas &#x6A21;&#x5757;&#x6765;&#x8BFB;&#x53D6;&#x6570;&#x636E; &#x1F43C;&#x1F43C;"></a>&#x7528; Pandas &#x6A21;&#x5757;&#x6765;&#x8BFB;&#x53D6;&#x6570;&#x636E; &#x1F43C;&#x1F43C;</h3><p>&#x6211;&#x7528;&#x7684;&#x662F;1915&#x5E74;&#x5230;2021&#x5E74;&#x7684;&#x6570;&#x636E;&#x3002;</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd</span><br><span class="line"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np</span><br><span class="line"><span class="hljs-keyword">from</span> scipy.stats <span class="hljs-keyword">import</span> norm</span><br><span class="line"><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt</span><br><span class="line">plt.style.use(<span class="hljs-string">&apos;seaborn&apos;</span>)</span><br><span class="line"></span><br><span class="line">DJI = pd.read_csv(<span class="hljs-string">&apos;DJI.csv&apos;</span>)</span><br><span class="line">DJI.head()</span><br></pre></td></tr></tbody></table></figure><p></p><div><style scoped>    .dataframe tbody tr th:only-of-type {        vertical-align: middle;    }<pre><code>.dataframe tbody tr th {    vertical-align: top;}.dataframe thead th {    text-align: right;}</code></pre><p></style><p></p><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Year</th>      <th>Open</th>      <th>High</th>      <th>Low</th>      <th>Close</th>      <th>Adj. Close</th>      <th>Return</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>2021</td>      <td>30,909.43</td>      <td>30,223.89</td>      <td>31,188.38</td>      <td>30,223.89</td>      <td>31,176.01</td>      <td>0.02</td>    </tr>    <tr>      <th>1</th>      <td>2020</td>      <td>26,890.67</td>      <td>28,868.80</td>      <td>30,606.48</td>      <td>18,591.93</td>      <td>30,606.48</td>      <td>0.07</td>    </tr>    <tr>      <th>2</th>      <td>2019</td>      <td>26,379.55</td>      <td>23,346.24</td>      <td>28,645.26</td>      <td>22,686.22</td>      <td>28,538.44</td>      <td>0.22</td>    </tr>    <tr>      <th>3</th>      <td>2018</td>      <td>25,046.86</td>      <td>24,824.01</td>      <td>26,828.39</td>      <td>21,792.20</td>      <td>23,327.46</td>      <td>-0.06</td>    </tr>    <tr>      <th>4</th>      <td>2017</td>      <td>21,750.20</td>      <td>19,881.76</td>      <td>24,837.51</td>      <td>19,732.40</td>      <td>24,719.22</td>      <td>0.25</td>    </tr>  </tbody></table></div><h3 id="&#x4E00;&#x4E9B;&#x7EDF;&#x8BA1;&#x5B66;&#x7684;&#x5206;&#x6790;-&#x1F9EE;"><a href="#&#x4E00;&#x4E9B;&#x7EDF;&#x8BA1;&#x5B66;&#x7684;&#x5206;&#x6790;-&#x1F9EE;" class="headerlink" title="&#x4E00;&#x4E9B;&#x7EDF;&#x8BA1;&#x5B66;&#x7684;&#x5206;&#x6790; &#x1F9EE;"></a>&#x4E00;&#x4E9B;&#x7EDF;&#x8BA1;&#x5B66;&#x7684;&#x5206;&#x6790; &#x1F9EE;</h3><p>&#x5BF9;&#x4E8E;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x6765;&#x8BF4;&#xFF0C;95%&#x7684;&#x6570;&#x636E;&#x90FD;&#x4F1A;&#x5728;2&#x4E2A;&#x6807;&#x51C6;&#x5DEE;&#x5185;&#x3002;</p><p>&#x867D;&#x7136;Dow Jones&#x7684;&#x5386;&#x53F2;&#x56DE;&#x916C;&#x4E0D;&#x662F;&#x5B8C;&#x7F8E;&#x7684;&#x6B63;&#x6001;&#x5206;&#x5E03;&#xFF0C;&#x53EF;&#x662F;&#x8FD8;&#x662F;&#x53EF;&#x4EE5;&#x63A5;&#x53D7;&#x7684;&#x3002;</p><p>&#x6B63;&#x6001;&#x5206;&#x5E03;&#x7684;&#x5F31;&#x70B9;&#x5C31;&#x662F;&#x5FFD;&#x7565;&#x7684;<strong>&#x9ED1;&#x5929;&#x9E45;</strong>&#x7684;&#x5B58;&#x5728;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x591A;&#x52A0;&#x8BA8;&#x8BBA;&#x9ED1;&#x5929;&#x9E45;&#x4E8B;&#x4EF6;&#x4E86;&#x3002;</p><p><img src="/img/stdev.png" alt></p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mean = DJI[<span class="hljs-string">&apos;Return&apos;</span>].mean()</span><br><span class="line">std = DJI[<span class="hljs-string">&apos;Return&apos;</span>].std()</span><br><span class="line">lowerbound = mean - <span class="hljs-number">2</span>*std</span><br><span class="line">upperbound = mean + <span class="hljs-number">2</span>*std</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">&quot;Mean return        : {:.2f}&quot;</span>.format(mean))</span><br><span class="line">print(<span class="hljs-string">&quot;Standard Deviation : {:.2f}&quot;</span>.format(std))</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>Mean return        : 0.08Standard Deviation : 0.21</code></pre><h3 id="Dow-Jones-&#x5386;&#x53F2;&#x56DE;&#x916C;&#x7684;&#x5206;&#x5E03;"><a href="#Dow-Jones-&#x5386;&#x53F2;&#x56DE;&#x916C;&#x7684;&#x5206;&#x5E03;" class="headerlink" title="Dow Jones &#x5386;&#x53F2;&#x56DE;&#x916C;&#x7684;&#x5206;&#x5E03;"></a>Dow Jones &#x5386;&#x53F2;&#x56DE;&#x916C;&#x7684;&#x5206;&#x5E03;</h3><p>&#x4ECE;&#x6570;&#x636E;&#x6211;&#x4EEC;&#x7B97;&#x5F97;&#x5E73;&#x5747;&#x6570;(mean)&#x4E8E;&#x6807;&#x51C6;&#x5DEE;(standard deviation)&#x3002;&#x4E3A;&#x4E86;&#x66F4;&#x597D;&#x7684;&#x53EF;&#x89C6;&#x5316;&#xFF0C;&#x628A;&#x5B83;&#x753B;&#x5728;&#x56FE;&#x8868;&#x4E0A;&#x3002;</p><p>&#x4ECE;&#x56FE;&#x8868;&#x6765;&#x770B;&#xFF0C;&#x5B83;&#x7684;&#x5206;&#x5E03;&#x662F;&#x63A5;&#x8FD1;&#x4E8E;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x7684;&#x3002;<strong>95% &#x7684;&#x56DE;&#x916C;&#x90FD;&#x5728; -33% &#x81F3; +49% &#x5185;&#x3002;</strong></p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line">ax2 = ax1.twinx()</span><br><span class="line"></span><br><span class="line">plt.axvline(x = upperbound, color=<span class="hljs-string">&apos;g&apos;</span>, linestyle=<span class="hljs-string">&apos;-&apos;</span>, alpha=<span class="hljs-number">0.5</span>, label = <span class="hljs-string">&apos;mean&apos;</span>)</span><br><span class="line">plt.axvline(x = lowerbound, color=<span class="hljs-string">&apos;g&apos;</span>, linestyle=<span class="hljs-string">&apos;-&apos;</span>, alpha=<span class="hljs-number">0.5</span>, label = <span class="hljs-string">&apos;mean&apos;</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#---------Histogram------------------------------------------------------------------------------------</span></span><br><span class="line">title = str(<span class="hljs-string">&apos;95% of Returns are in {:.2f}&apos;</span>.format(<span class="hljs-number">1</span> + lowerbound) + <span class="hljs-string">&apos; and {:.2f}&apos;</span>.format(<span class="hljs-number">1</span> + upperbound))</span><br><span class="line">DJI[<span class="hljs-string">&apos;Return&apos;</span>].hist(bins=<span class="hljs-number">15</span>, ax = ax1)</span><br><span class="line">ax1.set_ylabel(<span class="hljs-string">&apos;Probability&apos;</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#---------Fitting the histogram with curve-------------------------------------------------------------</span></span><br><span class="line">mu, std = norm.fit(DJI[<span class="hljs-string">&apos;Return&apos;</span>])</span><br><span class="line">xmin, xmax = plt.xlim()</span><br><span class="line">x = np.linspace(xmin, xmax, <span class="hljs-number">100</span>)</span><br><span class="line">p = norm.pdf(x, mu, std)</span><br><span class="line">ax2.plot(x, p, <span class="hljs-string">&apos;b&apos;</span>, linewidth=<span class="hljs-number">2</span>, alpha = <span class="hljs-number">0.5</span>)</span><br><span class="line">ax2.grid(<span class="hljs-literal">False</span>)</span><br><span class="line">ax2.set_ylabel(<span class="hljs-string">&apos;Distribution&apos;</span>, color=<span class="hljs-string">&apos;b&apos;</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#--------Show the plot</span></span><br><span class="line">plt.title(title)</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/img/montecarlo_distribution1.png" alt></p><h3 id="&#x8003;&#x5B58;&#x94B1;&#x6295;&#x8D44;&#x80FD;&#x6210;&#x4E3A;&#x767E;&#x4E07;&#x5BCC;&#x7FC1;&#x5417;&#xFF1F;-&#x1F4B0;&#x1F4B0;&#x1F4B0;"><a href="#&#x8003;&#x5B58;&#x94B1;&#x6295;&#x8D44;&#x80FD;&#x6210;&#x4E3A;&#x767E;&#x4E07;&#x5BCC;&#x7FC1;&#x5417;&#xFF1F;-&#x1F4B0;&#x1F4B0;&#x1F4B0;" class="headerlink" title="&#x8003;&#x5B58;&#x94B1;&#x6295;&#x8D44;&#x80FD;&#x6210;&#x4E3A;&#x767E;&#x4E07;&#x5BCC;&#x7FC1;&#x5417;&#xFF1F; &#x1F4B0;&#x1F4B0;&#x1F4B0;"></a>&#x8003;&#x5B58;&#x94B1;&#x6295;&#x8D44;&#x80FD;&#x6210;&#x4E3A;&#x767E;&#x4E07;&#x5BCC;&#x7FC1;&#x5417;&#xFF1F; &#x1F4B0;&#x1F4B0;&#x1F4B0;</h3><p>&#x6211;&#x4EEC;&#x6765;&#x505A;&#x4E2A;&#x5206;&#x6790;&#xFF0C;&#x5047;&#x8BBE;&#x4E00;&#x4E2A;&#x4EBA;&#x521D;&#x59CB;&#x6295;&#x8D44;RM5000, &#x5E76;&#x6BCF;&#x6708;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;RM400&#x3002;</p><p>&#x9760;&#x5B58;&#x94B1;&#x7684;&#x8BDD;&#x4ED6;&#x4F1A;&#x5B58;&#x5230;<strong>RM168,200</strong>.</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">#-----Constants-----------------------</span></span><br><span class="line">INITIAL_INVESTMENT = <span class="hljs-number">5000</span></span><br><span class="line">MONTHLY_TOPUP = <span class="hljs-number">400</span></span><br><span class="line">YEARLY = MONTHLY_TOPUP * <span class="hljs-number">12</span></span><br><span class="line"><span class="hljs-comment"># ------------------------------------</span></span><br><span class="line"></span><br><span class="line">saving = [INITIAL_INVESTMENT]</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">35</span>):</span><br><span class="line">    saving.append((saving[i - <span class="hljs-number">1</span>]) + YEARLY)</span><br><span class="line"></span><br><span class="line">capital = pd.DataFrame(saving, columns=[<span class="hljs-string">&apos;Saving&apos;</span>])</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#------Plotting the savings growth------</span></span><br><span class="line">capital.plot(y=<span class="hljs-string">&apos;Saving&apos;</span>, color=<span class="hljs-string">&apos;limegreen&apos;</span>, alpha = <span class="hljs-number">1</span>)</span><br><span class="line">print(<span class="hljs-string">&apos;Final value : {:.2f}&apos;</span>.format(capital[<span class="hljs-string">&apos;Saving&apos;</span>].iloc[ <span class="hljs-number">-1</span>]))</span><br></pre></td></tr></tbody></table></figure><p></p><pre><code>Final value : 168200.00</code></pre><p><img src="/img/montecarlo_distribution2.png" alt></p><h3 id="&#x8499;&#x7279;&#x5361;&#x7F57;&#x6A21;&#x62DF;&#x6CD5;"><a href="#&#x8499;&#x7279;&#x5361;&#x7F57;&#x6A21;&#x62DF;&#x6CD5;" class="headerlink" title="&#x8499;&#x7279;&#x5361;&#x7F57;&#x6A21;&#x62DF;&#x6CD5;"></a>&#x8499;&#x7279;&#x5361;&#x7F57;&#x6A21;&#x62DF;&#x6CD5;</h3><p><strong>RM168,200</strong> &#x5728;30&#x5E74;&#x540E;&#x53EF;&#x80FD;&#x6709;&#x70B9;&#x5C11;&#xFF0C;&#x5982;&#x679C;&#x52A0;&#x4E0A;&#x6295;&#x8D44;&#x5462;&#xFF1F;</p><p>&#x80A1;&#x7968;&#x5E02;&#x573A;&#x7684;&#x56DE;&#x916C;&#x6CE2;&#x52A8;&#x5927;&#x800C;&#x4E14;&#x4E0D;&#x786E;&#x5B9A;&#x6027;&#x9AD8;&#xFF0C;&#x4E0D;&#x8FC7;&#x5BF9;&#x4E8E;&#x521A;&#x521A;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x6709;&#x4E86;&#x4E00;&#x5B9A;&#x7684;&#x5206;&#x6790;&#xFF0C;<strong>95% &#x7684;&#x56DE;&#x916C;&#x662F;&#x5728; -33% &#x81F3; +49% &#x5185;&#x7684;&#x3002;</strong></p><p>&#x5229;&#x7528;&#x8499;&#x7279;&#x5361;&#x7F57;&#x6A21;&#x62DF;&#x6CD5;&#xFF0C;&#x6211;&#x6A21;&#x62DF;&#x4E86;50&#x6B21;&#x4E0D;&#x540C;&#x7684;&#x7ED3;&#x679C;&#x3002;</p><p>&#x8FD9;&#x5C31;&#x50CF;&#x662F;<strong>&#x5947;&#x7279;&#x535A;&#x58EB;</strong>&#x5728;<strong>&#x590D;3</strong>&#x91CC;&#x505A;&#x7684;&#x4E8B;&#x4E00;&#x6837;, &#x5DEE;&#x522B;&#x5728;&#x4E8E;&#x6211;&#x7528;&#x7A0B;&#x5E8F;&#x6765;&#x6A21;&#x62DF;&#x3002;</p><p><img src="/img/meme.jpg" alt></p><p>&#x6700;&#x540E;&#x6211;&#x4F1A;&#x7528;&#x5404;&#x4E2A;&#x7ED3;&#x679C;&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#x6765;&#x505A;&#x6BD4;&#x8F83;&#x3002;&#x4E2D;&#x4F4D;&#x6570;&#x6BD4;&#x5E73;&#x5747;&#x6570;&#x66F4;&#x80FD;&#x8868;&#x73B0;&#x51FA;&#x771F;&#x5B9E;&#x7684;&#x8868;&#x73B0;&#xFF0C;&#x56E0;&#x4E3A;&#x4E2D;&#x4F4D;&#x6570;&#x8F83;&#x4E0D;&#x53D7;&#x6781;&#x7AEF;&#x6570;&#x4F4D;&#x5F71;&#x54CD;&#x3002;</p><p></p><figure class="highlight python hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#-----Using upperbound and lowerbound of historical returns-------</span></span><br><span class="line">RAND_TOP = <span class="hljs-number">149</span></span><br><span class="line">RAND_BOT = <span class="hljs-number">68</span></span><br><span class="line">YEAR = <span class="hljs-number">34</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">#------Generate 50 simulations------------------------------------</span></span><br><span class="line"><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>):</span><br><span class="line">    capital[str(<span class="hljs-string">&apos;Capital&apos;</span> + str(k))] = capital[<span class="hljs-string">&apos;Saving&apos;</span>]</span><br><span class="line">    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, len(capital)):</span><br><span class="line">        capital.loc[i, str(<span class="hljs-string">&apos;Capital&apos;</span> + str(k))] = (capital.loc[i - <span class="hljs-number">1</span>, str(<span class="hljs-string">&apos;Capital&apos;</span> + str(k))] + YEARLY) * float(</span><br><span class="line">            randrange(RAND_BOT, RAND_TOP) / <span class="hljs-number">100</span>)</span><br><span class="line"></span><br><span class="line">capital[<span class="hljs-string">&apos;Mean&apos;</span>] = capital.median(axis=<span class="hljs-number">1</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="hljs-number">12</span>, <span class="hljs-number">6</span>))</span><br><span class="line">fig.suptitle((<span class="hljs-string">&apos;Average Return after &apos;</span> + str(YEAR) + <span class="hljs-string">&apos; Years is %.2f&apos;</span> % capital[<span class="hljs-string">&apos;Mean&apos;</span>][capital.index[YEAR]]))</span><br><span class="line">ax = fig.add_subplot(<span class="hljs-number">121</span>)</span><br><span class="line">ax2 = fig.add_subplot(<span class="hljs-number">122</span>)</span><br><span class="line"></span><br><span class="line">capital.plot(legend=<span class="hljs-literal">None</span>,alpha=<span class="hljs-number">0.3</span>, title = <span class="hljs-string">&apos;Monte Carlo Simulations&apos;</span>, xlabel = <span class="hljs-string">&apos;Years&apos;</span>, ylabel = <span class="hljs-string">&apos;RM&apos;</span>, ax = ax)</span><br><span class="line">capital.iloc[<span class="hljs-number">-1</span>].hist(bins=<span class="hljs-number">20</span>, orientation=<span class="hljs-string">&quot;horizontal&quot;</span>, color=<span class="hljs-string">&quot;pink&quot;</span>, alpha=<span class="hljs-number">0.5</span>,ax = ax)</span><br><span class="line"></span><br><span class="line">capital.plot(y=<span class="hljs-string">&apos;Saving&apos;</span>, color = <span class="hljs-string">&apos;tomato&apos;</span>, alpha = <span class="hljs-number">1</span>, label=<span class="hljs-string">&quot;Savings&quot;</span>, xlabel = <span class="hljs-string">&apos;Years&apos;</span>, ylabel = <span class="hljs-string">&apos;RM&apos;</span>, title = <span class="hljs-string">&apos;Median of simulations&apos;</span>, ax = ax2)</span><br><span class="line">capital.plot(y=<span class="hljs-string">&apos;Mean&apos;</span>, color=<span class="hljs-string">&apos;limegreen&apos;</span>, alpha = <span class="hljs-number">1</span>, ax = ax2)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><p><img src="/img/montecarlo_distribution3.png" alt></p><h3 id="&#x7B14;&#x8BB0;-&#x26A1;&#x26A1;"><a href="#&#x7B14;&#x8BB0;-&#x26A1;&#x26A1;" class="headerlink" title="&#x7B14;&#x8BB0; &#x26A1;&#x26A1;"></a>&#x7B14;&#x8BB0; &#x26A1;&#x26A1;</h3><p>&#x8FD9;&#x6A21;&#x62DF;&#x6BCF;&#x6B21;&#x8FD0;&#x884C;&#x90FD;&#x4F1A;&#x4EA7;&#x751F;&#x4E0D;&#x540C;&#x7684;&#x7B54;&#x6848;&#xFF0C;&#x56E0;&#x4E3A;&#x6709;&#x7A0B;&#x5E8F;&#x91CC;&#x52A0;&#x4E86;&#x968F;&#x673A;&#x7684;&#x56E0;&#x7D20;&#x3002;</p><p>&#x6216;&#x8BB8;&#x5728;&#x51E0;&#x4E2A;&#x6A21;&#x62DF;&#x4E2D;&#x4F60;&#x4F1A;&#x6210;&#x4E3A;&#x767E;&#x4E07;&#x5BCC;&#x7FC1;&#xFF0C;&#x6839;&#x636E;&#x4E2D;&#x4F4D;&#x6570;&#x6765;&#x770B;&#xFF0C;&#x6700;&#x53EF;&#x80FD;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x4F60;&#x5C06;&#x5F97;&#x5230; <strong>RM500,000</strong> &#x7684;&#x51C0;&#x503C;&#x3002;&#xFF08;&#x4E5F;&#x4E0D;&#x9519;?)</p><p>&#x60F3;&#x8981;&#x6210;&#x4E3A;&#x767E;&#x4E07;&#x5BCC;&#x7FC1;&#xFF0C;&#x8FCE;&#x5A36;&#x767D;&#x5BCC;&#x7F8E;&#xFF0C;&#x8D70;&#x4E0A;&#x4EBA;&#x751F;&#x5DC5;&#x5CF0;&#x7684;&#x8BDD;&#xFF0C;&#x770B;&#x6765;&#x4F60;&#x5F97;&#x66F4;&#x52AA;&#x529B;&#x5B58;&#x94B1;&#x6295;&#x8D44;&#x4E86;&#x3002;</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Monte Carlo </tag>
            
            <tag> Investment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Portfolio Construction. Full Equity, Full Bond or 50/50?</title>
      <link href="/portfolio-construction-using-rebalancing/"/>
      <url>/portfolio-construction-using-rebalancing/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>How do you achieve capital growth while controlling your risk?</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>People often equates return and risk, giving statements like &#x201C;high risk high return&#x201D;. <strong>If high risk does secure you high return, is the investment considered high risk anymore?</strong></p><p>I find Howard Marks return vs risk graph a nice way to visualize risk.</p><p>According to him, the higher the risk, the more variability your return becomes.</p><p><img src="/img/risk-return.png" alt="Return vs risk visualized"></p><p>Different asset classes have their inherent risk.</p><p><strong>Equity</strong> asset often relates to people as higher risk, because sometimes it delivers higher return and sometimes lower return compared to other asset classes, with ranges in (-20 to 50% We are talking about overall equity market here).<br><strong>A lot of factors can play with an equity&#x2019;s risk, market condition, company earnings, new competitor and etc.</strong></p><p><strong>Bond</strong> asset is often considered as low risk asset, because of the return of the asset is fixed (sometimes also called fixed income asset), it has lesser variability in their returns (3 to 8%).<br><strong>Bond on the other hand, the main risk is the company going bankrupt, defaulting on the bond you are holding.</strong></p><h2 id="John-Bogle&#x2019;s-strategy"><a href="#John-Bogle&#x2019;s-strategy" class="headerlink" title="John Bogle&#x2019;s strategy"></a>John Bogle&#x2019;s strategy</h2><p>John Bogle the founder of The Vanguard Group, an american fund management giant.</p><p>His investment strategy is to allocate equity/bond with ratio of 50/50. Every year, you will need to rebalance your portfolio.</p><p>For example</p><table><thead><tr><th>Stock</th><th>Bond</th></tr></thead><tbody><tr><td>5500</td><td>5100</td></tr></tbody></table><p>you will need to take 400 from equity asset to bond asset, make the ratio 50/50 again.</p><p>The rationale behind this is to <strong>&#x201C;balance&#x201D;</strong> the portfolio, a higher equity price might mean overvalued equity, hence reducing your position on <strong>overvalued</strong> asset.<br>Vice versa, when the equity price is low, you shift money from bond to equity, to buy more of the <strong>undervalued</strong> asset.</p><h2 id="How-about-Modern-Portfolio-Theory"><a href="#How-about-Modern-Portfolio-Theory" class="headerlink" title="How about Modern Portfolio Theory?"></a>How about Modern Portfolio Theory?</h2><p>The Nobel prize winner Markowitz doesn&#x2019;t even use the strategy himself,</p><blockquote><p>&#x201C;I visualized my grief if the stock market went way up and I wasn&#x2019;t in it &#x2014; or if it went way down and I was completely in it. So I split my contributions 50/50 between stocks and bonds.&#x201D;</p></blockquote><p>So it seems like Markowitz himself is using a 50/50 portfolio instead of the Modern Portfolio Theory that won him a Nobel Prize.</p><p><a href="https://www.mymoneyblog.com/harry-markowitz-personal-investment-portfolio.html" target="_blank" rel="noopener">https://www.mymoneyblog.com/harry-markowitz-personal-investment-portfolio.html</a></p><h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><p>The data I am using are funds from a local unit trust giant company P.</p><p>The equity funds I used are <strong>Global Equity Fund</strong>, <strong>East-Asia Equity Fund</strong>, <strong>Malaysia Index Fund</strong>. They well represent the whole equity market as a whole.<br>The bond fund I used are <strong>Enhanced Bond Fund</strong>.</p><p>The data used are from 2006 to 2020, to visualize the long term returns.</p><p>I am using Python for the calculation (because it is vastly easier than MS Excel), if you are interested please drop me an email.</p><h4 id="Loading-the-dataset"><a href="#Loading-the-dataset" class="headerlink" title="Loading the dataset"></a>Loading the dataset</h4><p>We need pandas for data processing, seaborn and matplotlib are for data visualization purpose. &#x2014;<br>title: Portfolio Construction. Full Equity, Full Bond or 50/50?<br>date: 2020-11-16 17:42:23<br>tags: [Python,Strategy]</p><hr><p>How do you achieve capital growth while controlling your risk?</p><!-- more --><h2 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h2><p>People often equates return and risk, giving statements like &#x201C;high risk high return&#x201D;. <strong>If high risk does secure you high return, is the investment considered high risk anymore?</strong></p><p>I find Howard Marks return vs risk graph a nice way to visualize risk.</p><p>According to him, the higher the risk, the more variability your return becomes.</p><p><img src="/img/risk-return.png" alt="Return vs risk visualized"></p><p>Different asset classes have their inherent risk.</p><p><strong>Equity</strong> asset often relates to people as higher risk, because sometimes it delivers higher return and sometimes lower return compared to other asset classes, with ranges in (-20 to 50% We are talking about overall equity market here).<br><strong>A lot of factors can play with an equity&#x2019;s risk, market condition, company earnings, new competitor and etc.</strong></p><p><strong>Bond</strong> asset is often considered as low risk asset, because of the return of the asset is fixed (sometimes also called fixed income asset), it has lesser variability in their returns (3 to 8%).<br><strong>Bond on the other hand, the main risk is the company going bankrupt, defaulting on the bond you are holding.</strong></p><h2 id="John-Bogle&#x2019;s-strategy-1"><a href="#John-Bogle&#x2019;s-strategy-1" class="headerlink" title="John Bogle&#x2019;s strategy"></a>John Bogle&#x2019;s strategy</h2><p>John Bogle the founder of The Vanguard Group, an american fund management giant.</p><p>His investment strategy is to allocate equity/bond with ratio of 50/50. Every year, you will need to rebalance your portfolio.</p><p>For example</p><table><thead><tr><th>Stock</th><th>Bond</th></tr></thead><tbody><tr><td>5500</td><td>5100</td></tr></tbody></table><p>you will need to take 400 from equity asset to bond asset, make the ratio 50/50 again.</p><p>The rationale behind this is to <strong>&#x201C;balance&#x201D;</strong> the portfolio, a higher equity price might mean overvalued equity, hence reducing your position on <strong>overvalued</strong> asset.<br>Vice versa, when the equity price is low, you shift money from bond to equity, to buy more of the <strong>undervalued</strong> asset.</p><h2 id="How-about-Modern-Portfolio-Theory-1"><a href="#How-about-Modern-Portfolio-Theory-1" class="headerlink" title="How about Modern Portfolio Theory?"></a>How about Modern Portfolio Theory?</h2><p>The Nobel prize winner Markowitz doesn&#x2019;t even use the strategy himself,</p><blockquote><p>&#x201C;I visualized my grief if the stock market went way up and I wasn&#x2019;t in it &#x2014; or if it went way down and I was completely in it. So I split my contributions 50/50 between stocks and bonds.&#x201D;</p></blockquote><p>So it seems like Markowitz himself is using a 50/50 portfolio instead of the Modern Portfolio Theory that won him a Nobel Prize.</p><p><a href="https://www.mymoneyblog.com/harry-markowitz-personal-investment-portfolio.html" target="_blank" rel="noopener">https://www.mymoneyblog.com/harry-markowitz-personal-investment-portfolio.html</a></p><h2 id="Methodology-1"><a href="#Methodology-1" class="headerlink" title="Methodology"></a>Methodology</h2><p>The data I am using are funds from a local unit trust giant company P.</p><p>The equity funds I used are <strong>Global Equity Fund</strong>, <strong>East-Asia Equity Fund</strong>, <strong>Malaysia Index Fund</strong>. They well represent the whole equity market as a whole.<br>The bond fund I used are <strong>Enhanced Bond Fund</strong>.</p><p>The data used are from 2006 to 2020, to visualize the long term returns.</p><p>I am using Python for the calculation (because it is vastly easier than MS Excel), if you are interested please drop me an email.</p><h4 id="Loading-the-dataset-1"><a href="#Loading-the-dataset-1" class="headerlink" title="Loading the dataset"></a>Loading the dataset</h4><p>We need pandas for data processing, seaborn and matplotlib are for data visualization purpose.<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">#read portfolio data</span><br><span class="line">Return = pd.DataFrame()</span><br><span class="line">p = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])</span><br><span class="line">Return[&apos;Date&apos;] = p[&apos;Date&apos;]</span><br><span class="line">Return[&apos;Date&apos;] = pd.DatetimeIndex(Return[&apos;Date&apos;]).year.astype(float)</span><br><span class="line">print(p.head)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><p>Some calculation logic<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">def CalculateReturn(Equity,Bond,Investment):</span><br><span class="line">    # Equity</span><br><span class="line">    PGSF = 0.15</span><br><span class="line">    PIX = 0.15</span><br><span class="line">    PFES = 0.7</span><br><span class="line"></span><br><span class="line">    # Bond</span><br><span class="line">    PBOND = 1.0</span><br><span class="line"></span><br><span class="line">    portfolio = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])</span><br><span class="line">    EquityInvestment = Equity*Investment</span><br><span class="line">    BondInvestment = Bond*Investment</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;PGSF Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PIX Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PFES Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PBOND Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;Rebalanced E&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;Rebalanced B&apos;] = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    #first year value</span><br><span class="line">    portfolio[&apos;PGSF Value&apos;][0] = EquityInvestment * PGSF * portfolio[&apos;PGSF&apos;][0]</span><br><span class="line">    portfolio[&apos;PIX Value&apos;][0] = EquityInvestment * PIX * portfolio[&apos;PIX&apos;][0]</span><br><span class="line">    portfolio[&apos;PFES Value&apos;][0] = EquityInvestment * PFES * portfolio[&apos;PFES&apos;][0]</span><br><span class="line">    portfolio[&apos;PBOND Value&apos;][0] = BondInvestment * PBOND * portfolio[&apos;PBOND&apos;][0]</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;Rebalanced E&apos;][0] = portfolio[&apos;PGSF Value&apos;][0] + portfolio[&apos;PIX Value&apos;][0] + portfolio[&apos;PFES Value&apos;][0]</span><br><span class="line">    portfolio[&apos;Rebalanced B&apos;][0] = portfolio[&apos;PBOND Value&apos;][0]</span><br><span class="line"></span><br><span class="line">    for i in range(1,15):</span><br><span class="line"></span><br><span class="line">        portfolio[&apos;PGSF Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PGSF * portfolio[&apos;PGSF&apos;][i]</span><br><span class="line">        portfolio[&apos;PIX Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PIX * portfolio[&apos;PIX&apos;][i]</span><br><span class="line">        portfolio[&apos;PFES Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PFES * portfolio[&apos;PFES&apos;][i]</span><br><span class="line">        portfolio[&apos;PBOND Value&apos;][i] = portfolio[&apos;Rebalanced B&apos;][i-1] * PBOND * portfolio[&apos;PBOND&apos;][i]</span><br><span class="line"></span><br><span class="line">        totalVal = portfolio[&apos;PGSF Value&apos;][i] + portfolio[&apos;PIX Value&apos;][i] + portfolio[&apos;PFES Value&apos;][i] + portfolio[&apos;PBOND Value&apos;][i]</span><br><span class="line"></span><br><span class="line">        portfolio[&apos;Rebalanced E&apos;][i] = totalVal * Equity</span><br><span class="line">        portfolio[&apos;Rebalanced B&apos;][i] = totalVal * Bond</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;Total&apos;] = portfolio[&apos;Rebalanced B&apos;] + portfolio[&apos;Rebalanced E&apos;]</span><br><span class="line"></span><br><span class="line">    return portfolio[&apos;Total&apos;]</span><br><span class="line"></span><br><span class="line">Return[&apos;Equity&apos;] = CalculateReturn(1,0,20000).astype(float)</span><br><span class="line">Return[&apos;Bond&apos;] = CalculateReturn(0,1,20000).astype(float)</span><br><span class="line">Return[&apos;50/50 Equity/Bond&apos;] = CalculateReturn(0.5,0.5,20000).astype(float)</span><br><span class="line">print(Return)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>Visualize the output<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;darkgrid&quot;)</span><br><span class="line">p = sns.color_palette(&quot;hls&quot;, 8)</span><br><span class="line"></span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;Equity&apos;,x=&apos;Date&apos;,label=&quot;Full Equity&quot;, color=&apos;skyblue&apos;, marker=&apos;^&apos;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;Bond&apos;,x=&apos;Date&apos;,label=&quot;Full Bond&quot;,color=&apos;lightcoral&apos;,marker=&quot;x&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;50/50 Equity/Bond&apos;,x=&apos;Date&apos;,color=&apos;palegreen&apos;,label=&quot;50/50 Equity/Bond&quot;,marker=&quot;o&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line"></span><br><span class="line">ax.set(xlabel=&quot;Date&quot;,ylabel=&quot;RM10k Invested&quot;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><table><thead><tr><th></th><th>Full Equity</th><th>Full Bond</th><th>50/50 Equity</th></tr></thead><tbody><tr><td>Return</td><td>270%</td><td>105%</td><td>244%</td></tr><tr><td>Asset Value in 2020</td><td>27142</td><td>18664</td><td>24482</td></tr><tr><td>Lowest point</td><td>9971</td><td>10532</td><td>11191</td></tr></tbody></table><p>Some might point out that volatility isn&#x2019;t a bad thing, but I think we can agree that volatility is not for the fainted heart.</p><p>No all of us can sleep well when our portfolio is down 20%, with a nice spiced combo, we can sleep well while not sacrificing a big chunk of your return.</p><p><img src="/img/portfolio.png" alt="Performance of portfolio"></p><h2 id="What-if-you-added-more-every-year"><a href="#What-if-you-added-more-every-year" class="headerlink" title="What if you added more every year?"></a>What if you added more every year?</h2><p>What if we added RM1000 every year (A rather small amount)?<br>As expected, the portfolio will grow a lot faster.</p><p><img src="/img/portfolio_1000.png" alt="Performance of portfolio"></p><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><ul><li><strong>Nice risk/reward ratio</strong>. Reduced volatility while preserving returns.</li><li><strong>Diversification don&#x2019;t necessary take away a lot of your return</strong>. The 50/50 combo is only a 10% (RM2600 difference) worse than full equity combo, with lesser volatility.</li><li>We cannot rebalance our portfolio too often because it might incur charges.</li></ul><p>The data I used above is from a local unit trust giant company P. If you want to learn more please <a href="https://m.me/klsequant" target="_blank" rel="noopener">PM on Facebook Messenger</a> or <strong>Email to <a href="mailto:klsequant@gmail.com">klsequant@gmail.com</a> for more info</strong></p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">#read portfolio data</span><br><span class="line">Return = pd.DataFrame()</span><br><span class="line">p = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])</span><br><span class="line">Return[&apos;Date&apos;] = p[&apos;Date&apos;]</span><br><span class="line">Return[&apos;Date&apos;] = pd.DatetimeIndex(Return[&apos;Date&apos;]).year.astype(float)</span><br><span class="line">print(p.head)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><p>Some calculation logic<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">def CalculateReturn(Equity,Bond,Investment):</span><br><span class="line">    # Equity</span><br><span class="line">    PGSF = 0.15</span><br><span class="line">    PIX = 0.15</span><br><span class="line">    PFES = 0.7</span><br><span class="line"></span><br><span class="line">    # Bond</span><br><span class="line">    PBOND = 1.0</span><br><span class="line"></span><br><span class="line">    portfolio = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])</span><br><span class="line">    EquityInvestment = Equity*Investment</span><br><span class="line">    BondInvestment = Bond*Investment</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;PGSF Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PIX Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PFES Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PBOND Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;Rebalanced E&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;Rebalanced B&apos;] = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    #first year value</span><br><span class="line">    portfolio[&apos;PGSF Value&apos;][0] = EquityInvestment * PGSF * portfolio[&apos;PGSF&apos;][0]</span><br><span class="line">    portfolio[&apos;PIX Value&apos;][0] = EquityInvestment * PIX * portfolio[&apos;PIX&apos;][0]</span><br><span class="line">    portfolio[&apos;PFES Value&apos;][0] = EquityInvestment * PFES * portfolio[&apos;PFES&apos;][0]</span><br><span class="line">    portfolio[&apos;PBOND Value&apos;][0] = BondInvestment * PBOND * portfolio[&apos;PBOND&apos;][0]</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;Rebalanced E&apos;][0] = portfolio[&apos;PGSF Value&apos;][0] + portfolio[&apos;PIX Value&apos;][0] + portfolio[&apos;PFES Value&apos;][0]</span><br><span class="line">    portfolio[&apos;Rebalanced B&apos;][0] = portfolio[&apos;PBOND Value&apos;][0]</span><br><span class="line"></span><br><span class="line">    for i in range(1,15):</span><br><span class="line"></span><br><span class="line">        portfolio[&apos;PGSF Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PGSF * portfolio[&apos;PGSF&apos;][i]</span><br><span class="line">        portfolio[&apos;PIX Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PIX * portfolio[&apos;PIX&apos;][i]</span><br><span class="line">        portfolio[&apos;PFES Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PFES * portfolio[&apos;PFES&apos;][i]</span><br><span class="line">        portfolio[&apos;PBOND Value&apos;][i] = portfolio[&apos;Rebalanced B&apos;][i-1] * PBOND * portfolio[&apos;PBOND&apos;][i]</span><br><span class="line"></span><br><span class="line">        totalVal = portfolio[&apos;PGSF Value&apos;][i] + portfolio[&apos;PIX Value&apos;][i] + portfolio[&apos;PFES Value&apos;][i] + portfolio[&apos;PBOND Value&apos;][i]</span><br><span class="line"></span><br><span class="line">        portfolio[&apos;Rebalanced E&apos;][i] = totalVal * Equity</span><br><span class="line">        portfolio[&apos;Rebalanced B&apos;][i] = totalVal * Bond</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;Total&apos;] = portfolio[&apos;Rebalanced B&apos;] + portfolio[&apos;Rebalanced E&apos;]</span><br><span class="line"></span><br><span class="line">    return portfolio[&apos;Total&apos;]</span><br><span class="line"></span><br><span class="line">Return[&apos;Equity&apos;] = CalculateReturn(1,0,20000).astype(float)</span><br><span class="line">Return[&apos;Bond&apos;] = CalculateReturn(0,1,20000).astype(float)</span><br><span class="line">Return[&apos;50/50 Equity/Bond&apos;] = CalculateReturn(0.5,0.5,20000).astype(float)</span><br><span class="line">print(Return)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><p>Visualize the output<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;darkgrid&quot;)</span><br><span class="line">p = sns.color_palette(&quot;hls&quot;, 8)</span><br><span class="line"></span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;Equity&apos;,x=&apos;Date&apos;,label=&quot;Full Equity&quot;, color=&apos;skyblue&apos;, marker=&apos;^&apos;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;Bond&apos;,x=&apos;Date&apos;,label=&quot;Full Bond&quot;,color=&apos;lightcoral&apos;,marker=&quot;x&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;50/50 Equity/Bond&apos;,x=&apos;Date&apos;,color=&apos;palegreen&apos;,label=&quot;50/50 Equity/Bond&quot;,marker=&quot;o&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line"></span><br><span class="line">ax.set(xlabel=&quot;Date&quot;,ylabel=&quot;RM10k Invested&quot;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="Results-1"><a href="#Results-1" class="headerlink" title="Results"></a>Results</h2><table><thead><tr><th></th><th>Full Equity</th><th>Full Bond</th><th>50/50 Equity</th></tr></thead><tbody><tr><td>Return</td><td>270%</td><td>105%</td><td>244%</td></tr><tr><td>Asset Value in 2020</td><td>27142</td><td>18664</td><td>24482</td></tr><tr><td>Lowest point</td><td>9971</td><td>10532</td><td>11191</td></tr></tbody></table><p>Some might point out that volatility isn&#x2019;t a bad thing, but I think we can agree that volatility is not for the fainted heart.</p><p>No all of us can sleep well when our portfolio is down 20%, with a nice spiced combo, we can sleep well while not sacrificing a big chunk of your return.</p><p><img src="/img/portfolio.png" alt="Performance of portfolio"></p><h2 id="What-if-you-added-more-every-year-1"><a href="#What-if-you-added-more-every-year-1" class="headerlink" title="What if you added more every year?"></a>What if you added more every year?</h2><p>What if we added RM1000 every year (A rather small amount)?<br>As expected, the portfolio will grow a lot faster.</p><p><img src="/img/portfolio_1000.png" alt="Performance of portfolio"></p><h2 id="Key-Takeaways-1"><a href="#Key-Takeaways-1" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><ul><li><strong>Nice risk/reward ratio</strong>. Reduced volatility while preserving returns.</li><li><strong>Diversification don&#x2019;t necessary take away a lot of your return</strong>. The 50/50 combo is only a 10% (RM2600 difference) worse than full equity combo, with lesser volatility.</li><li>We cannot rebalance our portfolio too often because it might incur charges.</li></ul><p>The data I used above is from a local unit trust giant company P. If you want to learn more please <a href="https://m.me/klsequant" target="_blank" rel="noopener">PM on Facebook Messenger</a> or <strong>Email to <a href="mailto:klsequant@gmail.com">klsequant@gmail.com</a> for more info</strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>投资组合. All in 股票, All in 债券, 还是50/50?</title>
      <link href="/zh-cn/portfolio-construction-using-rebalancing/"/>
      <url>/zh-cn/portfolio-construction-using-rebalancing/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x63A7;&#x5236;&#x98CE;&#x9669;&#x7684;&#x540C;&#x65F6;&#x5982;&#x4F55;&#x786E;&#x4FDD;&#x591F;&#x9AD8;&#x7684;&#x56DE;&#x916C;?</p><a id="more"></a><h2 id="&#x4EC0;&#x4E48;&#x662F;&#x98CE;&#x9669;"><a href="#&#x4EC0;&#x4E48;&#x662F;&#x98CE;&#x9669;" class="headerlink" title="&#x4EC0;&#x4E48;&#x662F;&#x98CE;&#x9669;?"></a>&#x4EC0;&#x4E48;&#x662F;&#x98CE;&#x9669;?</h2><p>&#x4EBA;&#x4EEC;&#x5E38;&#x8BF4;&#x201D;&#x9AD8;&#x98CE;&#x9669;, &#x9AD8;&#x56DE;&#x916C;&#x201D;. &#x53EF;&#x662F;<strong>&#x5982;&#x679C;&#x627F;&#x53D7;&#x9AD8;&#x7684;&#x98CE;&#x9669;, &#x771F;&#x7684;&#x53EF;&#x4EE5;&#x7ED9;&#x4F60;&#x9AD8;&#x56DE;&#x916C;</strong>&#x7684;&#x8BDD;, &#x90A3;&#x8FD9;&#x4E9B;&#x6295;&#x8D44;<strong>&#x8FD8;&#x7B97;&#x662F;&#x9AD8;&#x98CE;&#x9669;&#x5417;?</strong></p><p>&#x6211;&#x53D1;&#x73B0;&#x7F8E;&#x56FD;&#x6A61;&#x6811;&#x8D44;&#x672C;&#x7684;Howard Marks&#x5BF9;&#x98CE;&#x9669;&#x7684;&#x770B;&#x6CD5;&#x5F88;&#x6709;&#x610F;&#x601D;.</p><p>&#x6839;&#x636E;Howard Marks&#x7684;&#x8BF4;&#x6CD5;, &#x5F53;&#x4F60;&#x627F;&#x53D7;&#x9AD8;&#x98CE;&#x9669;&#x65F6;, &#x4F60;&#x7684;&#x56DE;&#x916C;&#x4F1A;&#x627F;&#x53D7;&#x66F4;&#x9AD8;&#x7684;&#x6CE2;&#x52A8;. &#x4E00;&#x56FE;&#x80DC;&#x5343;&#x8A00;.</p><p><img src="/img/risk-return.png" alt="&#x89C6;&#x89C9;&#x5316;&#x98CE;&#x9669; vs &#x56DE;&#x916C;"></p><p>&#x4E0D;&#x540C;&#x7684;&#x8D44;&#x4EA7;&#x7B49;&#x7EA7;&#x6709;&#x5B83;&#x4EEC;&#x7684;&#x98CE;&#x9669;&#x7B49;&#x7EA7;.</p><p><strong>&#x80A1;&#x7968;&#x578B;&#x8D44;&#x4EA7;</strong>&#x901A;&#x5E38;&#x7ED9;&#x4EBA;&#x6BD4;&#x8F83;&#x9AD8;&#x98CE;&#x9669;&#x7684;&#x611F;&#x89C9;, &#x80A1;&#x7968;&#x578B;&#x8D44;&#x4EA7;&#x7684;&#x56DE;&#x916C;&#x6BD4;&#x8F83;&#x591A;&#x4E0D;&#x786E;&#x5B9A;&#x6027;, &#x6709;&#x65F6;&#x5019;&#x975E;&#x5E38;&#x9AD8;, &#x6709;&#x65F6;&#x5019;&#x975E;&#x5E38;&#x4F4E;&#x751A;&#x81F3;&#x662F;&#x8D1F;&#x6570;, &#x4E3B;&#x8981;&#x7684;&#x56DE;&#x916C;&#x8303;&#x56F4;&#x5728;-20&#x81F3;50% (&#x6211;&#x4EEC;&#x8BA8;&#x8BBA;&#x7684;&#x662F;&#x5927;&#x5E02;&#x800C;&#x4E0D;&#x662F;&#x4E2A;&#x80A1;).<br><strong>&#x56E0;&#x4E3A;&#x5F88;&#x591A;&#x53D8;&#x6570;&#x53EF;&#x4EE5;&#x5F71;&#x54CD;&#x80A1;&#x7968;&#x7684;&#x56DE;&#x916C;, &#x5E02;&#x573A;&#x60C5;&#x51B5;, &#x516C;&#x53F8;&#x76C8;&#x5229;, &#x65B0;&#x7684;&#x7ADE;&#x4E89;&#x8005;&#x7B49;.</strong></p><p>&#x53CD;&#x4E4B;<strong>&#x503A;&#x5238;&#x578B;&#x8D44;&#x4EA7;</strong>&#x5C31;&#x6BD4;&#x8F83;&#x4F4E;&#x98CE;&#x9669;, &#x503A;&#x5238;&#x578B;&#x8D44;&#x4EA7;&#x56DE;&#x916C;&#x901A;&#x5E38;&#x662F;&#x975E;&#x5E38;&#x4F4E;&#x4E0D;&#x786E;&#x5B9A;&#x6027;, &#x6240;&#x4EE5;&#x6709;&#x65F6;&#x5019;&#x503A;&#x5238;&#x4E5F;&#x88AB;&#x79F0;&#x4E3A;fixed income asset.<br><strong>&#x503A;&#x5238;&#x7684;&#x4E3B;&#x8981;&#x98CE;&#x9669;&#x5728;&#x4E8E;&#x516C;&#x53F8;/&#x56FD;&#x5BB6;&#x7684;&#x5012;&#x95ED;, &#x65E0;&#x6CD5;&#x507F;&#x8FD8;&#x503A;&#x5238;&#x7684;&#x5229;&#x606F;&#x6216;&#x672C;&#x91D1;.</strong></p><h2 id="&#x6295;&#x8D44;&#x754C;&#x5927;&#x4F6C;&#x4E4B;&#x4E00;-John-Bogle-&#x7684;&#x7B56;&#x7565;"><a href="#&#x6295;&#x8D44;&#x754C;&#x5927;&#x4F6C;&#x4E4B;&#x4E00;-John-Bogle-&#x7684;&#x7B56;&#x7565;" class="headerlink" title="&#x6295;&#x8D44;&#x754C;&#x5927;&#x4F6C;&#x4E4B;&#x4E00; John Bogle &#x7684;&#x7B56;&#x7565;"></a>&#x6295;&#x8D44;&#x754C;&#x5927;&#x4F6C;&#x4E4B;&#x4E00; John Bogle &#x7684;&#x7B56;&#x7565;</h2><p>John Bogle &#x662F; The Vanguard Group &#x7684;&#x521B;&#x529E;&#x4EBA;, The Vanguard Group&#x662F;&#x7F8E;&#x56FD;&#x6570;&#x4E00;&#x6570;&#x4E8C;&#x7684;&#x8D44;&#x4EA7;&#x7BA1;&#x7406;&#x516C;&#x53F8;.</p><p>&#x4ED6;&#x6295;&#x8D44;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x628A;&#x80A1;&#x7968;&#x4E0E;&#x503A;&#x5238;&#x5206;&#x914D;&#x81F3;50/50&#x7684;&#x6BD4;&#x4F8B;, &#x5C31;&#x662F;&#x6301;&#x6709;&#x76F8;&#x540C;&#x4EF7;&#x503C;&#x7684;&#x80A1;&#x7968;&#x4E0E;&#x503A;&#x5238;&#x8D44;&#x4EA7;.</p><p>&#x6253;&#x4E2A;&#x4F8B;&#x5B50;</p><table><thead><tr><th>&#x80A1;&#x7968;</th><th>&#x503A;&#x5238;</th></tr></thead><tbody><tr><td>5500</td><td>5100</td></tr></tbody></table><p>&#x6B64;&#x65F6;&#x4F60;&#x5FC5;&#x987B;&#x628A;RM400&#x4ECE;&#x80A1;&#x7968;&#x8D44;&#x4EA7;&#x8F6C;&#x79FB;&#x81F3;&#x503A;&#x5238;&#x8D44;&#x4EA7;, &#x6240;&#x4EE5;&#x624D;&#x7B26;&#x5408;50/50&#x7684;&#x539F;&#x5219;.</p><p>&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x76EE;&#x7684;&#x662F;&#x8981;&#x91CD;&#x65B0;&#x8C03;&#x6574;&#x8D44;&#x4EA7;&#x7EC4;&#x5408;, &#x4E00;&#x4E2A;<strong>&#x4EF7;&#x94B1;&#x9AD8;&#x7684;&#x8D44;&#x4EA7;&#x6709;&#x53EF;&#x80FD;&#x662F;&#x88AB;&#x9AD8;&#x4F30;&#x4E86;</strong>, &#x6240;&#x4EE5;&#x9700;&#x8981;&#x5957;&#x5229;&#x5E76;&#x628A;&#x8D44;&#x91D1;&#x79FB;&#x5165;&#x53E6;&#x4E00;&#x4E2A;&#x8D44;&#x4EA7;.<br>&#x53CD;&#x4E4B;&#x5982;&#x679C;&#x80A1;&#x7968;&#x8D44;&#x4EA7;&#x7684;&#x4EF7;&#x94B1;&#x4F4E;&#x4E86;, &#x4F60;&#x5C31;&#x9700;&#x8981;&#x628A;&#x8D44;&#x91D1;&#x4ECE;&#x503A;&#x5238;&#x79FB;&#x81F3;&#x80A1;&#x7968;, &#x8D81;&#x80A1;&#x7968;&#x8D44;&#x4EA7;&#x88AB;<strong>&#x4F4E;&#x4F30;&#x7684;&#x65F6;&#x5019;&#x4E70;&#x8FDB;</strong>.</p><h2 id="&#x5206;&#x6790;&#x65B9;&#x6CD5;"><a href="#&#x5206;&#x6790;&#x65B9;&#x6CD5;" class="headerlink" title="&#x5206;&#x6790;&#x65B9;&#x6CD5;"></a>&#x5206;&#x6790;&#x65B9;&#x6CD5;</h2><p>&#x6211;&#x4ECE;morningstar&#x7684;&#x7F51;&#x7AD9;&#x722C;&#x53D6;&#x7684;&#x672C;&#x5730;&#x8457;&#x540D;&#x57FA;&#x91D1;&#x516C;&#x53F8; &#x201C;P&#x516C;&#x53F8;&#x201D; &#x7684;&#x6570;&#x636E;.</p><p>&#x80A1;&#x7968;&#x578B;&#x57FA;&#x91D1;&#x6211;&#x7528;&#x7684;&#x6570;&#x636E;&#x662F; <strong>Global Equity Fund</strong>, <strong>East-Asia Equity Fund</strong>, <strong>Malaysia Index Fund</strong>. &#x9009;&#x8FD9;3&#x4E2A;&#x57FA;&#x91D1;&#x7684;&#x539F;&#x56E0;&#x662F;&#x56E0;&#x4E3A;&#x5B83;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x597D;&#x7684;&#x8DDF;&#x8E2A;&#x5168;&#x7403;&#x5404;&#x56FD;&#x80A1;&#x5E02;&#x7684;&#x8868;&#x73B0;.<br>&#x503A;&#x5238;&#x578B;&#x57FA;&#x91D1;&#x6211;&#x7528;&#x7684;&#x6570;&#x636E;&#x662F; <strong>Enhanced Bond Fund</strong>.</p><p>&#x6570;&#x636E;&#x7684;&#x65F6;&#x95F4;&#x662F;&#x4ECE;2006&#x81F3;2020, &#x4EE5;&#x6A21;&#x62DF;&#x957F;&#x671F;&#x6295;&#x8D44;&#x7684;&#x6548;&#x679C;.</p><p>&#x6211;&#x7528;Python&#x6765;&#x8BA1;&#x7B97;&#x5404;&#x4E2A;rebalance, &#x8D44;&#x4EA7;&#x589E;&#x503C;&#x7684;&#x8BA1;&#x7B97;, &#x5389;&#x5BB3;&#x7528;Excel&#x7684;&#x5927;&#x795E;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;Excel, &#x53EA;&#x662F;&#x6211;&#x5BF9;Python&#x6BD4;&#x8F83;&#x719F;&#x6089;&#x6240;&#x4EE5;&#x7528;&#x7684;&#x662F;Python.</p><h4 id="&#x521D;&#x59CB;&#x5316;"><a href="#&#x521D;&#x59CB;&#x5316;" class="headerlink" title="&#x521D;&#x59CB;&#x5316;"></a>&#x521D;&#x59CB;&#x5316;</h4><p>&#x6211;&#x4EEC;&#x9700;&#x8981;pandas&#x6765;&#x505A;&#x6570;&#x636E;&#x5206;&#x6790;, &#x800C;seaborn&#x53CA;matplotlib&#x7528;&#x4E8E;&#x6570;&#x636E;&#x53EF;&#x89C6;&#x5316;.<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import seaborn as sns</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">#read portfolio data</span><br><span class="line">Return = pd.DataFrame()</span><br><span class="line">p = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])</span><br><span class="line">Return[&apos;Date&apos;] = p[&apos;Date&apos;]</span><br><span class="line">Return[&apos;Date&apos;] = pd.DatetimeIndex(Return[&apos;Date&apos;]).year.astype(float)</span><br><span class="line">print(p.head)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="&#x6570;&#x636E;&#x5206;&#x6790;"><a href="#&#x6570;&#x636E;&#x5206;&#x6790;" class="headerlink" title="&#x6570;&#x636E;&#x5206;&#x6790;"></a>&#x6570;&#x636E;&#x5206;&#x6790;</h4><p>&#x4E00;&#x4E9B;&#x57FA;&#x672C;&#x7684;&#x903B;&#x8F91;&#x7B97;&#x6CD5;<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">def CalculateReturn(Equity,Bond,Investment):</span><br><span class="line">    # Equity</span><br><span class="line">    PGSF = 0.15</span><br><span class="line">    PIX = 0.15</span><br><span class="line">    PFES = 0.7</span><br><span class="line"></span><br><span class="line">    # Bond</span><br><span class="line">    PBOND = 1.0</span><br><span class="line"></span><br><span class="line">    portfolio = pd.read_csv(&apos;Portfolio.csv&apos;, parse_dates=[&apos;Date&apos;])</span><br><span class="line">    EquityInvestment = Equity*Investment</span><br><span class="line">    BondInvestment = Bond*Investment</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;PGSF Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PIX Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PFES Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;PBOND Value&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;Rebalanced E&apos;] = &quot;&quot;</span><br><span class="line">    portfolio[&apos;Rebalanced B&apos;] = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    #first year value</span><br><span class="line">    portfolio[&apos;PGSF Value&apos;][0] = EquityInvestment * PGSF * portfolio[&apos;PGSF&apos;][0]</span><br><span class="line">    portfolio[&apos;PIX Value&apos;][0] = EquityInvestment * PIX * portfolio[&apos;PIX&apos;][0]</span><br><span class="line">    portfolio[&apos;PFES Value&apos;][0] = EquityInvestment * PFES * portfolio[&apos;PFES&apos;][0]</span><br><span class="line">    portfolio[&apos;PBOND Value&apos;][0] = BondInvestment * PBOND * portfolio[&apos;PBOND&apos;][0]</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;Rebalanced E&apos;][0] = portfolio[&apos;PGSF Value&apos;][0] + portfolio[&apos;PIX Value&apos;][0] + portfolio[&apos;PFES Value&apos;][0]</span><br><span class="line">    portfolio[&apos;Rebalanced B&apos;][0] = portfolio[&apos;PBOND Value&apos;][0]</span><br><span class="line"></span><br><span class="line">    for i in range(1,15):</span><br><span class="line"></span><br><span class="line">        portfolio[&apos;PGSF Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PGSF * portfolio[&apos;PGSF&apos;][i]</span><br><span class="line">        portfolio[&apos;PIX Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PIX * portfolio[&apos;PIX&apos;][i]</span><br><span class="line">        portfolio[&apos;PFES Value&apos;][i] = portfolio[&apos;Rebalanced E&apos;][i-1] * PFES * portfolio[&apos;PFES&apos;][i]</span><br><span class="line">        portfolio[&apos;PBOND Value&apos;][i] = portfolio[&apos;Rebalanced B&apos;][i-1] * PBOND * portfolio[&apos;PBOND&apos;][i]</span><br><span class="line"></span><br><span class="line">        totalVal = portfolio[&apos;PGSF Value&apos;][i] + portfolio[&apos;PIX Value&apos;][i] + portfolio[&apos;PFES Value&apos;][i] + portfolio[&apos;PBOND Value&apos;][i]</span><br><span class="line"></span><br><span class="line">        portfolio[&apos;Rebalanced E&apos;][i] = totalVal * Equity</span><br><span class="line">        portfolio[&apos;Rebalanced B&apos;][i] = totalVal * Bond</span><br><span class="line"></span><br><span class="line">    portfolio[&apos;Total&apos;] = portfolio[&apos;Rebalanced B&apos;] + portfolio[&apos;Rebalanced E&apos;]</span><br><span class="line"></span><br><span class="line">    return portfolio[&apos;Total&apos;]</span><br><span class="line"></span><br><span class="line">Return[&apos;Equity&apos;] = CalculateReturn(1,0,20000).astype(float)</span><br><span class="line">Return[&apos;Bond&apos;] = CalculateReturn(0,1,20000).astype(float)</span><br><span class="line">Return[&apos;50/50 Equity/Bond&apos;] = CalculateReturn(0.5,0.5,20000).astype(float)</span><br><span class="line">print(Return)</span><br></pre></td></tr></tbody></table></figure><p></p><h4 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h4><p>&#x5B8C;&#x6210;&#x6570;&#x636E;&#x5206;&#x6790;&#x540E;&#x7684;&#x6570;&#x636E;&#x53EF;&#x89C6;&#x5316;<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sns.set_style(&quot;darkgrid&quot;)</span><br><span class="line">p = sns.color_palette(&quot;hls&quot;, 8)</span><br><span class="line"></span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;Equity&apos;,x=&apos;Date&apos;,label=&quot;Full Equity&quot;, color=&apos;skyblue&apos;, marker=&apos;^&apos;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;Bond&apos;,x=&apos;Date&apos;,label=&quot;Full Bond&quot;,color=&apos;lightcoral&apos;,marker=&quot;x&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line">ax = sns.lineplot(data=Return,y=&apos;50/50 Equity/Bond&apos;,x=&apos;Date&apos;,color=&apos;palegreen&apos;,label=&quot;50/50 Equity/Bond&quot;,marker=&quot;o&quot;,markeredgecolor=&quot;black&quot;,linewidth=5)</span><br><span class="line"></span><br><span class="line">ax.set(xlabel=&quot;Date&quot;,ylabel=&quot;RM10k Invested&quot;)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></tbody></table></figure><p></p><h2 id="&#x5206;&#x6790;&#x6570;&#x636E;"><a href="#&#x5206;&#x6790;&#x6570;&#x636E;" class="headerlink" title="&#x5206;&#x6790;&#x6570;&#x636E;"></a>&#x5206;&#x6790;&#x6570;&#x636E;</h2><table><thead><tr><th></th><th>&#x6EE1;&#x4ED3;&#x80A1;&#x7968;</th><th>&#x6EE1;&#x4ED3;&#x503A;&#x5238;</th><th>50/50 &#x80A1;&#x7968;/&#x503A;&#x5238;</th></tr></thead><tbody><tr><td>&#x56DE;&#x916C;&#x7387;</td><td>270%</td><td>105%</td><td>244%</td></tr><tr><td>2020&#x5E74;&#x8D44;&#x4EA7;&#x4EF7;&#x503C;</td><td>27142</td><td>18664</td><td>24482</td></tr><tr><td>&#x6700;&#x4F4E;&#x70B9;</td><td>9971</td><td>10532</td><td>11191</td></tr></tbody></table><p><img src="/img/portfolio.png" alt="Performance of portfolio"></p><h2 id="&#x5982;&#x679C;&#x4F60;&#x6BCF;&#x5E74;&#x52A0;&#x7801;&#x5462;"><a href="#&#x5982;&#x679C;&#x4F60;&#x6BCF;&#x5E74;&#x52A0;&#x7801;&#x5462;" class="headerlink" title="&#x5982;&#x679C;&#x4F60;&#x6BCF;&#x5E74;&#x52A0;&#x7801;&#x5462;?"></a>&#x5982;&#x679C;&#x4F60;&#x6BCF;&#x5E74;&#x52A0;&#x7801;&#x5462;?</h2><p>&#x6211;&#x4E5F;&#x8BA1;&#x7B97;&#x4E86;&#x5982;&#x679C;&#x6BCF;&#x5E74;&#x52A0;&#x7801;RM1000&#x7684;&#x7ED3;&#x679C;, &#x5C31;&#x5982;&#x9884;&#x7B97;&#x7684;, &#x8D44;&#x4EA7;&#x589E;&#x503C;&#x7684;&#x901F;&#x5EA6;&#x4F1A;&#x589E;&#x5FEB;.</p><p><img src="/img/portfolio_1000.png" alt="Performance of portfolio"></p><h2 id="&#x603B;&#x7ED3;"><a href="#&#x603B;&#x7ED3;" class="headerlink" title="&#x603B;&#x7ED3;"></a>&#x603B;&#x7ED3;</h2><ul><li><strong>&#x4E0D;&#x9519;&#x7684; &#x98CE;&#x9669;/&#x56DE;&#x916C; &#x6BD4;&#x4F8B;</strong>. 50/50&#x7EC4;&#x5408;&#x53EF;&#x4EE5;&#x5728;&#x964D;&#x4F4E;&#x98CE;&#x9669;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4FDD;&#x6301;&#x56DE;&#x916C;.</li><li><strong>&#x5206;&#x6563;&#x98CE;&#x9669;&#x4E0D;&#x4E00;&#x5B9A;&#x4F1A;&#x727A;&#x7272;&#x9AD8;&#x56DE;&#x916C;</strong>. 50/50&#x7EC4;&#x5408;&#x5728;<strong>&#x66F4;&#x5C0F;&#x7684;&#x6CE2;&#x52A8;&#x4E0B;</strong>&#x53EA;&#x6BD4;&#x80A1;&#x7968;&#x578B;&#x8D44;&#x4EA7;&#x5C11;&#x8D5A;&#x4E86;10% &#xFF08;&#x5927;&#x6982;RM2600)</li><li>Rebalance&#x4E0D;&#x80FD;&#x592A;&#x5E38;&#x8FDB;&#x884C;, &#x5FC5;&#x987B;&#x8003;&#x8651;&#x5230;&#x624B;&#x7EED;&#x8D39;.</li></ul><p>&#x4EE5;&#x4E0A;&#x7528;&#x7684;&#x6570;&#x636E;&#x90FD;&#x662F;&#x672C;&#x5730;&#x8457;&#x540D;&#x57FA;&#x91D1;&#x516C;&#x53F8;&#x201D;P &#x516C;&#x53F8;&#x201D;&#x7684;&#x6570;&#x636E;. &#x5982;&#x679C;&#x4F60;&#x60F3;<strong>&#x4E86;&#x89E3;&#x66F4;&#x591A;&#x7684;&#x8BDD;&#x53EF;&#x4EE5;<a href="https://m.me/klsequant" target="_blank" rel="noopener">PM on Facebook Messenger</a>&#x6216;&#x7535;&#x90AE;&#x81F3;<a href="mailto:klsequant@gmail.com">klsequant@gmail.com</a></strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RM300 a month for 10 years?</title>
      <link href="/RM300-a-year-for-10-years/"/>
      <url>/RM300-a-year-for-10-years/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>What the heck is dollar cost averaging strategy and does it work?</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Dollar cost averaging is a systematic strategy that allows you to buy more when price is cheap, buy less when price is high.</p><p>This is a popular strategy among stock investors as well as mutual fund investors.</p><p>In the long run your average buying price will be very favourable because you bought more when price is cheap.</p><p><img src="/img/DCA_chart.png" alt="Dollar Cost Averaging strategy visualized"></p><h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><p>I have gathered 10 years worth of stock market data, <strong>SP500</strong>, <strong>SGX</strong>, <strong>Shanghai Index</strong> and <strong>KLSE</strong>.</p><p>I simulated dollar cost averaging by buying into the stock index every month with RM300.</p><p>People always said dollar cost averaging is a <strong>good strategy, is it so?</strong></p><p>Let&#x2019;s look at the results.</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>The results&#x2026; are mixed. If you bought SP500 10 years ago, you would have gained 70% on your investment.</p><p>However, if you bought KLSE or SGX, you end up losing money, 20% of it. Is all this effort worth it?</p><p><img src="/img/Stock_DCA_chart.PNG" alt="Dollar Cost Averaging strategy in stock market"></p><h2 id="Key-Takeaways"><a href="#Key-Takeaways" class="headerlink" title="Key Takeaways"></a>Key Takeaways</h2><ul><li>the risk/reward ratio is still great. You get 70% upside and -20% downside, when risking the 20% you can potentially get 70%.</li><li>Diversification is great for layman. I mean, if you don&#x2019;t have the skills and knowledge needed to put your bets, diversification is a way to go.</li><li>Stocks are still great for long term investment, this doesn&#x2019;t count in where you buy more during dips, the results will certainly be better.</li></ul><p>How can I buy the index? Through ETFs and mutual funds.</p><p>ETFs are great, they have low costs, tracks the index well,</p><p><strong>however, ETFs in Malaysia are still premature, volumes are low, spreads are high (inefficient market makers)</strong>.</p><p><img src="/img/DCA_spreads.PNG" alt="Crazy Spreads"></p><p>The other option is mutual fund.</p><p>Most of them costs some charges, but their nature of open-ended funds, you can buy them using their NAV price, don&#x2019;t have to worry about spreads and volume. They still serve as a good option for diversification.</p><p>If you want to learn more please <a href="https://m.me/klsequant" target="_blank" rel="noopener">PM on Facebook Messenger</a> or <strong>Email to <a href="mailto:klsequant@gmail.com">klsequant@gmail.com</a> for more info</strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定期定额投资股市每个月300, 10年.</title>
      <link href="/zh-cn/RM300-a-year-for-10-years/"/>
      <url>/zh-cn/RM300-a-year-for-10-years/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x6765;&#x4E00;&#x4E2A;&#x7CFB;&#x7EDF;&#x6027;&#x7684;&#x5206;&#x6790;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#x6CD5;&#x7684;&#x53EF;&#x884C;&#x6027;</p><a id="more"></a><h2 id="&#x4EC0;&#x4E48;&#x662F;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#x6CD5;"><a href="#&#x4EC0;&#x4E48;&#x662F;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#x6CD5;" class="headerlink" title="&#x4EC0;&#x4E48;&#x662F;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#x6CD5;?"></a>&#x4EC0;&#x4E48;&#x662F;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#x6CD5;?</h2><p>&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#x6CD5;&#x662F;&#x4E00;&#x4E2A;&#x7CFB;&#x7EDF;&#x6027;&#x7684;&#x6295;&#x8D44;&#x65B9;&#x6CD5;&#x3002;&#x4ED6;&#x8BA9;&#x4F60;&#x5728;&#x4F4E;&#x4EF7;&#x65F6;&#x4E70;&#x5F97;&#x66F4;&#x591A;&#xFF0C;&#x9AD8;&#x4EF7;&#x65F6;&#x4E70;&#x5F97;&#x8F83;&#x5C11;&#xFF0C;&#x957F;&#x671F;&#x6765;&#x770B;&#x4F60;&#x7684;&#x5E73;&#x5747;&#x4EF7;&#x4F1A;&#x6BD4;&#x8F83;&#x597D;&#x3002;</p><p>&#x65E0;&#x8BBA;&#x662F;&#x80A1;&#x5E02;&#x8FD8;&#x662F;&#x57FA;&#x91D1;&#x90FD;&#x5F88;&#x591A;&#x4EBA;&#x90FD;&#x63A8;&#x5D07;&#x8FD9;&#x79CD;&#x6295;&#x8D44;&#x6CD5;&#x3002;</p><p><img src="/img/DCA_chart.png" alt="Dollar Cost Averaging strategy visualized"></p><h2 id="&#x6A21;&#x62DF;&#x65B9;&#x6CD5;"><a href="#&#x6A21;&#x62DF;&#x65B9;&#x6CD5;" class="headerlink" title="&#x6A21;&#x62DF;&#x65B9;&#x6CD5;"></a>&#x6A21;&#x62DF;&#x65B9;&#x6CD5;</h2><p>&#x5C0F;&#x7F16;&#x5148;&#x805A;&#x96C6;&#x7684;10&#x5E74;&#x7684;&#x80A1;&#x5E02;&#x6570;&#x636E;&#xFF0C;&#x5206;&#x522B;&#x662F;<strong>&#x7F8E;&#x56FD;&#x6807;&#x666E;500&#x6307;&#x6570; (SP500)</strong>, <strong>&#x65B0;&#x52A0;&#x5761;&#x80A1;&#x5E02; (SGX)</strong>, <strong>&#x4E0A;&#x8BC1;&#x6307;&#x6570;</strong> and <strong>&#x5927;&#x9A6C;&#x7EFC;&#x5408;&#x6307;&#x6570; (KLSE)</strong>&#x3002;</p><p>&#x4E5F;&#x7528;&#x4E86;EXCEL&#x6765;&#x6A21;&#x62DF;&#xFF0C;&#x6BCF;&#x4E2A;&#x6708;&#x5B9A;&#x5B9A;&#x7528;RM300&#x4E70;&#x5165;&#x6307;&#x6570;&#x3002;</p><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>&#x6210;&#x7EE9;&#x51FA;&#x6765;&#x662F;&#x597D;&#x574F;&#x90FD;&#x6709;&#x3002;&#x5982;&#x679C;&#x4F60;&#x4E70;&#x7684;&#x662F;SP500&#x6307;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x606D;&#x559C;&#x4F60;&#xFF0C;&#x4F60;&#x7684;&#x56DE;&#x916C;&#x4F1A;&#x662F;70%&#x3002;&#x5982;&#x679C;&#x4F60;&#x4E70;&#x7684;&#x662F;SGX&#x6216;&#x8005;KLSE&#xFF0C;&#x5C31;&#x4F1A;&#x8F93;&#x6389;20%&#x3002;</p><p>&#x5C0F;&#x7F16;&#x53C8;&#x627E;&#x6570;&#x636E;&#x53C8;&#x6A21;&#x62DF;&#xFF0C;&#x6240;&#x4EE5;&#x5230;&#x5E95;&#x5B9A;&#x671F;&#x5B9A;&#x989D;&#x6295;&#x8D44;&#x6CD5;&#x7BA1;&#x4E0D;&#x7BA1;&#x7528;&#x5462;?</p><p><img src="/img/Stock_DCA_chart.PNG" alt="Dollar Cost Averaging strategy in stock market"></p><h2 id="&#x7ED3;&#x8BBA;"><a href="#&#x7ED3;&#x8BBA;" class="headerlink" title="&#x7ED3;&#x8BBA;"></a>&#x7ED3;&#x8BBA;</h2><ul><li>&#x8FD9;&#x91CC;&#x8868;&#x660E;&#x7684;&#x662F;, RISK/REWARD&#x8FD8;&#x662F;&#x503C;&#x5F97;&#xFF0C;&#x4F60;&#x7528;-20%&#x7684;&#x98CE;&#x9669;&#x53BB;&#x6362;&#x6765;70%&#x7684;&#x56DE;&#x916C;&#x3002;</li><li>&#x5206;&#x6563;&#x6295;&#x8D44;&#x5BF9;&#x5927;&#x4F17;&#x6765;&#x8BF4;&#x8FD8;&#x662F;&#x53EF;&#x884C;&#x7684;&#x3002;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x6CA1;&#x6709;&#x5206;&#x6790;&#x80A1;&#x5E02;&#x7684;&#x80FD;&#x529B;&#xFF08;&#x5F88;&#x591A;&#x4EBA;&#x90FD;&#x4EE5;&#x4E3A;&#x81EA;&#x5DF1;&#x6709;&#x7684;&#x80FD;&#x529B;&#xFF09;&#xFF0C;&#x90A3;&#x4E48;&#x5206;&#x6563;&#x6295;&#x8D44;&#x8FD8;&#x662F;&#x4E00;&#x4E2A;&#x53EF;&#x53D6;&#x7684;&#x65B9;&#x6848;&#x3002;</li><li>&#x6295;&#x8D44;&#x80A1;&#x5E02;&#x957F;&#x671F;&#x6765;&#x8BF4;&#x662F;&#x5F88;&#x4E0D;&#x9519;&#x7684;&#xFF0C;&#x4E0A;&#x9762;&#x7684;&#x6A21;&#x62DF;&#x5E76;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x4F60;&#x5728;&#x5927;&#x8DCC;&#x7684;&#x65F6;&#x5019;&#x52A0;&#x7801;&#x4E70;&#xFF0C;&#x5982;&#x679C;&#x5927;&#x8DCC;&#x65F6;&#x518D;&#x52A0;&#x7801;&#xFF08;&#x524D;&#x63D0;&#x662F;&#x8981;&#x8BE5;&#x5E02;&#x573A;&#x957F;&#x671F;&#x770B;&#x597D;&#xFF09;&#xFF0C;&#x90A3;&#x4E48;&#x7B49;&#x80A1;&#x5E02;&#x91CD;&#x65B0;&#x56DE;&#x5230;&#x4E0A;&#x5347;&#x5468;&#x671F;&#x65F6;&#xFF0C;&#x8D5A;&#x5E45;&#x4F1A;&#x66F4;&#x5927;</li></ul><p>&#x8BF4;&#x4E86;&#x8FD9;&#x4E48;&#x591A;&#xFF0C;&#x5230;&#x5E95;&#x8981;&#x600E;&#x6837;&#x4E70;&#x6307;&#x6570;&#xFF1F;&#x4E70;&#x5B8C;KLSE 30&#x53EA;&#x80A1;&#x7968;&#x5417;&#xFF1F;</p><p>&#x6211;&#x4EEC;&#x6709;2&#x79CD;&#x9009;&#x62E9;&#xFF0C;&#x7B2C;&#x4E00;&#x79CD;&#x662F;ETF&#x3002;ETF&#x4F1A;&#x957F;&#x671F;&#x8DDF;&#x8E2A;&#x6307;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x4ED6;&#x7684;&#x8868;&#x73B0;&#x57FA;&#x672C;&#x4E0A;&#x5C31;&#x662F;&#x8DDF;&#x6307;&#x6570;&#x4E00;&#x6837;&#x3002;</p><p>&#x800C;&#x4E14;&#x56E0;&#x4E3A;&#x4E0D;&#x7528;&#x9009;&#x80A1;&#xFF0C;&#x624B;&#x7EED;&#x8D39;&#x4F1A;&#x6BD4;&#x8F83;&#x4F4E;&#x3002;</p><p><strong>&#x53EF;&#x662F;&#xFF0C;&#x5728;&#x9A6C;&#x6765;&#x897F;&#x4E9A;&#xFF0C;ETF&#x7684;&#x9009;&#x62E9;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x5C11;&#xFF0C;&#x800C;&#x4E14;&#x9762;&#x5BF9;&#x7740;&#x4EA4;&#x6613;&#x91CF;&#x4F4E;&#xFF0C;&#x4E70;/&#x5356;&#x4EF7;&#x592A;&#x5927;&#xFF08;SPREADS)&#x7684;&#x95EE;&#x9898;&#x3002;</strong></p><p><img src="/img/DCA_spreads.PNG" alt="Crazy Spreads"></p><p>&#x53E6;&#x4E00;&#x4E2A;&#x9009;&#x9879;&#x5C31;&#x662F;&#x57FA;&#x91D1;&#x3002;</p><p>&#x57FA;&#x91D1;&#x7684;&#x8BDD;&#x5C31;&#x6CA1;&#x6709;ETF&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x56E0;&#x4E3A;&#x4F60;&#x60F3;&#x8981;&#x5356;&#x7684;&#x8BDD;&#xFF0C;&#x57FA;&#x91D1;&#x516C;&#x53F8;&#x662F;&#x5FC5;&#x987B;&#x8DDF;&#x4F60;&#x4E70;&#x56DE;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x53EA;&#x662F;&#x8DDF;&#x7740;NAV&#x4EA4;&#x6613;&#x3002;</p><p>&#x5982;&#x679C;&#x662F;ETF&#x7684;&#x8BDD;&#xFF0C;&#x4F60;&#x8FD8;&#x8981;&#x62C5;&#x5FC3;&#x6CA1;&#x6709;&#x4E70;&#x76D8;&#xFF0C;&#x800C;&#x4E14;&#x4E70;&#x76D8;&#x4F4E;&#x7684;&#x8BDD;&#x8FD8;&#x53EF;&#x80FD;&#x5356;&#x4E0D;&#x5230;&#x597D;&#x4EF7;&#x94B1;&#x3002;</p><p>&#x5728;&#x9A6C;&#x6765;&#x897F;&#x4E9A;&#xFF0C;&#x57FA;&#x91D1;&#x8FD8;&#x662F;&#x4E00;&#x4E2A;&#x5206;&#x6563;&#x6295;&#x8D44;&#x7684;&#x4E00;&#x4E2A;&#x597D;&#x9009;&#x9879;&#x3002;</p><p>&#x5982;&#x679C;&#x4F60;&#x60F3;<strong>&#x4E86;&#x89E3;&#x66F4;&#x591A;&#x7684;&#x8BDD;&#x53EF;&#x4EE5;<a href="https://m.me/klsequant" target="_blank" rel="noopener">PM on Facebook Messenger</a>&#x6216;&#x7535;&#x90AE;&#x81F3;<a href="mailto:klsequant@gmail.com">klsequant@gmail.com</a></strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Strategy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Magic formula of rule of 72. Why is it 72?</title>
      <link href="/Rule-of-72/"/>
      <url>/Rule-of-72/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>How did mathematicians come up with the Rule of 72?? Why not 71 or 73?</p><a id="more"></a><h2 id="Rule-of-72"><a href="#Rule-of-72" class="headerlink" title="Rule of 72"></a>Rule of 72</h2><p>The rule of 72 is a simple formula to estimate the time that you need to double your investment based on your return.</p><p>For example, how long you need to double your investment given 20% return?</p><pre><code>time = 72/xtime = 72/20time = 3.6 years</code></pre><p>How to proof?</p><pre><code>1 x 1.2 x 1.2 x 1.2 x 1.2 = 2.07</code></pre><p>Close enough right?</p><p>Ever wondered where did the 72 come from? Here&#x2019;s the proof.<br>Given the formula for future value is</p><pre><code>FV = PV x (1+x)^tFV = Future Value PV = Present Valuer = returnt = time</code></pre><p>If we want to double our investment, our PV must be multiplied by 2, we end up with</p><pre><code>2PV = PV (1+r)^t2 = (1+r)^t</code></pre><p>Let&#x2019;s add natural logarithm to both sides</p><pre><code>ln(2) = t ln(1+r)t = ln(2) / ln(1+r)</code></pre><p>According to taylor series expansion,</p><p>$ln(1+r) = x - \frac{x^2}{2} + \frac{x^3}{3} - \frac{x^4}{4} &#x2026;..$</p><p>However, if r is very small, we can safely assume that $\ ln(1+r) \approx r$<br>Thus making</p><pre><code>t = ln(2)/rt = 0.693/r</code></pre><p>Make it easier, we make it $\times100$</p><pre><code>t = 69.3/r</code></pre><p>But hey! It is not 72 right?!</p><p>Yeah, yeah, let me explain. 69 is only easily divisible by 1,3,23,69.<br>To make this formula more convenient people decide to use 72 instead.</p><p>Note that 72 is divisible by 1,2,3,4,6,8,12,18,24,36,72.</p><p>To conclude, the rule of 72 is very good to estimate how long your investment can double. You might wonder, how far off is the value of using this formula?</p><p>Well, I have made a graph below, the higher the return is, the bigger the error</p><p>But this just serves as an estimation so it is good enough for most scenario.</p><p><img src="/img/rule_of_72_plot.png" alt="Error rate"></p><p>Good enough right? You tell me</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Maths </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你有听过72法则吗? 为什么是72? 不是71, 73?</title>
      <link href="/zh-cn/Rule-of-72/"/>
      <url>/zh-cn/Rule-of-72/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x5230;&#x5E95;72&#x6CD5;&#x5219;&#x662F;&#x600E;&#x4E48;&#x6765;&#x7684;? &#x6570;&#x5B66;&#x5BB6;&#x4EEC;&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x7528;72&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x5462;</p><a id="more"></a><h2 id="&#x795E;&#x5947;&#x7684;72&#x6CD5;&#x5219;"><a href="#&#x795E;&#x5947;&#x7684;72&#x6CD5;&#x5219;" class="headerlink" title="&#x795E;&#x5947;&#x7684;72&#x6CD5;&#x5219;"></a>&#x795E;&#x5947;&#x7684;72&#x6CD5;&#x5219;</h2><p>&#x76F8;&#x4FE1;&#x5927;&#x5BB6;&#x591A;&#x5C11;&#x90FD;&#x542C;&#x8FC7;72&#x6CD5;&#x5219;&#x5427;. 72&#x6CD5;&#x5219;&#x662F;&#x4E00;&#x4E2A;&#x65B9;&#x7A0B;&#x5F0F;&#x6765;&#x8BA9;&#x4F60;&#x8BA1;&#x7B97;&#x4F60;&#x7684;&#x6295;&#x8D44;&#x8981;&#x591A;&#x4E45;&#x624D;&#x4F1A;&#x7FFB;&#x500D;&#x7684;&#x65B9;&#x7A0B;&#x5F0F;.</p><p>&#x5148;&#x6765;&#x4E2A;&#x4F8B;&#x5B50;, &#x5982;&#x679C;&#x4E00;&#x9879;&#x6295;&#x8D44;&#x80FD;&#x5E26;&#x6765;20%&#x7684;&#x56DE;&#x916C;, &#x4F60;&#x9700;&#x8981;&#x591A;&#x4E45;&#x624D;&#x80FD;&#x7FFB;&#x500D;?</p><pre><code>time = 72/xtime = 72/20time = 3.6 years</code></pre><p>&#x5982;&#x4F55;&#x8BC1;&#x5B9E;?</p><pre><code>1 x 1.2 x 1.2 x 1.2 x 1.2 = 2.07</code></pre><p>&#x867D;&#x7136;&#x4E0D;&#x662F;100%&#x51C6;&#x786E;, &#x53EF;&#x662F;&#x7528;&#x6765;&#x4F30;&#x8BA1;&#x662F;&#x975E;&#x5E38;&#x4E0D;&#x9519;&#x4E86;</p><p>&#x4E0D;&#x77E5;&#x9053;&#x4F60;&#x4EEC;&#x6709;&#x6CA1;&#x6709;&#x60F3;&#x8FC7;72&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x662F;&#x600E;&#x4E48;&#x6765;&#x7684;&#x5462;?<br>&#x6211;&#x4EEC;&#x90FD;&#x77E5;&#x9053;,</p><pre><code>FV = PV x (1+x)^tFV = Future Value PV = Present Valuer = returnt = time</code></pre><p>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x8981;&#x7FFB;&#x500D;&#x7684;&#x8BDD;, 2PV = PV,</p><pre><code>2PV = PV (1+r)^t2 = (1+r)^t</code></pre><p>&#x4E24;&#x8FB9;&#x90FD;&#x52A0;&#x4E0A;natural logarithm</p><pre><code>ln(2) = t ln(1+r)t = ln(2) / ln(1+r)</code></pre><p>&#x7136;&#x540E;&#x6211;&#x4EEC;&#x5F15;&#x7528; taylor series expansion, $ln(1+r) = x - \frac{x^2}{2} + \frac{x^3}{3} - \frac{x^4}{4} &#x2026;..$<br>(&#x522B;&#x53EB;&#x6211;&#x89E3;&#x91CA;)<br>&#x5982;&#x679C;r&#x662F;&#x8DB3;&#x591F;&#x5C0F;&#x7684;&#x8BDD;, &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5047;&#x8BBE; ln(1+r) = r</p><pre><code>t = ln(2)/rt = 0.693/r</code></pre><p>&#x4E3A;&#x4E86;&#x5BB9;&#x6613;&#x8BA1;&#x7B97;, &#x6211;&#x4EEC;&#x628A;&#x5B83; x100</p><pre><code>t = 69.3/r</code></pre><p>&#x53EF;&#x662F;&#x7B54;&#x6848;&#x4E0D;&#x662F;72&#x554A;, &#x4E3A;&#x4EC0;&#x4E48;&#x5462;? &#x770B;&#x5230;&#x8FD9;&#x91CC;&#x662F;&#x4E0D;&#x662F;&#x89C9;&#x5F97;&#x88AB;&#x5751;&#x4E86;<br>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7528;&#x7684;&#x662F;69, 69 &#x53EA;&#x80FD;&#x88AB;1,3,23,69&#x9664;, &#x90A3;&#x4E48;&#x8BA1;&#x7B97;&#x8D77;&#x6765;&#x6CA1;&#x90A3;&#x4E48;&#x65B9;&#x4FBF;<br>&#x5982;&#x679C;&#x6211;&#x4EEC;&#x7528;&#x7684;&#x662F;72, 72&#x53EF;&#x4EE5;&#x88AB;1,2,3,4,6,8,12,18,24,36,72&#x9664;, &#x53EF;&#x4EE5;&#x5F88;&#x5FEB;&#x7684;&#x5C31;&#x7B97;&#x51FA;&#x7B54;&#x6848;</p><p>&#x603B;&#x7ED3;&#x4E00;&#x4E0B;, 72&#x6CD5;&#x5219;&#x662F;&#x8BA9;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x8BA1;&#x7B97;&#x4E00;&#x9879;&#x6295;&#x8D44;&#x7684;&#x65B9;&#x7A0B;&#x5F0F;. &#x867D;&#x7136;&#x4E0D;&#x662F;100%&#x51C6;&#x786E;<br>&#x53EF;&#x662F;&#x7B97;&#x51FA;&#x6765;&#x7684;&#x7B54;&#x6848;&#x8DDF;&#x5B9E;&#x9645;&#x7B54;&#x6848;&#x4E0D;&#x4F1A;&#x6709;&#x592A;&#x5927;&#x504F;&#x5DEE;. &#x4EE5;&#x4E0B;&#x662F;72&#x6CD5;&#x5219;&#x4E0E;&#x5B9E;&#x9645;&#x7B54;&#x6848;&#x7684;&#x504F;&#x5DEE;</p><p><img src="/img/rule_of_72_plot.png" alt="Error rate"></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Maths </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is stock picking based on PE useful?</title>
      <link href="/Introduction-to-klsequant/"/>
      <url>/Introduction-to-klsequant/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>Whether it&#x2019;s PE, ROE, DY there are tons of financial jargons and financial ratios out there. The value investors emphasize on buying cheap (low PE, PB), while growth investors focus on buying stocks with high growth (high ROE etc). How do we know which ratio is the most useful to find out potentially profitable stocks? Let&#x2019;s find out.</p><a id="more"></a><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>For today&#x2019;s topic, I am going to introduce a backtesting tool that I have developed myself during free time. <strong><a href="https://www.klsequant.com" target="_blank" rel="noopener">https://www.klsequant.com</a></strong></p><p><img src="/img/klsequant_snapshot.PNG" alt="klsequant web app"></p><p>So what&#x2019;s the <strong>main goal/function of this web app?</strong> Say that you have a stock picking strategy that you wanted to test out. For example, buy a stock when PE is below 10 while ROE is above 20. Then you can backtest your strategy, to see how well your stock picking strategy has performed over the last 10 years (The dataset is from 2010 to 2019).</p><p>This is a web app based on Python Flask framework and this is a new challenge for me because I have only coded in Python but never in web environment. I coded the app and hosted in on <a href="https://www.pythonanywhere.com" target="_blank" rel="noopener">pythonanywhere</a>, definitely check them out if you are a Python guy.</p><h2 id="Brief-explanation-of-the-user-interface"><a href="#Brief-explanation-of-the-user-interface" class="headerlink" title="Brief explanation of the user interface"></a>Brief explanation of the user interface</h2><p><img src="/img/ui_snapshot.PNG" alt="klsequant web app user interface"></p><p>Let me have a basic introduction to the user interface. There is 14 inputs for you, the maximum number of shares field however must be filled, the other fields are fill solely based on your stock pick criteria.</p><h2 id="Usage-demonstration"><a href="#Usage-demonstration" class="headerlink" title="Usage demonstration"></a>Usage demonstration</h2><p>For demonstration purpose, the strategy I am using are buy when (Maximum number of stocks to buy is 10, PE is below 10, ROE is above 15 and DY above 3). If a stock fulfills the criteria it will get chosen to backtest the performance. I am using monthly frequency here (which mean the frequency you change your position to buy new stocks as the criteria might change over time for a stock) but there are plenty of choices for frequency for you to experiment as well.</p><p><img src="/img/demo_input_snapshot.PNG" alt="klsequant web app demo input"></p><p>Let&#x2019;s see how the performance goes. We gt a compounded annual growth rate (Cagr) of 36%. That is not bad at all! It is also shown that the strategy outperforms the KLSE index (the red line) as well. The program assumes that you start with capital of RM1,000.</p><p>Here&#x2019;s some explanation of the output.</p><p><img src="/img/output_graph_snapshot.PNG" alt="output graph"></p><p>The green line is the capital growth of your stock picking strategy. The red line corresponds to performance of KLSE index. We take the performance of KLSE index as benchmark so we know have we got a better return than simply buying KLSE ETF and hold.</p><p>The maximum return the strategy achieved is 48.3%, with worst return of -13.81%. On average, each trade generates 2.59% of return. The compounded annual growth rate of the strategy is 36%. The strategy also outperforms KLSE index greatly, with RM1,000 invested, you will get RM16,000 in return whereas KLSE only provide RM1,131 in return.</p><p><img src="/img/output_table_snapshot.PNG" alt="history of all stocks bought under the strategy"></p><p>This table is the stocks that fulfilled the stock picking criteria you defined. It gives you a rough idea what stocks will be picked based on your strategy. Why is there only 3 stocks bought in some months? It is because during the month no other stocks fulfill the stock picking criteria so only a little stocks are bought. (**Can you notice that this strategy captures super long bullish stock like Vitrox?)</p><h2 id="Afterthoughts"><a href="#Afterthoughts" class="headerlink" title="Afterthoughts"></a>Afterthoughts</h2><p>Let&#x2019;s have a little experiment before we call it a day. How about high PE stocks vs low PE stocks? The criteria is as follow:</p><pre><code>Number of Stocks to buy : 10Minimum ROE: 10</code></pre><p>Let&#x2019;s see with the same ROE, how will PE change the profitability of a stock picking strategy?Here&#x2019;s the result</p><p><strong>High PE strategy</strong></p><p><img src="/img/output_pe_min15_snapshot.PNG" alt="Strategy: Number of Stocks to buy: 10, minimum PE:15, minimum ROE:10"></p><hr><p><strong>Low PE strategy</strong></p><p><img src="/img/output_pe_max15_snapshot.PNG" alt="Strategy: Number of Stocks to buy: 10, maximum PE:15, minimum ROE:10"></p><p>The results are pretty clear that low PE DO outperform high PE stocks over time. But this is a very generalized idea, as we can see that overpriced stocks CAN get more expensive also (Like how glove counters&#x2019; PE went from 60 to 100). Howard Marks has a saying &#x201C;An overpriced stock doesn&#x2019;t mean that it will drop tomorrow&#x201D;. But generally speaking, low PE stock does offer a better return.</p><h2 id="Limitations"><a href="#Limitations" class="headerlink" title="Limitations"></a>Limitations</h2><p>There are limitations to this web app as well. I&#x2019;ll list several of them.</p><p>First, there is no technical analysis picking criteria (maybe in future? If you guys loved it I will develop this feature)</p><p>Second, there is no transaction fees calculated (which might eat away a huge chunk of your profit if your capital is small)</p><p>Well this marks the end of this post. Do let me know if you have any feedback whether it&#x2019;s good or bad. Comment below so I know what you think (I do read the comments).</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Backtesting </tag>
            
            <tag> Stock Picking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>靠PE选股有用吗??</title>
      <link href="/zh-cn/Introduction-to-klsequant/"/>
      <url>/zh-cn/Introduction-to-klsequant/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>PE, ROE, DY&#x5230;&#x5E95;&#x54EA;&#x4E00;&#x4E2A;&#x624D;&#x6709;&#x7528;?? &#x4EF7;&#x503C;&#x6295;&#x8D44;&#x8005;&#x4EEC;&#x63A8;&#x5D07;&#x4F4E;PE, &#x7528;&#x6700;&#x9AD8;&#x7684;&#x5B89;&#x5168;&#x8FB9;&#x9645;&#x6765;&#x4E70;&#x80A1;. &#x6210;&#x957F;&#x578B;&#x6295;&#x8D44;&#x8005;&#x53C8;&#x4E0D;&#x8FD9;&#x4E48;&#x8BA4;&#x4E3A;&#x4E86;, &#x4ED6;&#x4EEC;&#x5C31;&#x8BA4;&#x4E3A;&#x6210;&#x957F;&#x4E2D;&#x7684;&#x516C;&#x53F8;&#x5C31;&#x7B97;&#x6709;&#x9AD8;PE&#x4E5F;&#x662F;&#x6CA1;&#x5173;&#x7CFB;&#x7684;, &#x80A1;&#x7968;&#x91CC;&#x6CA1;&#x6709;&#x5BF9;&#x4E0E;&#x9519;&#x5C31;&#x53EA;&#x6709;&#x6700;&#x9002;&#x5408;&#x81EA;&#x5DF1;&#x7684;&#x7B56;&#x7565;. &#x8A00;&#x5F52;&#x6B63;&#x9898;, &#x5230;&#x5E95;&#x54EA;&#x4E00;&#x4E2A;&#x6307;&#x6807;&#x624D;&#x80FD;&#x5E2E;&#x52A9;&#x4F60;&#x627E;&#x5230;&#x80FD;&#x8D5A;&#x94B1;&#x7684;&#x597D;&#x80A1;&#x5462;? &#x6211;&#x4EEC;&#x6765;&#x63A2;&#x8BA8;&#x4E00;&#x4E0B;.</p><a id="more"></a><h2 id="&#x9686;&#x91CD;&#x4ECB;&#x7ECD;-klsequant-&#x80A1;&#x7968;&#x56DE;&#x6D4B;&#x7F51;&#x7EDC;&#x7A0B;&#x5E8F;"><a href="#&#x9686;&#x91CD;&#x4ECB;&#x7ECD;-klsequant-&#x80A1;&#x7968;&#x56DE;&#x6D4B;&#x7F51;&#x7EDC;&#x7A0B;&#x5E8F;" class="headerlink" title="&#x9686;&#x91CD;&#x4ECB;&#x7ECD; klsequant &#x80A1;&#x7968;&#x56DE;&#x6D4B;&#x7F51;&#x7EDC;&#x7A0B;&#x5E8F;"></a>&#x9686;&#x91CD;&#x4ECB;&#x7ECD; klsequant &#x80A1;&#x7968;&#x56DE;&#x6D4B;&#x7F51;&#x7EDC;&#x7A0B;&#x5E8F;</h2><p>&#x4ECA;&#x5929;&#x6211;&#x5C31;&#x50CF;&#x5927;&#x5BB6;&#x4ECB;&#x7ECD;&#x6211;&#x5728;MCO&#x671F;&#x95F4;&#x5199;&#x7684;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x7A0B;&#x5E8F; <strong><a href="https://www.klsequant.com" target="_blank" rel="noopener">https://www.klsequant.com</a></strong></p><p><img src="/img/klsequant_snapshot.PNG" alt="klsequant web app"></p><p>&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x6709;&#x4EC0;&#x4E48;&#x529F;&#x80FD;&#x5462;? <strong>&#x5B83;&#x80FD;&#x62FF;&#x6765;&#x505A;&#x4EC0;&#x4E48;? &#x80FD;&#x5403;&#x7684;&#x5417;?</strong> &#x5B83;&#x7684;&#x529F;&#x80FD;&#x662F;, &#x5F53;&#x4F60;&#x60F3;&#x51FA;&#x6216;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x9009;&#x80A1;&#x7B56;&#x7565;&#x65F6;, &#x4F8B;&#x5982;&#x5F53;PE&#x5C0F;&#x4E8E;10&#x548C;ROE&#x5927;&#x4E8E;20&#x7684;&#x65F6;&#x5019;&#x4E70;&#x5165;. &#x7136;&#x540E;&#x4F60;&#x5C31;&#x80FD;&#x7528;klsequant&#x6765;&#x56DE;&#x6D4B;&#x4F60;&#x7684;&#x9009;&#x80A1;&#x7B56;&#x7565;, &#x6765;&#x8BC4;&#x4F30;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x8FC7;&#x53BB;&#x7684;&#x8868;&#x73B0;. &#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x4F1A;&#x663E;&#x793A;&#x8FC7;&#x53BB;10&#x5E74;&#x7684;&#x8868;&#x73B0;, &#x5B83;&#x7528;&#x7684;&#x6570;&#x636E;&#x662F;2010-2019&#x6BCF;&#x4E00;&#x4E2A;&#x5728;&#x9A6C;&#x6765;&#x897F;&#x4E9A;&#x4E0A;&#x5E02;&#x7684;&#x80A1;&#x7968;.</p><p>&#x8FD9;&#x4E2A;&#x7F51;&#x7EDC;&#x7A0B;&#x5E8F;&#x662F;&#x57FA;&#x4E8E;Python Flask&#x6846;&#x67B6;&#x6765;develope&#x7684;. &#x867D;&#x7136;&#x4EE5;&#x524D;&#x7ECF;&#x5E38;&#x7528;Python&#x6765;&#x505A;&#x5206;&#x6790;&#x53EF;&#x662F;&#x6CA1;&#x6709;&#x8BD5;&#x8FC7;&#x5728;web&#x7684;&#x73AF;&#x5883;&#x7528;Python, &#x8FD9;&#x4E5F;&#x7B97;&#x662F;&#x5BF9;&#x6211;&#x81EA;&#x5DF1;&#x7684;&#x4E00;&#x4E2A;&#x6280;&#x672F;&#x6311;&#x6218;. Code&#x597D;&#x540E;&#x6211;&#x7528;&#x7684;&#x662F; <a href="https://www.pythonanywhere.com" target="_blank" rel="noopener">pythonanywhere</a> &#x6765;host&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;. &#x5982;&#x679C;&#x4F60;&#x4E5F;&#x6709;&#x7528;Python&#x7684;&#x8BDD;&#x53EF;&#x4EE5;&#x770B;&#x770B;&#x8FD9;&#x4E2A;&#x670D;&#x52A1;, &#x4EF7;&#x94B1;&#x5408;&#x7406;, &#x4E5F;&#x6709;&#x514D;&#x8D39;&#x7684;&#x914D;&#x5957;.</p><h2 id="&#x7528;&#x6237;&#x754C;&#x9762;-UI"><a href="#&#x7528;&#x6237;&#x754C;&#x9762;-UI" class="headerlink" title="&#x7528;&#x6237;&#x754C;&#x9762; UI"></a>&#x7528;&#x6237;&#x754C;&#x9762; UI</h2><p><img src="/img/ui_snapshot.PNG" alt="klsequant web app user interface"></p><p>&#x5148;&#x6765;&#x7B80;&#x5355;&#x4ECB;&#x7ECD;&#x4E00;&#x4E0B;&#x754C;&#x9762;, &#x8FD9;&#x91CC;&#x6709;&#x603B;&#x5171;14&#x4E2A;&#x9009;&#x9879;&#x7ED9;&#x4F60;, Maximum number of Shares(&#x6700;&#x9AD8;&#x6301;&#x80A1;&#x6570;&#x91CF;) &#x8FD9;&#x680F;&#x662F;&#x5FC5;&#x586B;&#x7684;, &#x5176;&#x4ED6;&#x9009;&#x9879;&#x5C31;&#x6839;&#x636E;&#x4F60;&#x9009;&#x80A1;&#x7B56;&#x7565;&#x6765;&#x586B;, &#x4E0D;&#x9700;&#x8981;&#x7684;&#x5C31;&#x7A7A;&#x7740;&#x7F62;&#x4E86;.</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>&#x8BDD;&#x4E0D;&#x591A;&#x8BF4;, &#x5148;&#x6765;&#x4E2A;demo. &#x6211;&#x60F3;&#x56DE;&#x6D4B;&#x6211;&#x7684;&#x9009;&#x80A1;&#x7B56;&#x7565;, &#x6211;&#x7684;&#x7B56;&#x7565;&#x5982;&#x4E0B;</p><ol><li>PE &#x5C0F;&#x4E8E; 10</li><li>ROE &#x5927;&#x4E8E; 15</li><li>DY &#x5927;&#x4E8E; 3</li></ol><p>&#x5982;&#x679C;&#x67D0;&#x4E2A;&#x80A1;&#x7968;&#x7B26;&#x5408;&#x8FD9;&#x4E2A;&#x6761;&#x4EF6;&#x7684;&#x8BDD;, &#x7A0B;&#x5E8F;&#x5C31;&#x4F1A;&#x201D;&#x4E70;&#x5165;&#x201D;. &#x4E00;&#x4E2A;&#x6708;&#x540E;, &#x91CD;&#x590D;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;, &#x5982;&#x679C;&#x4E0A;&#x4E2A;&#x6708;&#x201D;&#x4E70;&#x5165;&#x201D;&#x7684;&#x80A1;&#x9879;&#x8FD8;&#x7B26;&#x5408;&#x4F60;&#x7684;&#x7B56;&#x7565;, &#x90A3;&#x4E48;&#x7A0B;&#x5E8F;&#x5C31;&#x4F1A;&#x7EE7;&#x7EED;&#x4FDD;&#x7559;&#x8FD9;&#x4E2A;&#x80A1;&#x7968;, &#x5982;&#x679C;&#x5DF2;&#x7ECF;&#x4E0D;&#x7B26;&#x5408;&#x4E86;, &#x7A0B;&#x5E8F;&#x5C31;&#x4F1A;&#x628A;&#x90A3;&#x4E2A;&#x80A1;&#x7968;&#x201D;&#x5356;&#x51FA;&#x201D;. &#x5982;&#x679C;&#x4F60;&#x60F3;&#x73A9;&#x66F4;&#x957F;&#x671F;&#x7684;, &#x53EF;&#x4EE5;&#x5728;&#x4E0B;&#x9762;&#x7684;&#x9009;&#x9879;&#x9009;weekly, monthly, &#x6700;&#x4E45;&#x7684;&#x662F;yearly. &#x8FD9;&#x5C31;&#x662F;&#x4F60;&#x8C03;&#x914D;&#x4ED3;&#x4F4D;&#x7684;&#x9891;&#x7387;, &#x5C31;&#x8981;&#x770B;&#x4F60;&#x7684;&#x7B56;&#x7565;&#x662F;&#x957F;&#x671F;&#x8FD8;&#x662F;&#x77ED;&#x671F;&#x7B56;&#x7565;&#x54AF;. &#x4F60;&#x4E5F;&#x53EF;&#x4EE5;&#x5B9E;&#x9A8C;&#x4E00;&#x4E0B;&#x5230;&#x5E95;&#x957F;&#x671F;&#x8FD8;&#x662F;&#x77ED;&#x671F;&#x6295;&#x8D44;&#x6BD4;&#x8F83;&#x597D;.</p><p><img src="/img/demo_input_snapshot.PNG" alt="klsequant web app demo input"></p><p>&#x5230;&#x5E95;&#x6211;&#x7684;&#x9009;&#x80A1;&#x7B56;&#x7565;&#x8868;&#x73B0;&#x5982;&#x4F55;&#x5462;? &#x56DE;&#x6D4B;&#x7ED3;&#x679C;&#x662F;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x7684;&#x5E74;&#x534E;&#x56DE;&#x916C;&#x662F;36%, &#x7B97;&#x662F;&#x975E;&#x5E38;&#x597D;&#x7684;&#x56DE;&#x916C;&#x4E86;. &#x800C;&#x4E14;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x4E5F;&#x8DD1;&#x8D62;&#x4E86;&#x5927;&#x5E02;(&#x7EA2;&#x7EBF;&#x662F;&#x5927;&#x9A6C;&#x7EFC;&#x5408;&#x6307;&#x6570;&#x7684;&#x56DE;&#x916C;). Capital RM1,000&#x7684;&#x610F;&#x601D;&#x662F;&#x8D77;&#x521D;&#x8D44;&#x91D1;&#x662F;1&#x5343;.</p><p>&#x518D;&#x4ED4;&#x7EC6;&#x4E00;&#x70B9;&#x7684;&#x89E3;&#x91CA;&#x5982;&#x4E0B;</p><p><img src="/img/output_graph_snapshot.PNG" alt="output graph"></p><p>&#x7EFF;&#x7EBF;&#x4EE3;&#x8868;&#x7684;&#x662F;&#x4F60;&#x7B56;&#x7565;&#x7684;&#x8D44;&#x91D1;&#x6210;&#x957F;&#x7EBF;, &#x7EA2;&#x7EBF;&#x4EE3;&#x8868;&#x5927;&#x9A6C;&#x7EFC;&#x5408;&#x6307;&#x6570;&#x7684;&#x8D44;&#x91D1;&#x6210;&#x957F;. &#x8981;&#x600E;&#x4E48;&#x8BC4;&#x4F30;&#x4F60;&#x7684;&#x7B56;&#x7565;&#x597D;&#x4E0D;&#x597D;&#x5462;, &#x4E00;&#x4E2A;&#x5E38;&#x7528;&#x7684;&#x7B56;&#x7565;&#x662F;&#x7528;&#x5927;&#x5E02;&#x6765;&#x6BD4;&#x8F83;. (&#x5982;&#x679C;&#x4F60;&#x7684;&#x7B56;&#x7565;&#x8DD1;&#x8F93;&#x5927;&#x5E02;&#x4F60;&#x4E0D;&#x5982;&#x76F4;&#x63A5;&#x4E70;&#x9A6C;&#x80A1;ETF&#x66F4;&#x597D;)</p><p>Maximum return&#x662F;&#x671F;&#x95F4;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x6700;&#x5927;&#x7684;&#x4E00;&#x4E2A;&#x6536;&#x76CA;, &#x8FD9;&#x91CC;&#x663E;&#x793A;&#x662F;48.3%, &#x610F;&#x601D;&#x662F;&#x8BF4;&#x8FD9;&#x671F;&#x95F4;&#x6709;&#x4E00;&#x4E2A;&#x80A1;&#x7968;&#x5728;&#x4E00;&#x4E2A;&#x6708;&#x91CC;&#x8FBE;&#x5230;&#x4E86;48.4%&#x7684;&#x56DE;&#x916C;. Minimum return, &#x6700;&#x4F4E;&#x56DE;&#x916C;&#x662F;-13.81%, &#x8FD9;&#x4E5F;&#x4E0D;&#x9519;&#x561B;&#x6700;&#x5927;&#x56DE;&#x916C;&#x8FDC;&#x8FDC;&#x6BD4;&#x6700;&#x4F4E;&#x56DE;&#x916C;&#x9AD8;. Average return&#x662F;&#x6307;&#x4F60;&#x5E73;&#x5747;&#x6BCF;&#x4E00;&#x4E2A;&#x4EA4;&#x6613;&#x7684;&#x56DE;&#x916C;&#x662F;&#x591A;&#x5C11;. CAGR&#x5C31;&#x662F;&#x5E74;&#x5316;&#x56DE;&#x916C;, &#x8FD9;&#x7B56;&#x7565;&#x6709;&#x7740;36%&#x7684;&#x5E74;&#x5316;&#x56DE;&#x916C;. &#x8BDD;&#x8BF4;&#x8FD9;&#x7B56;&#x7565;&#x4E5F;&#x5927;&#x5927;&#x7684;&#x8DD1;&#x8D62;&#x4E86;&#x6307;&#x6570;, 10&#x5E74;&#x95F4;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x4F1A;&#x628A;&#x4F60;&#x7684;RM1,000&#x53D8;&#x6210;RM16,000, &#x53CD;&#x800C;&#x6307;&#x6570;&#x53EA;&#x80FD;&#x628A;&#x4F60;&#x7684;RM1,000&#x53D8;&#x6210;RM1,131.</p><p><img src="/img/output_table_snapshot.PNG" alt="history of all stocks bought under the strategy"></p><p>&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x5230;&#x5E95;&#x6293;&#x5230;&#x4E86;&#x4EC0;&#x4E48;&#x80A1;&#x5462;? &#x8FD9;&#x4E2A;&#x8868;&#x683C;&#x5C31;&#x663E;&#x793A;&#x4E86;&#x671F;&#x95F4;&#x6240;&#x6709;&#x88AB;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x6293;&#x5230;&#x7684;&#x80A1;&#x7968;. &#x4ECE;&#x8FD9;&#x91CC;&#x4F60;&#x53EF;&#x4EE5;&#x5927;&#x6982;&#x77E5;&#x9053;&#x4F60;&#x7B56;&#x7565;&#x9009;&#x51FA;&#x6765;&#x7684;&#x516C;&#x53F8;&#x662F;&#x600E;&#x4E48;&#x6837;&#x7684;. &#x4F60;&#x4E5F;&#x8BB8;&#x4F1A;&#x597D;&#x5947;&#x4E3A;&#x4EC0;&#x4E48;&#x4E00;&#x4E0B;&#x6708;&#x4EFD;&#x53EA;&#x6301;&#x6709;3&#x4E2A;&#x80A1;&#x7968;, &#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x5F53;&#x65F6;&#x7B26;&#x5408;&#x6761;&#x4EF6;&#x7684;&#x80A1;&#x7968;&#x53EA;&#x6709;3&#x4E2A;, &#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x201D;&#x4E70;&#x5165;&#x201D;&#x7684;&#x5C31;&#x53EA;&#x6709;3&#x4E2A;. (&#x6709;&#x6CA1;&#x6709;&#x53D1;&#x73B0;&#x5230;&#x8FD9;&#x4E2A;&#x7B56;&#x7565;&#x6293;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x8D85;&#x7EA7;&#x725B;&#x80A1; VITROX?)</p><h2 id="&#x4E8B;&#x540E;&#x60F3;&#x6CD5;"><a href="#&#x4E8B;&#x540E;&#x60F3;&#x6CD5;" class="headerlink" title="&#x4E8B;&#x540E;&#x60F3;&#x6CD5;"></a>&#x4E8B;&#x540E;&#x60F3;&#x6CD5;</h2><p>&#x5728;&#x6536;&#x7B14;&#x524D;&#x6211;&#x4EEC;&#x6765;&#x505A;&#x4E00;&#x4E2A;&#x5B9E;&#x9A8C;. &#x6839;&#x636E;PE&#x9009;&#x80A1;&#x53EF;&#x9760;&#x5417;?? &#x7B56;&#x7565;&#x5982;&#x4E0B;</p><pre><code>Number of Stocks to buy : 10Minimum ROE: 10</code></pre><p>&#x6211;&#x4EEC;&#x5C31;&#x6765;&#x770B;&#x770B;, &#x5728;&#x76C8;&#x5229;&#x80FD;&#x529B;(ROE)&#x4E00;&#x6837;&#x7684;&#x60C5;&#x51B5;&#x4E0B;, &#x9AD8;PE&#x548C;&#x4F4E;PE&#x7684;&#x80A1;&#x7968;&#x7684;&#x8868;&#x73B0;.</p><p><strong>&#x9AD8;PE&#x7B56;&#x7565;</strong></p><p><img src="/img/output_pe_min15_snapshot.PNG" alt="Strategy: Number of Stocks to buy: 10, minimum PE:15, minimum ROE:10"></p><hr><p><strong>&#x4F4E;PE&#x7B56;&#x7565;</strong></p><p><img src="/img/output_pe_max15_snapshot.PNG" alt="Strategy: Number of Stocks to buy: 10, maximum PE:15, minimum ROE:10"></p><p>&#x56DE;&#x6D4B;&#x7ED3;&#x679C;&#x4E5F;&#x4E0D;&#x7528;&#x591A;&#x8BF4;&#x4E86;, &#x4F4E;PE&#x7B56;&#x7565;&#x662F;<strong>&#x660E;&#x663E;</strong>&#x7684;&#x8DD1;&#x8D62;&#x9AD8;PE&#x7B56;&#x7565;. &#x53EF;&#x662F;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x5927;&#x6982;&#x7684;&#x6982;&#x5FF5;&#x800C;&#x5DF2;, &#x4E0D;&#x662F;&#x6240;&#x6709;&#x9AD8;PE&#x7684;&#x80A1;&#x90FD;&#x4E0D;&#x4F1A;&#x6DA8;. (&#x5C31;&#x50CF;TOPGLOVE&#x4ECE;PE60&#x6DA8;&#x5230;PE100++). &#x6295;&#x8D44;&#x754C;&#x5927;&#x4F6C;Howard Marks&#x4E5F;&#x8BF4; &#x201C;An overpriced stock doesn&#x2019;t mean that it will drop tomorrow&#x201D;, &#x610F;&#x601D;&#x662F;&#x4E00;&#x4E2A;&#x9AD8;&#x4F30;&#x7684;&#x80A1;&#x7968;&#x4E0D;&#x4EE3;&#x8868;&#x5B83;&#x660E;&#x5929;&#x5C31;&#x4F1A;&#x6389;. &#x80A1;&#x5E02;&#x91CC;&#x6CA1;&#x6709;&#x7EDD;&#x5BF9;, &#x53EF;&#x662F;&#x4ECE;&#x6570;&#x636E;&#x91CC;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x53EF;&#x4EE5;&#x5927;&#x6982;&#x7387;&#x8DD1;&#x8D62;&#x7684;&#x7B56;&#x7565;&#x7684;.</p><h2 id="&#x4E0D;&#x8DB3;&#x4E4B;&#x5904;"><a href="#&#x4E0D;&#x8DB3;&#x4E4B;&#x5904;" class="headerlink" title="&#x4E0D;&#x8DB3;&#x4E4B;&#x5904;"></a>&#x4E0D;&#x8DB3;&#x4E4B;&#x5904;</h2><p>&#x8FD9;&#x4E2A;&#x7F51;&#x7EDC;&#x7A0B;&#x5E8F;&#x4E5F;&#x4E0D;&#x662F;100%&#x5B8C;&#x7F8E;&#x7684;, &#x4E5F;&#x6709;&#x4E00;&#x4E0B;&#x4E0D;&#x8DB3;&#x7684;&#x5730;&#x65B9;</p><ol><li>&#x6CA1;&#x6709;&#x6280;&#x672F;&#x5206;&#x6790;&#x7684;&#x9009;&#x9879;, &#x53EF;&#x80FD;&#x4F60;&#x7684;&#x7B56;&#x7565;&#x662F;&#x8981;&#x7B49;MA, MACD&#x9EC4;&#x91D1;&#x4EA4;&#x53C9;&#x7684;, &#x53EF;&#x662F;&#x76EE;&#x524D;&#x8FD9;&#x4E2A;&#x7A0B;&#x5E8F;&#x53EA;&#x80FD;&#x5206;&#x6790;&#x57FA;&#x672C;&#x9762;. (&#x5982;&#x679C;&#x53CD;&#x5E94;&#x597D;&#x7684;&#x8BDD;&#x53EF;&#x80FD;&#x4F1A;&#x52A0;&#x5165;&#x6280;&#x672F;&#x5206;&#x6790;&#x9009;&#x9879;, &#x9700;&#x8981;&#x65F6;&#x95F4;&#x548C;&#x7CBE;&#x529B;&#x6765;&#x5F00;&#x53D1;&#x54C8;&#x54C8;)</li><li>&#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x4EA4;&#x6613;&#x8D39;&#x7528;. &#x5982;&#x679C;&#x4F60;&#x7684;&#x672C;&#x94B1;&#x5C0F;&#x7684;&#x8BDD;, &#x4EA4;&#x6613;&#x8D39;&#x7528;&#x4F1A;&#x5360;&#x4F60;&#x672C;&#x91D1;&#x5F88;&#x5927;&#x7684;&#x6BD4;&#x4F8B;.</li></ol><p>&#x597D;&#x5427;&#x4ECA;&#x5929;&#x5C31;&#x5230;&#x8FD9;&#x91CC;&#x4E86;, &#x5982;&#x679C;&#x6709;&#x4EC0;&#x4E48;feedback&#x53EF;&#x4EE5;&#x5728;&#x4E0B;&#x9762;&#x7559;&#x8A00;(&#x4E0D;&#x7BA1;&#x662F;&#x597D;&#x662F;&#x574F;, &#x6709;feedback&#x624D;&#x80FD;&#x505A;&#x5F97;&#x66F4;&#x597D;). <strong>&#x4EE5;&#x4E0A;&#x6587;&#x7AE0;&#x53EA;&#x4F9B;&#x5B66;&#x4E60;&#x7528;&#x9014;&#x4E0D;&#x662F;&#x6295;&#x8D44;&#x5EFA;&#x8BAE;</strong></p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Backtesting </tag>
            
            <tag> Stock Picking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Is candlestick pattern effective in Bursa Malaysia?</title>
      <link href="/first-md/"/>
      <url>/first-md/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>If you have been investing or trading stocks you must have come across about Japanese Candlestick Pattern.<br>How effective are them? Can we use them reliably in investing or trading? Let&#x2019;s find out.</p><a id="more"></a><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>I assume that you already knew the anatomy of a candlestick so I will skip the explanation part.</p><p>There are dozens of candlestick pattern out there, be it bullish or bearish ones, what we wanted to know is that can we used them reliably in our investing and trading activities.</p><h2 id="Methodology-Skip-this-part-if-you&#x2019;re-not-into-tech"><a href="#Methodology-Skip-this-part-if-you&#x2019;re-not-into-tech" class="headerlink" title="Methodology - Skip this part if you&#x2019;re not into tech"></a>Methodology - Skip this part if you&#x2019;re not into tech</h2><p>It is possible to handcode a program to identify every pattern but that will be a lot of workload. Fortunately, there is a python library called <strong><a href="http://mrjbq7.github.io/ta-lib/" target="_blank" rel="noopener">TA-Lib</a></strong>, which included the identification of candlestick pattern given price data. In this study, <strong>10 years worth</strong> of daily price data (Open, Low, High, Close) was scraped online and saved into a .csv file.</p><p>I have written a piece of code that will iterate over the price data to find candlestick pattern. Comment below if you wanted a copy of the code and data.</p><h3 id="Loading-the-patterns"><a href="#Loading-the-patterns" class="headerlink" title="Loading the patterns"></a>Loading the patterns</h3><p>We need pandas module for data processing, and talib for it&#x2019;s fast and ready-made candle recognition capability.<br>After that, we need to make a list of every pattern that we wanted to backtest.</p><p></p><figure class="highlight plain hljs"><figcaption><span>pandas as pd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import talib</span><br><span class="line">import os</span><br><span class="line">pd.set_option(&apos;expand_frame_repr&apos;, False)</span><br><span class="line"></span><br><span class="line">pattern_name = [&apos;CDL2CROWS&apos;,&apos;CDL3BLACKCROWS&apos;,&apos;CDL3INSIDE&apos;,&apos;CDL3LINESTRIKE&apos;,&apos;CDL3OUTSIDE&apos;,</span><br><span class="line">                &apos;CDL3STARSINSOUTH&apos;,&apos;CDL3WHITESOLDIERS&apos;,&apos;CDLABANDONEDBABY&apos;,&apos;CDLADVANCEBLOCK&apos;,</span><br><span class="line">                &apos;CDLBELTHOLD&apos;,&apos;CDLBREAKAWAY&apos;,&apos;CDLCLOSINGMARUBOZU&apos;,&apos;CDLCONCEALBABYSWALL&apos;,</span><br><span class="line">                &apos;CDLCOUNTERATTACK&apos;,&apos;CDLDARKCLOUDCOVER&apos;,&apos;CDLDOJI&apos;,&apos;CDLDOJISTAR&apos;,</span><br><span class="line">                &apos;CDLDRAGONFLYDOJI&apos;,&apos;CDLENGULFING&apos;,&apos;CDLEVENINGDOJISTAR&apos;,&apos;CDLEVENINGSTAR&apos;,</span><br><span class="line">                &apos;CDLGAPSIDESIDEWHITE&apos;,&apos;CDLGRAVESTONEDOJI&apos;,&apos;CDLHAMMER&apos;,&apos;CDLHANGINGMAN&apos;,</span><br><span class="line">                &apos;CDLHARAMI&apos;,&apos;CDLHARAMICROSS&apos;,&apos;CDLHIGHWAVE&apos;,&apos;CDLHIKKAKE&apos;,&apos;CDLHIKKAKEMOD&apos;,</span><br><span class="line">                &apos;CDLHOMINGPIGEON&apos;,&apos;CDLIDENTICAL3CROWS&apos;,&apos;CDLINNECK&apos;,&apos;CDLINVERTEDHAMMER&apos;,&apos;CDLKICKING&apos;,</span><br><span class="line">                &apos;CDLKICKING&apos;,&apos;CDLKICKINGBYLENGTH&apos;,&apos;CDLLADDERBOTTOM&apos;,&apos;CDLLONGLEGGEDDOJI&apos;,</span><br><span class="line">                &apos;CDLLONGLINE&apos;,&apos;CDLMARUBOZU&apos;,&apos;CDLMATCHINGLOW&apos;,&apos;CDLMATHOLD&apos;,&apos;CDLMORNINGDOJISTAR&apos;,</span><br><span class="line">                &apos;CDLMORNINGSTAR&apos;,&apos;CDLONNECK&apos;,&apos;CDLPIERCING&apos;,&apos;CDLRICKSHAWMAN&apos;,&apos;CDLRISEFALL3METHODS&apos;</span><br><span class="line">                &apos;CDLSEPARATINGLINES&apos;,&apos;CDLSHOOTINGSTAR&apos;,&apos;CDLSHORTLINE&apos;,&apos;CDLSPINNINGTOP&apos;,</span><br><span class="line">                &apos;CDLSTALLEDPATTERN&apos;,&apos;CDLSTICKSANDWICH&apos;,&apos;CDLTAKURI&apos;,&apos;CDLTASUKIGAP&apos;,&apos;CDLTHRUSTING&apos;,</span><br><span class="line">                &apos;CDLTRISTAR&apos;,&apos;CDLUNIQUE3RIVER&apos;,&apos;CDLUPSIDEGAP2CROWS&apos;,&apos;CDLXSIDEGAP3METHODS&apos;]</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Reading-stock-market-data"><a href="#Reading-stock-market-data" class="headerlink" title="Reading stock market data"></a>Reading stock market data</h3><p>Candlestick analysis are mostly used by short term traders, so the days I wanted to backtest are in short term as well.<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">days = [1,5,10,30]</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line">print(&apos;current working directory:&apos;,path)</span><br><span class="line">stock_code_list = []</span><br><span class="line">for root, dirs, files in os.walk(path):</span><br><span class="line">    if files:</span><br><span class="line">        for f in files:</span><br><span class="line">            if &apos;.csv&apos; in f:</span><br><span class="line">                stock_code_list.append(f.split(&apos;.csv&apos;)[0])</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="Let&#x2019;s-analyse"><a href="#Let&#x2019;s-analyse" class="headerlink" title="Let&#x2019;s analyse!"></a>Let&#x2019;s analyse!</h3><p>Let the code does its job&#x2026;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">output = pd.DataFrame()</span><br><span class="line">final_output = pd.DataFrame(columns=[&apos;Pattern&apos;, &apos;Win Rate (1 Day)&apos;, &apos;Win Rate (5 Days)&apos;,&apos;Win Rate (10 Days)&apos;,</span><br><span class="line">                                     &apos;Win Rate (30 Days)&apos;])</span><br><span class="line"></span><br><span class="line">for pattern in pattern_name:</span><br><span class="line">    for code in stock_code_list:</span><br><span class="line">        df = pd.read_csv(code + &apos;.csv&apos;, parse_dates=[1])</span><br><span class="line"></span><br><span class="line">        for i in days:</span><br><span class="line">            df[&apos;Gains after &apos; + str(i) + &apos; days&apos;] = df[&apos;Close&apos;].shift(-i)/df[&apos;Close&apos;] - 1</span><br><span class="line"></span><br><span class="line">        df[pattern] = getattr(talib, pattern)(df[&apos;Open&apos;].astype(float).values, df[&apos;High&apos;].astype(float).values,</span><br><span class="line">                                                        df[&apos;Low&apos;].astype(float).values,df[&apos;Close&apos;].astype(float).values)</span><br><span class="line"></span><br><span class="line">        pattern_df = df[df[pattern] != 0]</span><br><span class="line">        output = output.append(pattern_df)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        bullish_output = output[output[pattern]&gt;0]</span><br><span class="line">        OneDayWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 1 days&apos;] &gt; 0]) /\</span><br><span class="line">                        len(bullish_output[&apos;Gains after 1 days&apos;])</span><br><span class="line">        FiveDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 5 days&apos;] &gt; 0]) /\</span><br><span class="line">                          len(bullish_output[&apos;Gains after 5 days&apos;])</span><br><span class="line">        TenDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 10 days&apos;] &gt; 0]) /\</span><br><span class="line">                         len(bullish_output[&apos;Gains after 10 days&apos;])</span><br><span class="line">        ThirtyDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 30 days&apos;] &gt; 0]) /\</span><br><span class="line">                            len(bullish_output[&apos;Gains after 30 days&apos;])</span><br><span class="line">        final_output = final_output.append({&apos;Pattern&apos;: &apos;Bullish &apos; + pattern,</span><br><span class="line">                                            &apos;Win Rate (1 Day)&apos;: OneDayWinRate,</span><br><span class="line">                                            &apos;Win Rate (5 Days)&apos;: FiveDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (10 Days)&apos;: TenDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (30 Days)&apos;: ThirtyDaysWinRate}, ignore_index=True)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;No bullish pattern&quot;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        bearish_output = output[output[pattern] &lt; 0]</span><br><span class="line">        OneDayWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 1 days&apos;] &gt; 0]) / \</span><br><span class="line">                        len(bearish_output[&apos;Gains after 1 days&apos;])</span><br><span class="line">        FiveDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 5 days&apos;] &gt; 0]) / \</span><br><span class="line">                          len(bearish_output[&apos;Gains after 5 days&apos;])</span><br><span class="line">        TenDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 10 days&apos;] &gt; 0]) / \</span><br><span class="line">                         len(bearish_output[&apos;Gains after 10 days&apos;])</span><br><span class="line">        ThirtyDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 30 days&apos;] &gt; 0]) / \</span><br><span class="line">                            len(bearish_output[&apos;Gains after 30 days&apos;])</span><br><span class="line">        final_output = final_output.append({&apos;Pattern&apos;: &apos;Bearish &apos; + pattern,</span><br><span class="line">                                            &apos;Win Rate (1 Day)&apos;: OneDayWinRate,</span><br><span class="line">                                            &apos;Win Rate (5 Days)&apos;: FiveDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (10 Days)&apos;: TenDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (30 Days)&apos;: ThirtyDaysWinRate}, ignore_index=True)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;No bearish pattern&quot;)</span><br><span class="line"></span><br><span class="line">    print(&apos;Done analysis on &apos; + pattern)</span><br><span class="line"></span><br><span class="line">print(final_output)</span><br><span class="line">final_output.to_csv(&apos;candlestick_analysis.csv&apos;,index=False)</span><br></pre></td></tr></tbody></table></figure><p></p><hr><h2 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h2><p>The performance of each candlestick is measured by how likely it will go up in (1,5,10,30) days. A win rate of 0.7 means that in 7 out of 10 times the price will go up after the pattern appeared.</p><p>Here&#x2019;s the entire backtesting results!</p><p><img src="/img/candlestick_result_table.png" alt="Candlestick pattern and win rate in one table"></p><p>Very surprisingly some bullish pattern has very low win rate, my thinking is that when a pattern is too widely known and used, the edge of the pattern diminishes as everyone knows the information making it useless. Besides, the findings also showed very little pattern with winrate more than 50% (I thought I will found my golden formula here :disappointed: ). However there is some relatively high winrate patterns with winrate over 0.45. Perhaps with enough risk management techniques you might be able to construct a consistently profitable strategy.</p><h2 id="Some-Afterthoughts"><a href="#Some-Afterthoughts" class="headerlink" title="Some Afterthoughts"></a>Some Afterthoughts</h2><p>Of course there are something this study misses, for example, some candlestick pattern are only effective while they are on top of the trend etc. Nevertheless this brings me a general view of the effectiveness of candlestick pattern.</p><p>I am wondering combined with other technical indicators will the winrate be higher? Also, the low winrate doesn&#x2019;t mean that it is worthless. A 20% winrate indicats there it is 80% likely that the price will drop tomorrow. How about using this as a indicator for shorting of stocks? Well, I leave this to you guys to figure out. Let me know what you think in the comments.</p><p>This study is purely for discovery and fun. Please be responsible of your own money and trade at your own risk.</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Candlestick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蜡烛图技术分析在马股有用吗? 胜率有多高?</title>
      <link href="/zh-cn/first-md/"/>
      <url>/zh-cn/first-md/</url>
      
        <content type="html"><![CDATA[<html><head></head><body><p>&#x5728;&#x80A1;&#x5E02;/&#x6C47;&#x5E02;&#x6709;&#x51E0;&#x5E74;&#x7ECF;&#x9A8C;&#x7684;&#x670B;&#x53CB;&#x76F8;&#x4FE1;&#x90FD;&#x77E5;&#x9053;&#x4EC0;&#x4E48;&#x662F;&#x8721;&#x70DB;&#x56FE;<br>&#x53EF;&#x662F;&#x6709;&#x6CA1;&#x6709;&#x60F3;&#x8FC7;&#x8721;&#x70DB;&#x56FE;&#x5728;&#x9A6C;&#x80A1;&#x7684;&#x80DC;&#x7387;&#x6709;&#x591A;&#x5927;&#x5462;? &#x5230;&#x5E95;&#x8721;&#x70DB;&#x56FE;&#x662F;&#x4E0D;&#x662F;&#x4E2A;&#x53EF;&#x9760;&#x7684;&#x6307;&#x6807;?</p><a id="more"></a><h2 id="&#x4ECB;&#x7ECD;"><a href="#&#x4ECB;&#x7ECD;" class="headerlink" title="&#x4ECB;&#x7ECD;"></a>&#x4ECB;&#x7ECD;</h2><p>&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x591A;&#x52A0;&#x4ECB;&#x7ECD;&#x8721;&#x70DB;&#x56FE;&#x7684;&#x6784;&#x9020;&#x548C;&#x5386;&#x53F2;&#x4E86;, &#x6709;&#x5174;&#x8DA3;&#x7684;&#x670B;&#x53CB;&#x53EF;&#x4EE5;&#x4E0A;&#x7F51;&#x641C;&#x7D22;&#x6709;&#x5173;&#x8D44;&#x8BAF;, &#x800C;&#x4E14;&#x6709;&#x5173;&#x8D44;&#x8BAF;&#x4E5F;&#x76F8;&#x5F53;&#x4E30;&#x5BCC;, &#x4E5F;&#x4E0D;&#x7528;&#x6211;&#x6765;&#x4ECB;&#x7ECD;&#x4E86;.</p><h2 id="&#x7814;&#x7A76;&#x65B9;&#x6CD5;"><a href="#&#x7814;&#x7A76;&#x65B9;&#x6CD5;" class="headerlink" title="&#x7814;&#x7A76;&#x65B9;&#x6CD5;"></a>&#x7814;&#x7A76;&#x65B9;&#x6CD5;</h2><p>&#x5C0F;&#x7F16;&#x7528;&#x4E86;Python&#x7F16;&#x7A0B;&#x7A0B;&#x5E8F;&#x6765;&#x56DE;&#x6D4B;&#x5404;&#x4E2A;&#x8721;&#x70DB;&#x56FE;&#x5F62;&#x5728;&#x8FC7;&#x53BB;10&#x5E74;&#x9A6C;&#x80A1;&#x6BCF;&#x4E00;&#x4E2A;&#x4E2A;&#x80A1;&#x7684;&#x8868;&#x73B0;.</p><h3 id="&#x521D;&#x59CB;&#x5316;"><a href="#&#x521D;&#x59CB;&#x5316;" class="headerlink" title="&#x521D;&#x59CB;&#x5316;"></a>&#x521D;&#x59CB;&#x5316;</h3><p>&#x6211;&#x4EEC;&#x9700;&#x8981;pandas&#x6765;&#x5904;&#x7406;&#x5E9E;&#x5927;&#x7684;&#x6570;&#x636E;&#x548C;talib&#x5185;&#x5EFA;&#x7684;&#x8721;&#x70DB;&#x56FE;&#x6807;&#x8BC6;&#x529F;&#x80FD;.<br>&#x4E4B;&#x540E;, &#x6211;&#x4EEC;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x6D4B;&#x8BD5;&#x7684;&#x8721;&#x70DB;&#x56FE;&#x6848;&#x7684;list.</p><p></p><figure class="highlight plain hljs"><figcaption><span>pandas as pd</span></figcaption><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import talib</span><br><span class="line">import os</span><br><span class="line">pd.set_option(&apos;expand_frame_repr&apos;, False)</span><br><span class="line"></span><br><span class="line">pattern_name = [&apos;CDL2CROWS&apos;,&apos;CDL3BLACKCROWS&apos;,&apos;CDL3INSIDE&apos;,&apos;CDL3LINESTRIKE&apos;,&apos;CDL3OUTSIDE&apos;,</span><br><span class="line">                &apos;CDL3STARSINSOUTH&apos;,&apos;CDL3WHITESOLDIERS&apos;,&apos;CDLABANDONEDBABY&apos;,&apos;CDLADVANCEBLOCK&apos;,</span><br><span class="line">                &apos;CDLBELTHOLD&apos;,&apos;CDLBREAKAWAY&apos;,&apos;CDLCLOSINGMARUBOZU&apos;,&apos;CDLCONCEALBABYSWALL&apos;,</span><br><span class="line">                &apos;CDLCOUNTERATTACK&apos;,&apos;CDLDARKCLOUDCOVER&apos;,&apos;CDLDOJI&apos;,&apos;CDLDOJISTAR&apos;,</span><br><span class="line">                &apos;CDLDRAGONFLYDOJI&apos;,&apos;CDLENGULFING&apos;,&apos;CDLEVENINGDOJISTAR&apos;,&apos;CDLEVENINGSTAR&apos;,</span><br><span class="line">                &apos;CDLGAPSIDESIDEWHITE&apos;,&apos;CDLGRAVESTONEDOJI&apos;,&apos;CDLHAMMER&apos;,&apos;CDLHANGINGMAN&apos;,</span><br><span class="line">                &apos;CDLHARAMI&apos;,&apos;CDLHARAMICROSS&apos;,&apos;CDLHIGHWAVE&apos;,&apos;CDLHIKKAKE&apos;,&apos;CDLHIKKAKEMOD&apos;,</span><br><span class="line">                &apos;CDLHOMINGPIGEON&apos;,&apos;CDLIDENTICAL3CROWS&apos;,&apos;CDLINNECK&apos;,&apos;CDLINVERTEDHAMMER&apos;,&apos;CDLKICKING&apos;,</span><br><span class="line">                &apos;CDLKICKING&apos;,&apos;CDLKICKINGBYLENGTH&apos;,&apos;CDLLADDERBOTTOM&apos;,&apos;CDLLONGLEGGEDDOJI&apos;,</span><br><span class="line">                &apos;CDLLONGLINE&apos;,&apos;CDLMARUBOZU&apos;,&apos;CDLMATCHINGLOW&apos;,&apos;CDLMATHOLD&apos;,&apos;CDLMORNINGDOJISTAR&apos;,</span><br><span class="line">                &apos;CDLMORNINGSTAR&apos;,&apos;CDLONNECK&apos;,&apos;CDLPIERCING&apos;,&apos;CDLRICKSHAWMAN&apos;,&apos;CDLRISEFALL3METHODS&apos;</span><br><span class="line">                &apos;CDLSEPARATINGLINES&apos;,&apos;CDLSHOOTINGSTAR&apos;,&apos;CDLSHORTLINE&apos;,&apos;CDLSPINNINGTOP&apos;,</span><br><span class="line">                &apos;CDLSTALLEDPATTERN&apos;,&apos;CDLSTICKSANDWICH&apos;,&apos;CDLTAKURI&apos;,&apos;CDLTASUKIGAP&apos;,&apos;CDLTHRUSTING&apos;,</span><br><span class="line">                &apos;CDLTRISTAR&apos;,&apos;CDLUNIQUE3RIVER&apos;,&apos;CDLUPSIDEGAP2CROWS&apos;,&apos;CDLXSIDEGAP3METHODS&apos;]</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="&#x8BFB;&#x53D6;&#x80A1;&#x5E02;&#x6570;&#x636E;"><a href="#&#x8BFB;&#x53D6;&#x80A1;&#x5E02;&#x6570;&#x636E;" class="headerlink" title="&#x8BFB;&#x53D6;&#x80A1;&#x5E02;&#x6570;&#x636E;"></a>&#x8BFB;&#x53D6;&#x80A1;&#x5E02;&#x6570;&#x636E;</h3><p>&#x901A;&#x5E38;&#x4F7F;&#x7528;&#x8721;&#x70DB;&#x56FE;&#x7684;&#x90FD;&#x662F;&#x77ED;&#x671F;&#x4EA4;&#x6613;&#x8005;, &#x6240;&#x4EE5;&#x6211;&#x6D4B;&#x8BD5;&#x7684;&#x5929;&#x6570;&#x4E5F;&#x8F83;&#x77ED;.<br></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">days = [1,5,10,30]</span><br><span class="line"></span><br><span class="line">path = os.getcwd()</span><br><span class="line">print(&apos;current working directory:&apos;,path)</span><br><span class="line">stock_code_list = []</span><br><span class="line">for root, dirs, files in os.walk(path):</span><br><span class="line">    if files:</span><br><span class="line">        for f in files:</span><br><span class="line">            if &apos;.csv&apos; in f:</span><br><span class="line">                stock_code_list.append(f.split(&apos;.csv&apos;)[0])</span><br></pre></td></tr></tbody></table></figure><p></p><h3 id="&#x5F00;&#x59CB;&#x5206;&#x6790;"><a href="#&#x5F00;&#x59CB;&#x5206;&#x6790;" class="headerlink" title="&#x5F00;&#x59CB;&#x5206;&#x6790;"></a>&#x5F00;&#x59CB;&#x5206;&#x6790;</h3><p>&#x4EE3;&#x7801;&#x5199;&#x597D;&#x540E;&#x5C31;&#x5F00;&#x59CB;&#x8BA9;&#x5B83;&#x5DE5;&#x4F5C;&#x5427;&#xFF01;</p><p></p><figure class="highlight plain hljs"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">output = pd.DataFrame()</span><br><span class="line">final_output = pd.DataFrame(columns=[&apos;Pattern&apos;, &apos;Win Rate (1 Day)&apos;, &apos;Win Rate (5 Days)&apos;,&apos;Win Rate (10 Days)&apos;,</span><br><span class="line">                                     &apos;Win Rate (30 Days)&apos;])</span><br><span class="line"></span><br><span class="line">for pattern in pattern_name:</span><br><span class="line">    for code in stock_code_list:</span><br><span class="line">        df = pd.read_csv(code + &apos;.csv&apos;, parse_dates=[1])</span><br><span class="line"></span><br><span class="line">        for i in days:</span><br><span class="line">            df[&apos;Gains after &apos; + str(i) + &apos; days&apos;] = df[&apos;Close&apos;].shift(-i)/df[&apos;Close&apos;] - 1</span><br><span class="line"></span><br><span class="line">        df[pattern] = getattr(talib, pattern)(df[&apos;Open&apos;].astype(float).values, df[&apos;High&apos;].astype(float).values,</span><br><span class="line">                                                        df[&apos;Low&apos;].astype(float).values,df[&apos;Close&apos;].astype(float).values)</span><br><span class="line"></span><br><span class="line">        pattern_df = df[df[pattern] != 0]</span><br><span class="line">        output = output.append(pattern_df)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        bullish_output = output[output[pattern]&gt;0]</span><br><span class="line">        OneDayWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 1 days&apos;] &gt; 0]) /\</span><br><span class="line">                        len(bullish_output[&apos;Gains after 1 days&apos;])</span><br><span class="line">        FiveDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 5 days&apos;] &gt; 0]) /\</span><br><span class="line">                          len(bullish_output[&apos;Gains after 5 days&apos;])</span><br><span class="line">        TenDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 10 days&apos;] &gt; 0]) /\</span><br><span class="line">                         len(bullish_output[&apos;Gains after 10 days&apos;])</span><br><span class="line">        ThirtyDaysWinRate = len(bullish_output.loc[bullish_output[&apos;Gains after 30 days&apos;] &gt; 0]) /\</span><br><span class="line">                            len(bullish_output[&apos;Gains after 30 days&apos;])</span><br><span class="line">        final_output = final_output.append({&apos;Pattern&apos;: &apos;Bullish &apos; + pattern,</span><br><span class="line">                                            &apos;Win Rate (1 Day)&apos;: OneDayWinRate,</span><br><span class="line">                                            &apos;Win Rate (5 Days)&apos;: FiveDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (10 Days)&apos;: TenDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (30 Days)&apos;: ThirtyDaysWinRate}, ignore_index=True)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;No bullish pattern&quot;)</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        bearish_output = output[output[pattern] &lt; 0]</span><br><span class="line">        OneDayWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 1 days&apos;] &gt; 0]) / \</span><br><span class="line">                        len(bearish_output[&apos;Gains after 1 days&apos;])</span><br><span class="line">        FiveDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 5 days&apos;] &gt; 0]) / \</span><br><span class="line">                          len(bearish_output[&apos;Gains after 5 days&apos;])</span><br><span class="line">        TenDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 10 days&apos;] &gt; 0]) / \</span><br><span class="line">                         len(bearish_output[&apos;Gains after 10 days&apos;])</span><br><span class="line">        ThirtyDaysWinRate = len(bearish_output.loc[bearish_output[&apos;Gains after 30 days&apos;] &gt; 0]) / \</span><br><span class="line">                            len(bearish_output[&apos;Gains after 30 days&apos;])</span><br><span class="line">        final_output = final_output.append({&apos;Pattern&apos;: &apos;Bearish &apos; + pattern,</span><br><span class="line">                                            &apos;Win Rate (1 Day)&apos;: OneDayWinRate,</span><br><span class="line">                                            &apos;Win Rate (5 Days)&apos;: FiveDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (10 Days)&apos;: TenDaysWinRate,</span><br><span class="line">                                            &apos;Win Rate (30 Days)&apos;: ThirtyDaysWinRate}, ignore_index=True)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(&quot;No bearish pattern&quot;)</span><br><span class="line"></span><br><span class="line">    print(&apos;Done analysis on &apos; + pattern)</span><br><span class="line"></span><br><span class="line">print(final_output)</span><br><span class="line">final_output.to_csv(&apos;candlestick_analysis.csv&apos;,index=False)</span><br></pre></td></tr></tbody></table></figure><p></p><hr><h2 id="&#x7ED3;&#x679C;"><a href="#&#x7ED3;&#x679C;" class="headerlink" title="&#x7ED3;&#x679C;"></a>&#x7ED3;&#x679C;</h2><p>&#x7A0B;&#x5E8F;&#x8BA1;&#x7B97;&#x4E86;&#x6BCF;&#x4E2A;&#x8721;&#x70DB;&#x56FE;&#x5F62;&#x5728;&#x9A6C;&#x80A1;&#x6BCF;&#x4E00;&#x4E2A;&#x4E2A;&#x80A1;&#x5728; (1,5,10,30) &#x5929;&#x8FC7;&#x540E;&#x7684;&#x8868;&#x73B0;. 0.7&#x7684;&#x8868;&#x73B0;&#x5C31;&#x7B49;&#x4E8E;&#x5728;10&#x6B21;&#x51FA;&#x73B0;&#x8BE5;&#x8721;&#x70DB;&#x56FE;&#x5F62;&#x540E;, &#x6709;7&#x6B21;&#x80A1;&#x4EF7;&#x662F;&#x4E0A;&#x6DA8;&#x7684;.</p><p>&#x5C0F;&#x7F16;&#x6574;&#x7406;&#x4E86;&#x4E00;&#x4E9B;&#x6570;&#x636E;&#x5E76;&#x5217;&#x51FA;&#x6240;&#x6709;&#x7684;&#x8721;&#x70DB;&#x56FE;&#x6848;</p><p><img src="/img/candlestick_result_table.png" alt="Candlestick pattern and win rate in one table"></p><p>&#x795E;&#x5947;&#x7684;&#x662F;, &#x8BB8;&#x591A;&#x725B;&#x5E02;&#x4FE1;&#x53F7;&#x90FD;&#x6709;&#x7740;&#x975E;&#x5E38;&#x4F4E;&#x7684;&#x8D62;&#x7387;, &#x4E2A;&#x4EBA;&#x63A8;&#x65AD;&#x662F;&#x56E0;&#x4E3A;&#x5F53;&#x5927;&#x5BB6;&#x90FD;&#x4F7F;&#x7528;&#x540C;&#x4E00;&#x4E2A;&#x4FE1;&#x53F7;&#x7684;&#x65F6;&#x5019;, &#x5176;&#x83B7;&#x5229;&#x80FD;&#x529B;&#x5C06;&#x4F1A;&#x5927;&#x5927;&#x51CF;&#x5C11;. &#x5176;&#x5B9E;&#x4EE5;&#x4E0A;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x51FA;&#x4E4E;&#x6211;&#x7684;&#x610F;&#x6599;&#x7684;, &#x56E0;&#x4E3A;&#x6CA1;&#x60F3;&#x5230;&#x7ADF;&#x7136;&#x5F88;&#x5C11;&#x6307;&#x6807;&#x6709;&#x8D85;&#x8FC7;50%&#x7684;&#x80DC;&#x7387;. &#x53EF;&#x662F;&#x503C;&#x5F97;&#x4E00;&#x63D0;&#x7684;&#x662F;&#x6709;&#x4E9B;&#x8721;&#x70DB;&#x56FE;&#x5F62;&#x6709;&#x8D85;&#x8FC7;0.45&#x7684;&#x80DC;&#x7387;. &#x5982;&#x679C;&#x914D;&#x5408;&#x5176;&#x4ED6;&#x7684;&#x6307;&#x6807;&#x548C;&#x98CE;&#x9669;&#x7BA1;&#x7406;&#x7684;&#x8BDD;&#x8FD9;&#x53EF;&#x80FD;&#x662F;&#x53EF;&#x4EE5;&#x6301;&#x7EED;&#x6027;&#x83B7;&#x5229;&#x7684;&#x4EA4;&#x6613;&#x6307;&#x6807;.</p><h2 id="&#x60F3;&#x6CD5;"><a href="#&#x60F3;&#x6CD5;" class="headerlink" title="&#x60F3;&#x6CD5;"></a>&#x60F3;&#x6CD5;</h2><p>&#x8FD9;&#x4E2A;&#x56DE;&#x6D4B;&#x7A0B;&#x5E8F;&#x4E5F;&#x4E0D;&#x662F;100%&#x5B8C;&#x7F8E;&#x7684;, &#x4E00;&#x4E9B;&#x5F31;&#x70B9;&#x6BD4;&#x5982;&#x6CA1;&#x6709;&#x8003;&#x8651;&#x8721;&#x70DB;&#x5F62;&#x6001;&#x51FA;&#x73B0;&#x7684;&#x5730;&#x65B9; (&#x6709;&#x4E9B;&#x5F62;&#x6001;&#x662F;&#x5728;&#x4F4E;&#x4F4D;/&#x9AD8;&#x4F4D;&#x624D;&#x6BD4;&#x8F83;&#x6709;&#x6548;&#x7684;). &#x65E0;&#x8BBA;&#x5982;&#x4F55;&#x8FD9;&#x6B21;&#x7684;&#x7814;&#x7A76;&#x4E5F;&#x521D;&#x6B65;&#x5C55;&#x793A;&#x4E86;&#x8721;&#x70DB;&#x56FE;&#x5F62;&#x5728;&#x9A6C;&#x80A1;&#x7684;&#x6709;&#x6548;&#x6027;&#x548C;&#x80DC;&#x7387;.</p><p>&#x6216;&#x8BB8;&#x8721;&#x70DB;&#x56FE;&#x5F62;&#x5FC5;&#x987B;&#x914D;&#x5408;&#x5176;&#x4ED6;&#x6280;&#x672F;&#x6307;&#x6807;&#x624D;&#x80FD;&#x8FBE;&#x5230;&#x6BD4;&#x8F83;&#x9AD8;&#x7684;&#x80DC;&#x7387;. &#x503C;&#x5F97;&#x4E00;&#x63D0;&#x7684;&#x662F;, 0.2&#x80DC;&#x7387;&#x7684;&#x56FE;&#x5F62;&#x4E5F;&#x53EF;&#x4EE5;&#x5F53;&#x6210;&#x53CD;&#x5411;&#x6307;&#x6807;&#x6765;&#x4F7F;&#x7528; (0.2&#x7684;&#x80DC;&#x7387;&#x4EE3;&#x8868;&#x56FE;&#x5F62;&#x51FA;&#x73B0;&#x540E;&#x4E0B;&#x8DCC;&#x7684;&#x6982;&#x7387;&#x504F;&#x5927;)</p><p>&#x8FD9;&#x9879;&#x7814;&#x7A76;&#x7684;&#x51FA;&#x53D1;&#x70B9;&#x662F;&#x5B66;&#x4E60;&#x548C;&#x63A2;&#x7D22;&#x7528;&#x9014;. &#x4EA4;&#x6613;&#x81EA;&#x8D1F;</p></body></html>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 蜡烛图 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
